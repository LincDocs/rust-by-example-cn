import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(c,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="共享引用计数-arc" tabindex="-1"><a class="header-anchor" href="#共享引用计数-arc"><span>共享引用计数 Arc</span></a></h1><p>当线程之间所有权需要共享时，可以使用<code>Arc</code>（共享引用计数，Atomic Reference Counted 缩写）可以使用。这个结构通过 <code>Clone</code> 实现可以为内存堆中的值的位置创建一个引用指针，同时增加引用计数器。由于它在线程之间共享所有权，因此当指向某个值的最后一个引用指针退出作用域时，该变量将被删除。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::sync::Arc;</span></span>
<span class="line"><span>use std::thread;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 这个变量声明用来指定其值的地方。</span></span>
<span class="line"><span>    let apple = Arc::new(&quot;the same apple&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for _ in 0..10 {</span></span>
<span class="line"><span>        // 这里没有数值说明，因为它是一个指向内存堆中引用的指针。</span></span>
<span class="line"><span>        let apple = Arc::clone(&amp;apple);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        thread::spawn(move || {</span></span>
<span class="line"><span>            // 由于使用了Arc，线程可以使用分配在 \`Arc\` 变量指针位置的值来生成。</span></span>
<span class="line"><span>            println!(&quot;{:?}&quot;, apple);</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const d=s(l,[["render",p],["__file","arc.html.vue"]]),r=JSON.parse('{"path":"/std/arc.html","title":"共享引用计数 Arc","lang":"zh-CN","frontmatter":{"description":"共享引用计数 Arc 当线程之间所有权需要共享时，可以使用Arc（共享引用计数，Atomic Reference Counted 缩写）可以使用。这个结构通过 Clone 实现可以为内存堆中的值的位置创建一个引用指针，同时增加引用计数器。由于它在线程之间共享所有权，因此当指向某个值的最后一个引用指针退出作用域时，该变量将被删除。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std/arc.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"共享引用计数 Arc"}],["meta",{"property":"og:description","content":"共享引用计数 Arc 当线程之间所有权需要共享时，可以使用Arc（共享引用计数，Atomic Reference Counted 缩写）可以使用。这个结构通过 Clone 实现可以为内存堆中的值的位置创建一个引用指针，同时增加引用计数器。由于它在线程之间共享所有权，因此当指向某个值的最后一个引用指针退出作用域时，该变量将被删除。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"共享引用计数 Arc\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.74,"words":223},"filePathRelative":"std/arc.md","excerpt":"\\n<p>当线程之间所有权需要共享时，可以使用<code>Arc</code>（共享引用计数，Atomic Reference Counted 缩写）可以使用。这个结构通过 <code>Clone</code> 实现可以为内存堆中的值的位置创建一个引用指针，同时增加引用计数器。由于它在线程之间共享所有权，因此当指向某个值的最后一个引用指针退出作用域时，该变量将被删除。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::sync::Arc;</span></span>\\n<span class=\\"line\\"><span>use std::thread;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 这个变量声明用来指定其值的地方。</span></span>\\n<span class=\\"line\\"><span>    let apple = Arc::new(\\"the same apple\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    for _ in 0..10 {</span></span>\\n<span class=\\"line\\"><span>        // 这里没有数值说明，因为它是一个指向内存堆中引用的指针。</span></span>\\n<span class=\\"line\\"><span>        let apple = Arc::clone(&amp;apple);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        thread::spawn(move || {</span></span>\\n<span class=\\"line\\"><span>            // 由于使用了Arc，线程可以使用分配在 `Arc` 变量指针位置的值来生成。</span></span>\\n<span class=\\"line\\"><span>            println!(\\"{:?}\\", apple);</span></span>\\n<span class=\\"line\\"><span>        });</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std/arc.md","value":{"title":"arc","path":"std/arc.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std/arc.md"}]}}}');export{d as comp,r as data};
