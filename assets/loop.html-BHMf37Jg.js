import{_ as s,e as a,k as i,o as e}from"./app-CY03Lsxp.js";const l={};function p(t,n){return e(),a("div",null,n[0]||(n[0]=[i(`<h1 id="loop-循环" tabindex="-1"><a class="header-anchor" href="#loop-循环"><span>loop 循环</span></a></h1><p>Rust 提供了 <code>loop</code> 关键字来表示一个无限循环。</p><p>可以使用 <code>break</code> 语句在任何时候退出一个循环，还可以使用 <code>continue</code> 跳过循环体的剩余部分并开始下一轮循环。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let mut count = 0u32;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;Let&#39;s count until infinity!&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 无限循环</span></span>
<span class="line"><span>    loop {</span></span>
<span class="line"><span>        count += 1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if count == 3 {</span></span>
<span class="line"><span>            println!(&quot;three&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            // 跳过这次迭代的剩下内容</span></span>
<span class="line"><span>            continue;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        println!(&quot;{}&quot;, count);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if count == 5 {</span></span>
<span class="line"><span>            println!(&quot;OK, that&#39;s enough&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            // 退出循环</span></span>
<span class="line"><span>            break;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const d=s(l,[["render",p],["__file","loop.html.vue"]]),o=JSON.parse(`{"path":"/flow_control/loop.html","title":"loop 循环","lang":"zh-CN","frontmatter":{"description":"loop 循环 Rust 提供了 loop 关键字来表示一个无限循环。 可以使用 break 语句在任何时候退出一个循环，还可以使用 continue 跳过循环体的剩余部分并开始下一轮循环。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/flow_control/loop.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"loop 循环"}],["meta",{"property":"og:description","content":"loop 循环 Rust 提供了 loop 关键字来表示一个无限循环。 可以使用 break 语句在任何时候退出一个循环，还可以使用 continue 跳过循环体的剩余部分并开始下一轮循环。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"loop 循环\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.39,"words":118},"filePathRelative":"flow_control/loop.md","excerpt":"\\n<p>Rust 提供了 <code>loop</code> 关键字来表示一个无限循环。</p>\\n<p>可以使用 <code>break</code> 语句在任何时候退出一个循环，还可以使用 <code>continue</code> 跳过循环体的剩余部分并开始下一轮循环。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let mut count = 0u32;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"Let's count until infinity!\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 无限循环</span></span>\\n<span class=\\"line\\"><span>    loop {</span></span>\\n<span class=\\"line\\"><span>        count += 1;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        if count == 3 {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"three\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>            // 跳过这次迭代的剩下内容</span></span>\\n<span class=\\"line\\"><span>            continue;</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        println!(\\"{}\\", count);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        if count == 5 {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"OK, that's enough\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>            // 退出循环</span></span>\\n<span class=\\"line\\"><span>            break;</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"flow_control/loop.md","value":{"title":"loop","path":"flow_control/loop.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"flow_control/loop.md"}]}}}`);export{d as comp,o as data};
