import{_ as l,e as t,k as i,f as n,i as e,g as p,h as r,r as d,o}from"./app-CY03Lsxp.js";const u={};function c(m,s){const a=d("RouteLink");return o(),t("div",null,[s[13]||(s[13]=i(`<h1 id="从-option-中取出-result" tabindex="-1"><a class="header-anchor" href="#从-option-中取出-result"><span>从 <code>Option</code> 中取出 <code>Result</code></span></a></h1><p>处理混合错误类型的最基本的手段就是让它们互相包含。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::num::ParseIntError;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn double_first(vec: Vec&lt;&amp;str&gt;) -&gt; Option&lt;Result&lt;i32, ParseIntError&gt;&gt; {</span></span>
<span class="line"><span>    vec.first().map(|first| {</span></span>
<span class="line"><span>        first.parse::&lt;i32&gt;().map(|n| 2 * n)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let numbers = vec![&quot;42&quot;, &quot;93&quot;, &quot;18&quot;];</span></span>
<span class="line"><span>    let empty = vec![];</span></span>
<span class="line"><span>    let strings = vec![&quot;tofu&quot;, &quot;93&quot;, &quot;18&quot;];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;The first doubled is {:?}&quot;, double_first(numbers));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;The first doubled is {:?}&quot;, double_first(empty));</span></span>
<span class="line"><span>    // Error 1: the input vector is empty</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;The first doubled is {:?}&quot;, double_first(strings));</span></span>
<span class="line"><span>    // Error 2: the element doesn&#39;t parse to a number</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),n("p",null,[s[1]||(s[1]=e("有时候我们不想再处理错误（比如使用 ")),p(a,{to:"/error/result/enter_question_mark.html"},{default:r(()=>s[0]||(s[0]=[n("code",null,"?",-1)])),_:1}),s[2]||(s[2]=e(" 的时候），但如果")),s[3]||(s[3]=n("br",null,null,-1)),s[4]||(s[4]=n("code",null,"Option",-1)),s[5]||(s[5]=e(" 是 ")),s[6]||(s[6]=n("code",null,"None",-1)),s[7]||(s[7]=e(" 则继续处理错误。一些组合算子可以让我们轻松地交换 ")),s[8]||(s[8]=n("code",null,"Result",-1)),s[9]||(s[9]=e(" 和")),s[10]||(s[10]=n("br",null,null,-1)),s[11]||(s[11]=n("code",null,"Option",-1)),s[12]||(s[12]=e("。"))]),s[14]||(s[14]=i(`<div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::num::ParseIntError;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn double_first(vec: Vec&lt;&amp;str&gt;) -&gt; Result&lt;Option&lt;i32&gt;, ParseIntError&gt; {</span></span>
<span class="line"><span>    let opt = vec.first().map(|first| {</span></span>
<span class="line"><span>        first.parse::&lt;i32&gt;().map(|n| 2 * n)</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    opt.map_or(Ok(None), |r| r.map(Some))</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let numbers = vec![&quot;42&quot;, &quot;93&quot;, &quot;18&quot;];</span></span>
<span class="line"><span>    let empty = vec![];</span></span>
<span class="line"><span>    let strings = vec![&quot;tofu&quot;, &quot;93&quot;, &quot;18&quot;];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;The first doubled is {:?}&quot;, double_first(numbers));</span></span>
<span class="line"><span>    println!(&quot;The first doubled is {:?}&quot;, double_first(empty));</span></span>
<span class="line"><span>    println!(&quot;The first doubled is {:?}&quot;, double_first(strings));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const b=l(u,[["render",c],["__file","option_result.html.vue"]]),g=JSON.parse(`{"path":"/error/multiple_error_types/option_result.html","title":"从 Option 中取出 Result","lang":"zh-CN","frontmatter":{"description":"从 Option 中取出 Result 处理混合错误类型的最基本的手段就是让它们互相包含。 有时候我们不想再处理错误（比如使用 的时候），但如果 Option 是 None 则继续处理错误。一些组合算子可以让我们轻松地交换 Result 和 Option。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/error/multiple_error_types/option_result.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"从 Option 中取出 Result"}],["meta",{"property":"og:description","content":"从 Option 中取出 Result 处理混合错误类型的最基本的手段就是让它们互相包含。 有时候我们不想再处理错误（比如使用 的时候），但如果 Option 是 None 则继续处理错误。一些组合算子可以让我们轻松地交换 Result 和 Option。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从 Option 中取出 Result\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.78,"words":235},"filePathRelative":"error/multiple_error_types/option_result.md","excerpt":"\\n<p>处理混合错误类型的最基本的手段就是让它们互相包含。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::num::ParseIntError;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn double_first(vec: Vec&lt;&amp;str&gt;) -&gt; Option&lt;Result&lt;i32, ParseIntError&gt;&gt; {</span></span>\\n<span class=\\"line\\"><span>    vec.first().map(|first| {</span></span>\\n<span class=\\"line\\"><span>        first.parse::&lt;i32&gt;().map(|n| 2 * n)</span></span>\\n<span class=\\"line\\"><span>    })</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let numbers = vec![\\"42\\", \\"93\\", \\"18\\"];</span></span>\\n<span class=\\"line\\"><span>    let empty = vec![];</span></span>\\n<span class=\\"line\\"><span>    let strings = vec![\\"tofu\\", \\"93\\", \\"18\\"];</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"The first doubled is {:?}\\", double_first(numbers));</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"The first doubled is {:?}\\", double_first(empty));</span></span>\\n<span class=\\"line\\"><span>    // Error 1: the input vector is empty</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"The first doubled is {:?}\\", double_first(strings));</span></span>\\n<span class=\\"line\\"><span>    // Error 2: the element doesn't parse to a number</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"enter_question_mark","link":"error/result/enter_question_mark.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"error/multiple_error_types/option_result.md","value":{"title":"option_result","path":"error/multiple_error_types/option_result.md","outlink":["error/result/enter_question_mark.md"],"backlink":["SUMMARY.md"]}},{"id":"error/result/enter_question_mark.md","value":{"title":"enter_question_mark","path":"error/result/enter_question_mark.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"error/multiple_error_types/option_result.md","target":"error/result/enter_question_mark.md"},{"source":"SUMMARY.md","target":"error/multiple_error_types/option_result.md"}]}}}`);export{b as comp,g as data};
