import{_ as p,e as r,k as t,f as i,i as n,g as a,h as l,r as o,o as d}from"./app-CVSWwIkE.js";const m={};function c(u,s){const e=o("RouteLink");return d(),r("div",null,[s[17]||(s[17]=t('<h1 id="显式标注" tabindex="-1"><a class="header-anchor" href="#显式标注"><span>显式标注</span></a></h1><p>借用检查器使用显式的生命周期标记来明确引用的有效时间应该持续多久。在生命周期没有省略[^1]的情况下，Rust 需要显式标注来确定引用的生命周期应该是什么样的。可以用撇号显式地标出生命周期，语法如下：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>foo&lt;&#39;a&gt;</span></span>\n<span class="line"><span>// `foo` 带有一个生命周期参数 `&#39;a`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>',3)),i("p",null,[s[1]||(s[1]=n("和")),a(e,{to:"/fn/closures/anonymity.html"},{default:l(()=>s[0]||(s[0]=[n("闭包")])),_:1}),s[2]||(s[2]=n("类似，使用生命周期需要泛型。另外这个生命周期的语法也表明了 ")),s[3]||(s[3]=i("code",null,"foo",-1)),s[4]||(s[4]=n(" 的生命周期不能超出 ")),s[5]||(s[5]=i("code",null,"'a",-1)),s[6]||(s[6]=n(" 的周期。若要给类型显式地标注生命周期，其语法会像是 ")),s[7]||(s[7]=i("code",null,"&'a T",-1)),s[8]||(s[8]=n(" 这样，其中 ")),s[9]||(s[9]=i("code",null,"'a",-1)),s[10]||(s[10]=n(" 的作用刚刚已经介绍了。"))]),s[18]||(s[18]=t('<div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>foo&lt;&#39;a, &#39;b&gt;</span></span>\n<span class="line"><span>// `foo` 带有生命周期参数 `&#39;a` 和 `&#39;b`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这种情形中，<code>foo</code> 的生命周期不能超出 <code>&#39;a</code> 和 <code>&#39;b</code> 中任一个的周期。</p><p>看下面的例子，了解显式生命周期标注的运用：</p><div class="language-rust,editable,ignore,mdbook-runnable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore,mdbook-runnable" data-title="rust,editable,ignore,mdbook-runnable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// `print_refs` 接受两个 `i32` 的引用，它们有不同的生命周期 `&#39;a` 和 `&#39;b`。</span></span>\n<span class="line"><span>// 这两个生命周期都必须至少要和 `print_refs` 函数一样长。</span></span>\n<span class="line"><span>fn print_refs&lt;&#39;a, &#39;b&gt;(x: &amp;&#39;a i32, y: &amp;&#39;b i32) {</span></span>\n<span class="line"><span>    println!(&quot;x is {} and y is {}&quot;, x, y);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 不带参数的函数，不过有一个生命周期参数 `&#39;a`。</span></span>\n<span class="line"><span>fn failed_borrow&lt;&#39;a&gt;() {</span></span>\n<span class="line"><span>    let _x = 12;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 报错：`_x` 的生命周期不够长</span></span>\n<span class="line"><span>    //let y: &amp;&#39;a i32 = &amp;_x;</span></span>\n<span class="line"><span>    // 在函数内部使用生命周期 `&#39;a` 作为显式类型标注将导致失败，因为 `&amp;_x` 的</span></span>\n<span class="line"><span>    // 生命周期比 `y` 的短。短生命周期不能强制转换成长生命周期。</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>fn main() {</span></span>\n<span class="line"><span>    // 创建变量，稍后用于借用。</span></span>\n<span class="line"><span>    let (four, nine) = (4, 9);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 两个变量的借用（`&amp;`）都传进函数。</span></span>\n<span class="line"><span>    print_refs(&amp;four, &amp;nine);</span></span>\n<span class="line"><span>    // 任何被借用的输入量都必须比借用者生存得更长。</span></span>\n<span class="line"><span>    // 也就是说，`four` 和 `nine` 的生命周期都必须比 `print_refs` 的长。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    failed_borrow();</span></span>\n<span class="line"><span>    // `failed_borrow` 未包含引用，因此不要求 `&#39;a` 长于函数的生命周期，</span></span>\n<span class="line"><span>    // 但 `&#39;a` 寿命确实更长。因为该生命周期从未被约束，所以默认为 `&#39;static`。</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4)),i("p",null,[s[12]||(s[12]=n("[^1]: ")),a(e,{to:"/scope/lifetime/elision.html"},{default:l(()=>s[11]||(s[11]=[n("省略")])),_:1}),s[13]||(s[13]=n(" 隐式地标注了生命周期，所以情况不同。"))]),s[19]||(s[19]=i("h3",{id:"参见",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#参见"},[i("span",null,"参见：")])],-1)),i("p",null,[a(e,{to:"/generics.html"},{default:l(()=>s[14]||(s[14]=[n("泛型")])),_:1}),s[16]||(s[16]=n(" 和 ")),a(e,{to:"/fn/closures.html"},{default:l(()=>s[15]||(s[15]=[n("闭包")])),_:1})])])}const v=p(m,[["render",c],["__file","explicit.html.vue"]]),g=JSON.parse('{"path":"/scope/lifetime/explicit.html","title":"显式标注","lang":"zh-CN","frontmatter":{"description":"显式标注 借用检查器使用显式的生命周期标记来明确引用的有效时间应该持续多久。在生命周期没有省略[^1]的情况下，Rust 需要显式标注来确定引用的生命周期应该是什么样的。可以用撇号显式地标出生命周期，语法如下： 和类似，使用生命周期需要泛型。另外这个生命周期的语法也表明了 foo 的生命周期不能超出 \'a 的周期。若要给类型显式地标注生命周期，其语法会...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/scope/lifetime/explicit.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"显式标注"}],["meta",{"property":"og:description","content":"显式标注 借用检查器使用显式的生命周期标记来明确引用的有效时间应该持续多久。在生命周期没有省略[^1]的情况下，Rust 需要显式标注来确定引用的生命周期应该是什么样的。可以用撇号显式地标出生命周期，语法如下： 和类似，使用生命周期需要泛型。另外这个生命周期的语法也表明了 foo 的生命周期不能超出 \'a 的周期。若要给类型显式地标注生命周期，其语法会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"显式标注\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.95,"words":585},"filePathRelative":"scope/lifetime/explicit.md","excerpt":"\\n<p>借用检查器使用显式的生命周期标记来明确引用的有效时间应该持续多久。在生命周期没有省略[^1]的情况下，Rust 需要显式标注来确定引用的生命周期应该是什么样的。可以用撇号显式地标出生命周期，语法如下：</p>\\n<div class=\\"language-rust,ignore line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,ignore\\" data-title=\\"rust,ignore\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>foo&lt;\'a&gt;</span></span>\\n<span class=\\"line\\"><span>// `foo` 带有一个生命周期参数 `\'a`</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"anonymity","link":"fn/closures/anonymity.html"},{"title":"elision","link":"scope/lifetime/elision.html"},{"title":"generics","link":"generics.html"},{"title":"closures","link":"fn/closures.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"scope/lifetime/explicit.md","value":{"title":"explicit","path":"scope/lifetime/explicit.md","outlink":["fn/closures/anonymity.md","scope/lifetime/elision.md","generics.md","fn/closures.md"],"backlink":["SUMMARY.md"]}},{"id":"fn/closures/anonymity.md","value":{"title":"anonymity","path":"fn/closures/anonymity.md","outlink":[],"backlink":[]}},{"id":"scope/lifetime/elision.md","value":{"title":"elision","path":"scope/lifetime/elision.md","outlink":[],"backlink":[]}},{"id":"generics.md","value":{"title":"generics","path":"generics.md","outlink":[],"backlink":[]}},{"id":"fn/closures.md","value":{"title":"closures","path":"fn/closures.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"scope/lifetime/explicit.md","target":"fn/closures/anonymity.md"},{"source":"scope/lifetime/explicit.md","target":"scope/lifetime/elision.md"},{"source":"scope/lifetime/explicit.md","target":"generics.md"},{"source":"scope/lifetime/explicit.md","target":"fn/closures.md"},{"source":"SUMMARY.md","target":"scope/lifetime/explicit.md"}]}}}');export{v as comp,g as data};
