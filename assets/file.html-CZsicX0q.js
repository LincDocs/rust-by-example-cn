import{_ as t,e as o,k as i,o as l}from"./app-CVSWwIkE.js";const c={};function n(r,e){return l(),o("div",null,e[0]||(e[0]=[i('<h1 id="文件输入输出-i-o" tabindex="-1"><a class="header-anchor" href="#文件输入输出-i-o"><span>文件输入输出（I/O）</span></a></h1><p><code>File</code> 结构体表示一个被打开的文件（它包裹了一个文件描述符），并赋予了对所表示的文件的读写能力。</p><p>由于在进行文件 I/O（输入/输出）操作时可能出现各种错误，因此 <code>File</code> 的所有方法都返回 <code>io::Result&lt;T&gt;</code> 类型，它是 <code>Result&lt;T, io::Error&gt;</code> 的别名。</p><p>这使得所有 I/O 操作的失败都变成<strong>显式的</strong>。借助这点，程序员可以看到所有的失败路径，并被鼓励主动地处理这些情形。</p>',4)]))}const a=t(c,[["render",n],["__file","file.html.vue"]]),p=JSON.parse('{"path":"/std_misc/file.html","title":"文件输入输出（I/O）","lang":"zh-CN","frontmatter":{"description":"文件输入输出（I/O） File 结构体表示一个被打开的文件（它包裹了一个文件描述符），并赋予了对所表示的文件的读写能力。 由于在进行文件 I/O（输入/输出）操作时可能出现各种错误，因此 File 的所有方法都返回 io::Result<T> 类型，它是 Result<T, io::Error> 的别名。 这使得所有 I/O 操作的失败都变成显式的。...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std_misc/file.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"文件输入输出（I/O）"}],["meta",{"property":"og:description","content":"文件输入输出（I/O） File 结构体表示一个被打开的文件（它包裹了一个文件描述符），并赋予了对所表示的文件的读写能力。 由于在进行文件 I/O（输入/输出）操作时可能出现各种错误，因此 File 的所有方法都返回 io::Result<T> 类型，它是 Result<T, io::Error> 的别名。 这使得所有 I/O 操作的失败都变成显式的。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件输入输出（I/O）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"std_misc/file.md","excerpt":"\\n<p><code>File</code> 结构体表示一个被打开的文件（它包裹了一个文件描述符），并赋予了对所表示的文件的读写能力。</p>\\n<p>由于在进行文件 I/O（输入/输出）操作时可能出现各种错误，因此 <code>File</code> 的所有方法都返回 <code>io::Result&lt;T&gt;</code> 类型，它是 <code>Result&lt;T, io::Error&gt;</code> 的别名。</p>\\n<p>这使得所有 I/O 操作的失败都变成<strong>显式的</strong>。借助这点，程序员可以看到所有的失败路径，并被鼓励主动地处理这些情形。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std_misc/file.md","value":{"title":"file","path":"std_misc/file.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std_misc/file.md"}]}}}');export{a as comp,p as data};
