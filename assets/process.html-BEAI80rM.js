import{_ as n,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="子进程" tabindex="-1"><a class="header-anchor" href="#子进程"><span>子进程</span></a></h1><p><code>process::Output</code> 结构体表示已结束的子进程（child process）的输出，而<br><code>process::Command</code> 结构体是一个进程创建者（process builder）。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::process::Command;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let output = Command::new(&quot;rustc&quot;)</span></span>
<span class="line"><span>        .arg(&quot;--version&quot;)</span></span>
<span class="line"><span>        .output().unwrap_or_else(|e| {</span></span>
<span class="line"><span>            panic!(&quot;failed to execute process: {}&quot;, e)</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if output.status.success() {</span></span>
<span class="line"><span>        let s = String::from_utf8_lossy(&amp;output.stdout);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        print!(&quot;rustc succeeded and stdout was:\\n{}&quot;, s);</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        let s = String::from_utf8_lossy(&amp;output.stderr);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        print!(&quot;rustc failed and stderr was:\\n{}&quot;, s);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（再试试上面的例子，给 <code>rustc</code> 命令传入一个错误的 flag）</p>`,4)]))}const d=n(l,[["render",p],["__file","process.html.vue"]]),r=JSON.parse('{"path":"/std_misc/process.html","title":"子进程","lang":"zh-CN","frontmatter":{"description":"子进程 process::Output 结构体表示已结束的子进程（child process）的输出，而 process::Command 结构体是一个进程创建者（process builder）。 （再试试上面的例子，给 rustc 命令传入一个错误的 flag）","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std_misc/process.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"子进程"}],["meta",{"property":"og:description","content":"子进程 process::Output 结构体表示已结束的子进程（child process）的输出，而 process::Command 结构体是一个进程创建者（process builder）。 （再试试上面的例子，给 rustc 命令传入一个错误的 flag）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"子进程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.37,"words":111},"filePathRelative":"std_misc/process.md","excerpt":"\\n<p><code>process::Output</code> 结构体表示已结束的子进程（child process）的输出，而<br>\\n<code>process::Command</code> 结构体是一个进程创建者（process builder）。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::process::Command;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let output = Command::new(\\"rustc\\")</span></span>\\n<span class=\\"line\\"><span>        .arg(\\"--version\\")</span></span>\\n<span class=\\"line\\"><span>        .output().unwrap_or_else(|e| {</span></span>\\n<span class=\\"line\\"><span>            panic!(\\"failed to execute process: {}\\", e)</span></span>\\n<span class=\\"line\\"><span>    });</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    if output.status.success() {</span></span>\\n<span class=\\"line\\"><span>        let s = String::from_utf8_lossy(&amp;output.stdout);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        print!(\\"rustc succeeded and stdout was:\\\\n{}\\", s);</span></span>\\n<span class=\\"line\\"><span>    } else {</span></span>\\n<span class=\\"line\\"><span>        let s = String::from_utf8_lossy(&amp;output.stderr);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        print!(\\"rustc failed and stderr was:\\\\n{}\\", s);</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std_misc/process.md","value":{"title":"process","path":"std_misc/process.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std_misc/process.md"}]}}}');export{d as comp,r as data};
