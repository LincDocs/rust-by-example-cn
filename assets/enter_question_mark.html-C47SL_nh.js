import{_ as r,e as i,k as t,f as s,i as e,g as l,h as p,r as o,o as d}from"./app-CY03Lsxp.js";const c={};function u(m,n){const a=o("RouteLink");return d(),i("div",null,[n[3]||(n[3]=t(`<h1 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入 <code>?</code></span></a></h1><p>有时我们只是想 <code>unwrap</code> 且避免产生 <code>panic</code>。到现在为止，对 <code>unwrap</code> 的错误处理都在强迫我们一层层地嵌套，然而我们只是想把里面的变量拿出来。<code>?</code> 正是为这种情况准备的。</p><p>当找到一个 <code>Err</code> 时，可以采取两种行动：</p><ol><li><code>panic!</code>，不过我们已经决定要尽可能避免 panic 了。</li><li>返回它，因为 <code>Err</code> 就意味着它已经不能被处理了。</li></ol><p><code>?</code> <strong>几乎</strong>[^†] 就等于一个会返回 <code>Err</code> 而不是 <code>panic</code> 的 <code>unwrap</code>。我们来看看怎样简化之前使用组合算子的例子：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::num::ParseIntError;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn multiply(first_number_str: &amp;str, second_number_str: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {</span></span>
<span class="line"><span>    let first_number = first_number_str.parse::&lt;i32&gt;()?;</span></span>
<span class="line"><span>    let second_number = second_number_str.parse::&lt;i32&gt;()?;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Ok(first_number * second_number)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn print(result: Result&lt;i32, ParseIntError&gt;) {</span></span>
<span class="line"><span>    match result {</span></span>
<span class="line"><span>        Ok(n)  =&gt; println!(&quot;n is {}&quot;, n),</span></span>
<span class="line"><span>        Err(e) =&gt; println!(&quot;Error: {}&quot;, e),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    print(multiply(&quot;10&quot;, &quot;2&quot;));</span></span>
<span class="line"><span>    print(multiply(&quot;t&quot;, &quot;2&quot;));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="try-宏" tabindex="-1"><a class="header-anchor" href="#try-宏"><span><code>try!</code> 宏</span></a></h2><p>在 <code>?</code> 出现以前，相同的功能是使用 <code>try!</code> 宏完成的。现在我们推荐使用 <code>?</code> 运算符，但是在老代码中仍然会看到 <code>try!</code>。如果使用 <code>try!</code> 的话，上一个例子中的 <code>multiply</code> 函数看起来会像是这样：</p><div class="language-rust,editable,edition2015 line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,edition2015" data-title="rust,editable,edition2015" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::num::ParseIntError;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn multiply(first_number_str: &amp;str, second_number_str: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {</span></span>
<span class="line"><span>    let first_number = try!(first_number_str.parse::&lt;i32&gt;());</span></span>
<span class="line"><span>    let second_number = try!(second_number_str.parse::&lt;i32&gt;());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Ok(first_number * second_number)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn print(result: Result&lt;i32, ParseIntError&gt;) {</span></span>
<span class="line"><span>    match result {</span></span>
<span class="line"><span>        Ok(n)  =&gt; println!(&quot;n is {}&quot;, n),</span></span>
<span class="line"><span>        Err(e) =&gt; println!(&quot;Error: {}&quot;, e),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    print(multiply(&quot;10&quot;, &quot;2&quot;));</span></span>
<span class="line"><span>    print(multiply(&quot;t&quot;, &quot;2&quot;));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)),s("p",null,[n[1]||(n[1]=e("[^†]: 更多细节请看")),l(a,{to:"/error/multiple_error_types/reenter_question_mark.html"},{default:p(()=>n[0]||(n[0]=[s("code",null,"?",-1),e(" 的更多用法")])),_:1}),n[2]||(n[2]=e("。"))])])}const v=r(c,[["render",u],["__file","enter_question_mark.html.vue"]]),b=JSON.parse('{"path":"/error/result/enter_question_mark.html","title":"引入 ?","lang":"zh-CN","frontmatter":{"description":"引入 ? 有时我们只是想 unwrap 且避免产生 panic。到现在为止，对 unwrap 的错误处理都在强迫我们一层层地嵌套，然而我们只是想把里面的变量拿出来。? 正是为这种情况准备的。 当找到一个 Err 时，可以采取两种行动： panic!，不过我们已经决定要尽可能避免 panic 了。 返回它，因为 Err 就意味着它已经不能被处理了。 ? ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/error/result/enter_question_mark.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"引入 ?"}],["meta",{"property":"og:description","content":"引入 ? 有时我们只是想 unwrap 且避免产生 panic。到现在为止，对 unwrap 的错误处理都在强迫我们一层层地嵌套，然而我们只是想把里面的变量拿出来。? 正是为这种情况准备的。 当找到一个 Err 时，可以采取两种行动： panic!，不过我们已经决定要尽可能避免 panic 了。 返回它，因为 Err 就意味着它已经不能被处理了。 ? ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"引入 ?\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.17,"words":352},"filePathRelative":"error/result/enter_question_mark.md","excerpt":"\\n<p>有时我们只是想 <code>unwrap</code> 且避免产生 <code>panic</code>。到现在为止，对 <code>unwrap</code> 的错误处理都在强迫我们一层层地嵌套，然而我们只是想把里面的变量拿出来。<code>?</code> 正是为这种情况准备的。</p>\\n<p>当找到一个 <code>Err</code> 时，可以采取两种行动：</p>\\n<ol>\\n<li><code>panic!</code>，不过我们已经决定要尽可能避免 panic 了。</li>\\n<li>返回它，因为 <code>Err</code> 就意味着它已经不能被处理了。</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[{"title":"reenter_question_mark","link":"error/multiple_error_types/reenter_question_mark.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"option_result","link":"error/multiple_error_types/option_result.html"}],"localMap":{"nodes":[{"id":"error/result/enter_question_mark.md","value":{"title":"enter_question_mark","path":"error/result/enter_question_mark.md","outlink":["error/multiple_error_types/reenter_question_mark.md"],"backlink":["SUMMARY.md","error/multiple_error_types/option_result.md"]}},{"id":"error/multiple_error_types/reenter_question_mark.md","value":{"title":"reenter_question_mark","path":"error/multiple_error_types/reenter_question_mark.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"error/multiple_error_types/option_result.md","value":{"title":"option_result","path":"error/multiple_error_types/option_result.md","outlink":[],"backlink":[]}}],"links":[{"source":"error/result/enter_question_mark.md","target":"error/multiple_error_types/reenter_question_mark.md"},{"source":"SUMMARY.md","target":"error/result/enter_question_mark.md"},{"source":"error/multiple_error_types/option_result.md","target":"error/result/enter_question_mark.md"}]}}}');export{v as comp,b as data};
