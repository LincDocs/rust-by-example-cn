import{_ as n,e as a,k as s,o as i}from"./app-CVSWwIkE.js";const t={};function o(l,e){return i(),a("div",null,e[0]||(e[0]=[s(`<h1 id="约定规范" tabindex="-1"><a class="header-anchor" href="#约定规范"><span>约定规范</span></a></h1><p>在上一小节中，我们看到了以下目录层次结构：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>foo</span></span>
<span class="line"><span>├── Cargo.toml</span></span>
<span class="line"><span>└── src</span></span>
<span class="line"><span>    └── main.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们要在同一个项目中有两个二进制可执行文件。 那要怎样做呢？</p><p>很显然，<code>cargo</code> 支持这一点。正如我们之前看到的，默认二进制名称是 <code>main</code>，但可以通过将文件放在 <code>bin/</code> 目录中来添加其他二进制可执行文件：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>foo</span></span>
<span class="line"><span>├── Cargo.toml</span></span>
<span class="line"><span>└── src</span></span>
<span class="line"><span>    ├── main.rs</span></span>
<span class="line"><span>    └── bin</span></span>
<span class="line"><span>        └── my_other_bin.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使得 <code>cargo</code> 只编译或运行这个二进制可执行文件，我们只需给 <code>cargo</code> 增加一个参数 <code>--bin my_other_bin</code>，其中 <code>my_other_bin</code> 是我们想要使用的二进制可执行文件的名称。</p><p>除了可添加其他二进制可执行文件外，<code>cargo</code> 还支持<a href="https://doc.rust-lang.org/cargo/guide/project-layout.html" target="_blank" rel="noopener noreferrer">更多功能</a>，如基准测试，测试和示例。</p><p>在下一节中，我们将更仔细地学习测试的内容。</p>`,9)]))}const c=n(t,[["render",o],["__file","conventions.html.vue"]]),p=JSON.parse('{"path":"/cargo/conventions.html","title":"约定规范","lang":"zh-CN","frontmatter":{"description":"约定规范 在上一小节中，我们看到了以下目录层次结构： 假设我们要在同一个项目中有两个二进制可执行文件。 那要怎样做呢？ 很显然，cargo 支持这一点。正如我们之前看到的，默认二进制名称是 main，但可以通过将文件放在 bin/ 目录中来添加其他二进制可执行文件： 为了使得 cargo 只编译或运行这个二进制可执行文件，我们只需给 cargo 增加一...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/cargo/conventions.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"约定规范"}],["meta",{"property":"og:description","content":"约定规范 在上一小节中，我们看到了以下目录层次结构： 假设我们要在同一个项目中有两个二进制可执行文件。 那要怎样做呢？ 很显然，cargo 支持这一点。正如我们之前看到的，默认二进制名称是 main，但可以通过将文件放在 bin/ 目录中来添加其他二进制可执行文件： 为了使得 cargo 只编译或运行这个二进制可执行文件，我们只需给 cargo 增加一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"约定规范\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.79,"words":236},"filePathRelative":"cargo/conventions.md","excerpt":"\\n<p>在上一小节中，我们看到了以下目录层次结构：</p>\\n<div class=\\"language-txt line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"txt\\" data-title=\\"txt\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>foo</span></span>\\n<span class=\\"line\\"><span>├── Cargo.toml</span></span>\\n<span class=\\"line\\"><span>└── src</span></span>\\n<span class=\\"line\\"><span>    └── main.rs</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/conventions.md","value":{"title":"conventions","path":"cargo/conventions.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/conventions.md"}]}}}');export{c as comp,p as data};
