import{_ as p,e as d,k as t,f as a,g as i,i as l,h as e,r as c,o as v}from"./app-CVSWwIkE.js";const r={};function m(u,s){const n=c("RouteLink");return v(),d("div",null,[s[3]||(s[3]=t(`<h1 id="测试实例-链表" tabindex="-1"><a class="header-anchor" href="#测试实例-链表"><span>测试实例：链表</span></a></h1><p><code>enum</code> 的一个常见用法就是创建链表（linked-list）：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use List::*;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>enum List {</span></span>
<span class="line"><span>    // Cons：元组结构体，包含链表的一个元素和一个指向下一节点的指针</span></span>
<span class="line"><span>    Cons(u32, Box&lt;List&gt;),</span></span>
<span class="line"><span>    // Nil：末结点，表明链表结束</span></span>
<span class="line"><span>    Nil,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 可以为 enum 定义方法</span></span>
<span class="line"><span>impl List {</span></span>
<span class="line"><span>    // 创建一个空的 List 实例</span></span>
<span class="line"><span>    fn new() -&gt; List {</span></span>
<span class="line"><span>        // \`Nil\` 为 \`List\` 类型（译注：因 \`Nil\` 的完整名称是 \`List::Nil\`）</span></span>
<span class="line"><span>        Nil</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 处理一个 List，在其头部插入新元素，并返回该 List</span></span>
<span class="line"><span>    fn prepend(self, elem: u32) -&gt; List {</span></span>
<span class="line"><span>        // \`Cons\` 同样为 List 类型</span></span>
<span class="line"><span>        Cons(elem, Box::new(self))</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 返回 List 的长度</span></span>
<span class="line"><span>    fn len(&amp;self) -&gt; u32 {</span></span>
<span class="line"><span>        // 必须对 \`self\` 进行匹配（match），因为这个方法的行为取决于 \`self\` 的</span></span>
<span class="line"><span>        // 取值种类。</span></span>
<span class="line"><span>        // \`self\` 为 \`&amp;List\` 类型，\`*self\` 为 \`List\` 类型，匹配一个具体的 \`T\`</span></span>
<span class="line"><span>        // 类型要好过匹配引用 \`&amp;T\`。</span></span>
<span class="line"><span>        match *self {</span></span>
<span class="line"><span>            // 不能得到 tail 的所有权，因为 \`self\` 是借用的；</span></span>
<span class="line"><span>            // 因此使用一个对 tail 的引用</span></span>
<span class="line"><span>            Cons(_, ref tail) =&gt; 1 + tail.len(),</span></span>
<span class="line"><span>            // （递归的）基准情形（base case）：一个长度为 0 的空列表</span></span>
<span class="line"><span>            Nil =&gt; 0</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 返回列表的字符串表示（该字符串是堆分配的）</span></span>
<span class="line"><span>    fn stringify(&amp;self) -&gt; String {</span></span>
<span class="line"><span>        match *self {</span></span>
<span class="line"><span>            Cons(head, ref tail) =&gt; {</span></span>
<span class="line"><span>                // \`format!\` 和 \`print!\` 类似，但返回的是一个堆分配的字符串，</span></span>
<span class="line"><span>                // 而不是打印结果到控制台上</span></span>
<span class="line"><span>                format!(&quot;{}, {}&quot;, head, tail.stringify())</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            Nil =&gt; {</span></span>
<span class="line"><span>                format!(&quot;Nil&quot;)</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 创建一个空链表</span></span>
<span class="line"><span>    let mut list = List::new();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 追加一些元素</span></span>
<span class="line"><span>    list = list.prepend(1);</span></span>
<span class="line"><span>    list = list.prepend(2);</span></span>
<span class="line"><span>    list = list.prepend(3);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 显示链表的最后状态</span></span>
<span class="line"><span>    println!(&quot;linked list has length: {}&quot;, list.len());</span></span>
<span class="line"><span>    println!(&quot;{}&quot;, list.stringify());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,4)),a("p",null,[i(n,{to:"/std/box.html"},{default:e(()=>s[0]||(s[0]=[a("code",null,"Box",-1)])),_:1}),s[2]||(s[2]=l(" 和 ")),i(n,{to:"/fn/methods.html"},{default:e(()=>s[1]||(s[1]=[l("方法")])),_:1})])])}const o=p(r,[["render",m],["__file","testcase_linked_list.html.vue"]]),h=JSON.parse('{"path":"/custom_types/enum/testcase_linked_list.html","title":"测试实例：链表","lang":"zh-CN","frontmatter":{"description":"测试实例：链表 enum 的一个常见用法就是创建链表（linked-list）： 参见： 和","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/custom_types/enum/testcase_linked_list.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"测试实例：链表"}],["meta",{"property":"og:description","content":"测试实例：链表 enum 的一个常见用法就是创建链表（linked-list）： 参见： 和"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"测试实例：链表\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.38,"words":413},"filePathRelative":"custom_types/enum/testcase_linked_list.md","excerpt":"\\n<p><code>enum</code> 的一个常见用法就是创建链表（linked-list）：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use List::*;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>enum List {</span></span>\\n<span class=\\"line\\"><span>    // Cons：元组结构体，包含链表的一个元素和一个指向下一节点的指针</span></span>\\n<span class=\\"line\\"><span>    Cons(u32, Box&lt;List&gt;),</span></span>\\n<span class=\\"line\\"><span>    // Nil：末结点，表明链表结束</span></span>\\n<span class=\\"line\\"><span>    Nil,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 可以为 enum 定义方法</span></span>\\n<span class=\\"line\\"><span>impl List {</span></span>\\n<span class=\\"line\\"><span>    // 创建一个空的 List 实例</span></span>\\n<span class=\\"line\\"><span>    fn new() -&gt; List {</span></span>\\n<span class=\\"line\\"><span>        // `Nil` 为 `List` 类型（译注：因 `Nil` 的完整名称是 `List::Nil`）</span></span>\\n<span class=\\"line\\"><span>        Nil</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 处理一个 List，在其头部插入新元素，并返回该 List</span></span>\\n<span class=\\"line\\"><span>    fn prepend(self, elem: u32) -&gt; List {</span></span>\\n<span class=\\"line\\"><span>        // `Cons` 同样为 List 类型</span></span>\\n<span class=\\"line\\"><span>        Cons(elem, Box::new(self))</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 返回 List 的长度</span></span>\\n<span class=\\"line\\"><span>    fn len(&amp;self) -&gt; u32 {</span></span>\\n<span class=\\"line\\"><span>        // 必须对 `self` 进行匹配（match），因为这个方法的行为取决于 `self` 的</span></span>\\n<span class=\\"line\\"><span>        // 取值种类。</span></span>\\n<span class=\\"line\\"><span>        // `self` 为 `&amp;List` 类型，`*self` 为 `List` 类型，匹配一个具体的 `T`</span></span>\\n<span class=\\"line\\"><span>        // 类型要好过匹配引用 `&amp;T`。</span></span>\\n<span class=\\"line\\"><span>        match *self {</span></span>\\n<span class=\\"line\\"><span>            // 不能得到 tail 的所有权，因为 `self` 是借用的；</span></span>\\n<span class=\\"line\\"><span>            // 因此使用一个对 tail 的引用</span></span>\\n<span class=\\"line\\"><span>            Cons(_, ref tail) =&gt; 1 + tail.len(),</span></span>\\n<span class=\\"line\\"><span>            // （递归的）基准情形（base case）：一个长度为 0 的空列表</span></span>\\n<span class=\\"line\\"><span>            Nil =&gt; 0</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 返回列表的字符串表示（该字符串是堆分配的）</span></span>\\n<span class=\\"line\\"><span>    fn stringify(&amp;self) -&gt; String {</span></span>\\n<span class=\\"line\\"><span>        match *self {</span></span>\\n<span class=\\"line\\"><span>            Cons(head, ref tail) =&gt; {</span></span>\\n<span class=\\"line\\"><span>                // `format!` 和 `print!` 类似，但返回的是一个堆分配的字符串，</span></span>\\n<span class=\\"line\\"><span>                // 而不是打印结果到控制台上</span></span>\\n<span class=\\"line\\"><span>                format!(\\"{}, {}\\", head, tail.stringify())</span></span>\\n<span class=\\"line\\"><span>            },</span></span>\\n<span class=\\"line\\"><span>            Nil =&gt; {</span></span>\\n<span class=\\"line\\"><span>                format!(\\"Nil\\")</span></span>\\n<span class=\\"line\\"><span>            },</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 创建一个空链表</span></span>\\n<span class=\\"line\\"><span>    let mut list = List::new();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 追加一些元素</span></span>\\n<span class=\\"line\\"><span>    list = list.prepend(1);</span></span>\\n<span class=\\"line\\"><span>    list = list.prepend(2);</span></span>\\n<span class=\\"line\\"><span>    list = list.prepend(3);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 显示链表的最后状态</span></span>\\n<span class=\\"line\\"><span>    println!(\\"linked list has length: {}\\", list.len());</span></span>\\n<span class=\\"line\\"><span>    println!(\\"{}\\", list.stringify());</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"box","link":"std/box.html"},{"title":"methods","link":"fn/methods.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"custom_types/enum/testcase_linked_list.md","value":{"title":"testcase_linked_list","path":"custom_types/enum/testcase_linked_list.md","outlink":["std/box.md","fn/methods.md"],"backlink":["SUMMARY.md"]}},{"id":"std/box.md","value":{"title":"box","path":"std/box.md","outlink":[],"backlink":[]}},{"id":"fn/methods.md","value":{"title":"methods","path":"fn/methods.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"custom_types/enum/testcase_linked_list.md","target":"std/box.md"},{"source":"custom_types/enum/testcase_linked_list.md","target":"fn/methods.md"},{"source":"SUMMARY.md","target":"custom_types/enum/testcase_linked_list.md"}]}}}');export{o as comp,h as data};
