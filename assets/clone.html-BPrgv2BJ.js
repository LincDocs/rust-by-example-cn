import{_ as s,e as a,k as i,o as e}from"./app-CY03Lsxp.js";const l={};function p(c,n){return e(),a("div",null,n[0]||(n[0]=[i(`<h1 id="clone" tabindex="-1"><a class="header-anchor" href="#clone"><span>Clone</span></a></h1><p>当处理资源时，默认的行为是在赋值或函数调用的同时将它们转移。但是我们有时候也需要把资源复制一份。</p><p><a href="https://rustwiki.org/zh-CN/std/clone/trait.Clone.html" target="_blank" rel="noopener noreferrer"><code>Clone</code></a> trait 正好帮助我们完成这任务。通常，我们可以使用由 <code>Clone</code><br> trait 定义的 <code>.clone()</code> 方法。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 不含资源的单元结构体</span></span>
<span class="line"><span>#[derive(Debug, Clone, Copy)]</span></span>
<span class="line"><span>struct Nil;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 一个包含资源的结构体，它实现了 \`Clone\` trait</span></span>
<span class="line"><span>#[derive(Clone, Debug)]</span></span>
<span class="line"><span>struct Pair(Box&lt;i32&gt;, Box&lt;i32&gt;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 实例化 \`Nil\`</span></span>
<span class="line"><span>    let nil = Nil;</span></span>
<span class="line"><span>    // 复制 \`Nil\`，没有资源用于移动（move）</span></span>
<span class="line"><span>    let copied_nil = nil;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 两个 \`Nil\` 都可以独立使用</span></span>
<span class="line"><span>    println!(&quot;original: {:?}&quot;, nil);</span></span>
<span class="line"><span>    println!(&quot;copy: {:?}&quot;, copied_nil);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 实例化 \`Pair\`</span></span>
<span class="line"><span>    let pair = Pair(Box::new(1), Box::new(2));</span></span>
<span class="line"><span>    println!(&quot;original: {:?}&quot;, pair);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 将 \`pair\` 绑定到 \`moved_pair\`，移动（move）了资源</span></span>
<span class="line"><span>    let moved_pair = pair;</span></span>
<span class="line"><span>    println!(&quot;copy: {:?}&quot;, moved_pair);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！\`pair\` 已失去了它的资源。</span></span>
<span class="line"><span>    //println!(&quot;original: {:?}&quot;, pair);</span></span>
<span class="line"><span>    // 试一试 ^ 取消此行注释。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 将 \`moved_pair\`（包括其资源）克隆到 \`cloned_pair\`。</span></span>
<span class="line"><span>    let cloned_pair = moved_pair.clone();</span></span>
<span class="line"><span>    // 使用 std::mem::drop 来销毁原始的 pair。</span></span>
<span class="line"><span>    drop(moved_pair);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！\`moved_pair\` 已被销毁。</span></span>
<span class="line"><span>    //println!(&quot;copy: {:?}&quot;, moved_pair);</span></span>
<span class="line"><span>    // 试一试 ^ 将此行注释掉。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 由 .clone() 得来的结果仍然可用！</span></span>
<span class="line"><span>    println!(&quot;clone: {:?}&quot;, cloned_pair);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const r=s(l,[["render",p],["__file","clone.html.vue"]]),t=JSON.parse('{"path":"/trait/clone.html","title":"Clone","lang":"zh-CN","frontmatter":{"description":"Clone 当处理资源时，默认的行为是在赋值或函数调用的同时将它们转移。但是我们有时候也需要把资源复制一份。 Clone trait 正好帮助我们完成这任务。通常，我们可以使用由 Clone trait 定义的 .clone() 方法。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/trait/clone.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"Clone"}],["meta",{"property":"og:description","content":"Clone 当处理资源时，默认的行为是在赋值或函数调用的同时将它们转移。但是我们有时候也需要把资源复制一份。 Clone trait 正好帮助我们完成这任务。通常，我们可以使用由 Clone trait 定义的 .clone() 方法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Clone\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.99,"words":296},"filePathRelative":"trait/clone.md","excerpt":"\\n<p>当处理资源时，默认的行为是在赋值或函数调用的同时将它们转移。但是我们有时候也需要把资源复制一份。</p>\\n<p><a href=\\"https://rustwiki.org/zh-CN/std/clone/trait.Clone.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Clone</code></a> trait 正好帮助我们完成这任务。通常，我们可以使用由 <code>Clone</code><br>\\ntrait 定义的 <code>.clone()</code> 方法。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 不含资源的单元结构体</span></span>\\n<span class=\\"line\\"><span>#[derive(Debug, Clone, Copy)]</span></span>\\n<span class=\\"line\\"><span>struct Nil;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 一个包含资源的结构体，它实现了 `Clone` trait</span></span>\\n<span class=\\"line\\"><span>#[derive(Clone, Debug)]</span></span>\\n<span class=\\"line\\"><span>struct Pair(Box&lt;i32&gt;, Box&lt;i32&gt;);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 实例化 `Nil`</span></span>\\n<span class=\\"line\\"><span>    let nil = Nil;</span></span>\\n<span class=\\"line\\"><span>    // 复制 `Nil`，没有资源用于移动（move）</span></span>\\n<span class=\\"line\\"><span>    let copied_nil = nil;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 两个 `Nil` 都可以独立使用</span></span>\\n<span class=\\"line\\"><span>    println!(\\"original: {:?}\\", nil);</span></span>\\n<span class=\\"line\\"><span>    println!(\\"copy: {:?}\\", copied_nil);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 实例化 `Pair`</span></span>\\n<span class=\\"line\\"><span>    let pair = Pair(Box::new(1), Box::new(2));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"original: {:?}\\", pair);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 将 `pair` 绑定到 `moved_pair`，移动（move）了资源</span></span>\\n<span class=\\"line\\"><span>    let moved_pair = pair;</span></span>\\n<span class=\\"line\\"><span>    println!(\\"copy: {:?}\\", moved_pair);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 报错！`pair` 已失去了它的资源。</span></span>\\n<span class=\\"line\\"><span>    //println!(\\"original: {:?}\\", pair);</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 取消此行注释。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 将 `moved_pair`（包括其资源）克隆到 `cloned_pair`。</span></span>\\n<span class=\\"line\\"><span>    let cloned_pair = moved_pair.clone();</span></span>\\n<span class=\\"line\\"><span>    // 使用 std::mem::drop 来销毁原始的 pair。</span></span>\\n<span class=\\"line\\"><span>    drop(moved_pair);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 报错！`moved_pair` 已被销毁。</span></span>\\n<span class=\\"line\\"><span>    //println!(\\"copy: {:?}\\", moved_pair);</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 将此行注释掉。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 由 .clone() 得来的结果仍然可用！</span></span>\\n<span class=\\"line\\"><span>    println!(\\"clone: {:?}\\", cloned_pair);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"trait/clone.md","value":{"title":"clone","path":"trait/clone.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"trait/clone.md"}]}}}');export{r as comp,t as data};
