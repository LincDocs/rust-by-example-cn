import{_ as a,e as n,k as i,o as e}from"./app-CVSWwIkE.js";const l={};function t(p,s){return e(),n("div",null,s[0]||(s[0]=[i(`<h1 id="程序参数" tabindex="-1"><a class="header-anchor" href="#程序参数"><span>程序参数</span></a></h1><h2 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库"><span>标准库</span></a></h2><p>命令行参数可使用 <code>std::env::args</code> 进行接收，这将返回一个迭代器，该迭代器会对每个参数举出一个字符串。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::env;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let args: Vec&lt;String&gt; = env::args().collect();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 第一个参数是调用本程序的路径</span></span>
<span class="line"><span>    println!(&quot;My path is {}.&quot;, args[0]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 其余的参数是被传递给程序的命令行参数。</span></span>
<span class="line"><span>    // 请这样调用程序：</span></span>
<span class="line"><span>    //   $ ./args arg1 arg2</span></span>
<span class="line"><span>    println!(&quot;I got {:?} arguments: {:?}.&quot;, args.len() - 1, &amp;args[1..]);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./args</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">My</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./args.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> got</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arguments:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;3&quot;].</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crate" tabindex="-1"><a class="header-anchor" href="#crate"><span>crate</span></a></h2><p>另外，也有很多 crate 提供了编写命令行应用的额外功能。<a href="https://rust-lang-nursery.github.io/rust-cookbook/app.html#ex-clap-basic" target="_blank" rel="noopener noreferrer">Rust Cookbook</a> 展示了使用最流行的命令行参数 crate，即 <code>clap</code> 的最佳实践。</p>`,7)]))}const d=a(l,[["render",t],["__file","arg.html.vue"]]),c=JSON.parse('{"path":"/std_misc/arg.html","title":"程序参数","lang":"zh-CN","frontmatter":{"description":"程序参数 标准库 命令行参数可使用 std::env::args 进行接收，这将返回一个迭代器，该迭代器会对每个参数举出一个字符串。 crate 另外，也有很多 crate 提供了编写命令行应用的额外功能。Rust Cookbook 展示了使用最流行的命令行参数 crate，即 clap 的最佳实践。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std_misc/arg.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"程序参数"}],["meta",{"property":"og:description","content":"程序参数 标准库 命令行参数可使用 std::env::args 进行接收，这将返回一个迭代器，该迭代器会对每个参数举出一个字符串。 crate 另外，也有很多 crate 提供了编写命令行应用的额外功能。Rust Cookbook 展示了使用最流行的命令行参数 crate，即 clap 的最佳实践。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"程序参数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.66,"words":198},"filePathRelative":"std_misc/arg.md","excerpt":"\\n<h2>标准库</h2>\\n<p>命令行参数可使用 <code>std::env::args</code> 进行接收，这将返回一个迭代器，该迭代器会对每个参数举出一个字符串。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::env;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let args: Vec&lt;String&gt; = env::args().collect();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 第一个参数是调用本程序的路径</span></span>\\n<span class=\\"line\\"><span>    println!(\\"My path is {}.\\", args[0]);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 其余的参数是被传递给程序的命令行参数。</span></span>\\n<span class=\\"line\\"><span>    // 请这样调用程序：</span></span>\\n<span class=\\"line\\"><span>    //   $ ./args arg1 arg2</span></span>\\n<span class=\\"line\\"><span>    println!(\\"I got {:?} arguments: {:?}.\\", args.len() - 1, &amp;args[1..]);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std_misc/arg.md","value":{"title":"arg","path":"std_misc/arg.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std_misc/arg.md"}]}}}');export{d as comp,c as data};
