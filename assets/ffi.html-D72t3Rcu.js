import{_ as n,e as a,k as i,o as e}from"./app-CY03Lsxp.js";const l={};function p(c,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="外部语言函数接口" tabindex="-1"><a class="header-anchor" href="#外部语言函数接口"><span>外部语言函数接口</span></a></h1><p>Rust 提供了到 C 语言库的外部语言函数接口（Foreign Function Interface，FFI）。外部语言函数必须在一个 <code>extern</code> 代码块中声明，且该代码块要带有一个包含库名称的 <code>#[link]</code> 属性。</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::fmt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 这个 extern 代码块链接到 libm 库</span></span>
<span class="line"><span>#[link(name = &quot;m&quot;)]</span></span>
<span class="line"><span>extern {</span></span>
<span class="line"><span>    // 这个外部函数用于计算单精度复数的平方根</span></span>
<span class="line"><span>    fn csqrtf(z: Complex) -&gt; Complex;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 这个用来计算单精度复数的复变余弦</span></span>
<span class="line"><span>    fn ccosf(z: Complex) -&gt; Complex;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 由于调用其他语言的函数被认为是不安全的，我们通常会给它们写一层安全的封装</span></span>
<span class="line"><span>fn cos(z: Complex) -&gt; Complex {</span></span>
<span class="line"><span>    unsafe { ccosf(z) }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // z = -1 + 0i</span></span>
<span class="line"><span>    let z = Complex { re: -1., im: 0. };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 调用外部语言函数是不安全操作</span></span>
<span class="line"><span>    let z_sqrt = unsafe { csqrtf(z) };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;the square root of {:?} is {:?}&quot;, z, z_sqrt);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 调用不安全操作的安全的 API 封装</span></span>
<span class="line"><span>    println!(&quot;cos({:?}) = {:?}&quot;, z, cos(z));</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 单精度复数的最简实现</span></span>
<span class="line"><span>#[repr(C)]</span></span>
<span class="line"><span>#[derive(Clone, Copy)]</span></span>
<span class="line"><span>struct Complex {</span></span>
<span class="line"><span>    re: f32,</span></span>
<span class="line"><span>    im: f32,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl fmt::Debug for Complex {</span></span>
<span class="line"><span>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {</span></span>
<span class="line"><span>        if self.im &lt; 0. {</span></span>
<span class="line"><span>            write!(f, &quot;{}-{}i&quot;, self.re, -self.im)</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            write!(f, &quot;{}+{}i&quot;, self.re, self.im)</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const r=n(l,[["render",p],["__file","ffi.html.vue"]]),t=JSON.parse('{"path":"/std_misc/ffi.html","title":"外部语言函数接口","lang":"zh-CN","frontmatter":{"description":"外部语言函数接口 Rust 提供了到 C 语言库的外部语言函数接口（Foreign Function Interface，FFI）。外部语言函数必须在一个 extern 代码块中声明，且该代码块要带有一个包含库名称的 #[link] 属性。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/std_misc/ffi.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"外部语言函数接口"}],["meta",{"property":"og:description","content":"外部语言函数接口 Rust 提供了到 C 语言库的外部语言函数接口（Foreign Function Interface，FFI）。外部语言函数必须在一个 extern 代码块中声明，且该代码块要带有一个包含库名称的 #[link] 属性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"外部语言函数接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.97,"words":290},"filePathRelative":"std_misc/ffi.md","excerpt":"\\n<p>Rust 提供了到 C 语言库的外部语言函数接口（Foreign Function Interface，FFI）。外部语言函数必须在一个 <code>extern</code> 代码块中声明，且该代码块要带有一个包含库名称的 <code>#[link]</code> 属性。</p>\\n<div class=\\"language-rust,ignore line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,ignore\\" data-title=\\"rust,ignore\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::fmt;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 这个 extern 代码块链接到 libm 库</span></span>\\n<span class=\\"line\\"><span>#[link(name = \\"m\\")]</span></span>\\n<span class=\\"line\\"><span>extern {</span></span>\\n<span class=\\"line\\"><span>    // 这个外部函数用于计算单精度复数的平方根</span></span>\\n<span class=\\"line\\"><span>    fn csqrtf(z: Complex) -&gt; Complex;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 这个用来计算单精度复数的复变余弦</span></span>\\n<span class=\\"line\\"><span>    fn ccosf(z: Complex) -&gt; Complex;</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 由于调用其他语言的函数被认为是不安全的，我们通常会给它们写一层安全的封装</span></span>\\n<span class=\\"line\\"><span>fn cos(z: Complex) -&gt; Complex {</span></span>\\n<span class=\\"line\\"><span>    unsafe { ccosf(z) }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // z = -1 + 0i</span></span>\\n<span class=\\"line\\"><span>    let z = Complex { re: -1., im: 0. };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 调用外部语言函数是不安全操作</span></span>\\n<span class=\\"line\\"><span>    let z_sqrt = unsafe { csqrtf(z) };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"the square root of {:?} is {:?}\\", z, z_sqrt);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 调用不安全操作的安全的 API 封装</span></span>\\n<span class=\\"line\\"><span>    println!(\\"cos({:?}) = {:?}\\", z, cos(z));</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 单精度复数的最简实现</span></span>\\n<span class=\\"line\\"><span>#[repr(C)]</span></span>\\n<span class=\\"line\\"><span>#[derive(Clone, Copy)]</span></span>\\n<span class=\\"line\\"><span>struct Complex {</span></span>\\n<span class=\\"line\\"><span>    re: f32,</span></span>\\n<span class=\\"line\\"><span>    im: f32,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl fmt::Debug for Complex {</span></span>\\n<span class=\\"line\\"><span>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {</span></span>\\n<span class=\\"line\\"><span>        if self.im &lt; 0. {</span></span>\\n<span class=\\"line\\"><span>            write!(f, \\"{}-{}i\\", self.re, -self.im)</span></span>\\n<span class=\\"line\\"><span>        } else {</span></span>\\n<span class=\\"line\\"><span>            write!(f, \\"{}+{}i\\", self.re, self.im)</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std_misc/ffi.md","value":{"title":"ffi","path":"std_misc/ffi.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std_misc/ffi.md"}]}}}');export{r as comp,t as data};
