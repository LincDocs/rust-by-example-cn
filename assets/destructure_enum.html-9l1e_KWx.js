import{_ as p,e as t,k as r,f as s,g as e,i as l,h as i,r as u,o as d}from"./app-CY03Lsxp.js";const c={};function o(m,n){const a=u("RouteLink");return d(),t("div",null,[n[5]||(n[5]=r(`<h1 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h1><p>和前面相似，解构 <code>enum</code> 的方式如下：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 需要 \`allow\` 来消除警告，因为只使用了枚举类型的一种取值。</span></span>
<span class="line"><span>#[allow(dead_code)]</span></span>
<span class="line"><span>enum Color {</span></span>
<span class="line"><span>    // 这三个取值仅由它们的名字（而非类型）来指定。</span></span>
<span class="line"><span>    Red,</span></span>
<span class="line"><span>    Blue,</span></span>
<span class="line"><span>    Green,</span></span>
<span class="line"><span>    // 这些则把 \`u32\` 元组赋予不同的名字，以色彩模型命名。</span></span>
<span class="line"><span>    RGB(u32, u32, u32),</span></span>
<span class="line"><span>    HSV(u32, u32, u32),</span></span>
<span class="line"><span>    HSL(u32, u32, u32),</span></span>
<span class="line"><span>    CMY(u32, u32, u32),</span></span>
<span class="line"><span>    CMYK(u32, u32, u32, u32),</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let color = Color::RGB(122, 17, 40);</span></span>
<span class="line"><span>    // 试一试 ^ 将不同的值赋给 \`color\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;What color is it?&quot;);</span></span>
<span class="line"><span>    // 可以使用 \`match\` 来解构 \`enum\`。</span></span>
<span class="line"><span>    match color {</span></span>
<span class="line"><span>        Color::Red   =&gt; println!(&quot;The color is Red!&quot;),</span></span>
<span class="line"><span>        Color::Blue  =&gt; println!(&quot;The color is Blue!&quot;),</span></span>
<span class="line"><span>        Color::Green =&gt; println!(&quot;The color is Green!&quot;),</span></span>
<span class="line"><span>        Color::RGB(r, g, b) =&gt;</span></span>
<span class="line"><span>            println!(&quot;Red: {}, green: {}, and blue: {}!&quot;, r, g, b),</span></span>
<span class="line"><span>        Color::HSV(h, s, v) =&gt;</span></span>
<span class="line"><span>            println!(&quot;Hue: {}, saturation: {}, value: {}!&quot;, h, s, v),</span></span>
<span class="line"><span>        Color::HSL(h, s, l) =&gt;</span></span>
<span class="line"><span>            println!(&quot;Hue: {}, saturation: {}, lightness: {}!&quot;, h, s, l),</span></span>
<span class="line"><span>        Color::CMY(c, m, y) =&gt;</span></span>
<span class="line"><span>            println!(&quot;Cyan: {}, magenta: {}, yellow: {}!&quot;, c, m, y),</span></span>
<span class="line"><span>        Color::CMYK(c, m, y, k) =&gt;</span></span>
<span class="line"><span>            println!(&quot;Cyan: {}, magenta: {}, yellow: {}, key (black): {}!&quot;,</span></span>
<span class="line"><span>                c, m, y, k),</span></span>
<span class="line"><span>        // 不需要其它分支，因为所有的情形都已覆盖</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,4)),s("p",null,[e(a,{to:"/attribute/unused.html"},{default:i(()=>n[0]||(n[0]=[s("code",null,"#[allow(...)]",-1)])),_:1}),n[2]||(n[2]=l(", ")),n[3]||(n[3]=s("a",{href:"https://en.wikipedia.org/wiki/Color_model",target:"_blank",rel:"noopener noreferrer"},"色彩模型",-1)),n[4]||(n[4]=l(" 和 ")),e(a,{to:"/custom_types/enum.html"},{default:i(()=>n[1]||(n[1]=[s("code",null,"enum",-1)])),_:1})])])}const b=p(c,[["render",o],["__file","destructure_enum.html.vue"]]),h=JSON.parse('{"path":"/flow_control/match/destructuring/destructure_enum.html","title":"枚举","lang":"zh-CN","frontmatter":{"description":"枚举 和前面相似，解构 enum 的方式如下： 参见： , 色彩模型 和","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/flow_control/match/destructuring/destructure_enum.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"枚举"}],["meta",{"property":"og:description","content":"枚举 和前面相似，解构 enum 的方式如下： 参见： , 色彩模型 和"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"枚举\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.91,"words":274},"filePathRelative":"flow_control/match/destructuring/destructure_enum.md","excerpt":"\\n<p>和前面相似，解构 <code>enum</code> 的方式如下：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 需要 `allow` 来消除警告，因为只使用了枚举类型的一种取值。</span></span>\\n<span class=\\"line\\"><span>#[allow(dead_code)]</span></span>\\n<span class=\\"line\\"><span>enum Color {</span></span>\\n<span class=\\"line\\"><span>    // 这三个取值仅由它们的名字（而非类型）来指定。</span></span>\\n<span class=\\"line\\"><span>    Red,</span></span>\\n<span class=\\"line\\"><span>    Blue,</span></span>\\n<span class=\\"line\\"><span>    Green,</span></span>\\n<span class=\\"line\\"><span>    // 这些则把 `u32` 元组赋予不同的名字，以色彩模型命名。</span></span>\\n<span class=\\"line\\"><span>    RGB(u32, u32, u32),</span></span>\\n<span class=\\"line\\"><span>    HSV(u32, u32, u32),</span></span>\\n<span class=\\"line\\"><span>    HSL(u32, u32, u32),</span></span>\\n<span class=\\"line\\"><span>    CMY(u32, u32, u32),</span></span>\\n<span class=\\"line\\"><span>    CMYK(u32, u32, u32, u32),</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let color = Color::RGB(122, 17, 40);</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 将不同的值赋给 `color`</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"What color is it?\\");</span></span>\\n<span class=\\"line\\"><span>    // 可以使用 `match` 来解构 `enum`。</span></span>\\n<span class=\\"line\\"><span>    match color {</span></span>\\n<span class=\\"line\\"><span>        Color::Red   =&gt; println!(\\"The color is Red!\\"),</span></span>\\n<span class=\\"line\\"><span>        Color::Blue  =&gt; println!(\\"The color is Blue!\\"),</span></span>\\n<span class=\\"line\\"><span>        Color::Green =&gt; println!(\\"The color is Green!\\"),</span></span>\\n<span class=\\"line\\"><span>        Color::RGB(r, g, b) =&gt;</span></span>\\n<span class=\\"line\\"><span>            println!(\\"Red: {}, green: {}, and blue: {}!\\", r, g, b),</span></span>\\n<span class=\\"line\\"><span>        Color::HSV(h, s, v) =&gt;</span></span>\\n<span class=\\"line\\"><span>            println!(\\"Hue: {}, saturation: {}, value: {}!\\", h, s, v),</span></span>\\n<span class=\\"line\\"><span>        Color::HSL(h, s, l) =&gt;</span></span>\\n<span class=\\"line\\"><span>            println!(\\"Hue: {}, saturation: {}, lightness: {}!\\", h, s, l),</span></span>\\n<span class=\\"line\\"><span>        Color::CMY(c, m, y) =&gt;</span></span>\\n<span class=\\"line\\"><span>            println!(\\"Cyan: {}, magenta: {}, yellow: {}!\\", c, m, y),</span></span>\\n<span class=\\"line\\"><span>        Color::CMYK(c, m, y, k) =&gt;</span></span>\\n<span class=\\"line\\"><span>            println!(\\"Cyan: {}, magenta: {}, yellow: {}, key (black): {}!\\",</span></span>\\n<span class=\\"line\\"><span>                c, m, y, k),</span></span>\\n<span class=\\"line\\"><span>        // 不需要其它分支，因为所有的情形都已覆盖</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"unused","link":"attribute/unused.html"},{"title":"enum","link":"custom_types/enum.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"flow_control/match/destructuring/destructure_enum.md","value":{"title":"destructure_enum","path":"flow_control/match/destructuring/destructure_enum.md","outlink":["attribute/unused.md","custom_types/enum.md"],"backlink":["SUMMARY.md"]}},{"id":"attribute/unused.md","value":{"title":"unused","path":"attribute/unused.md","outlink":[],"backlink":[]}},{"id":"custom_types/enum.md","value":{"title":"enum","path":"custom_types/enum.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"flow_control/match/destructuring/destructure_enum.md","target":"attribute/unused.md"},{"source":"flow_control/match/destructuring/destructure_enum.md","target":"custom_types/enum.md"},{"source":"SUMMARY.md","target":"flow_control/match/destructuring/destructure_enum.md"}]}}}');export{b as comp,h as data};
