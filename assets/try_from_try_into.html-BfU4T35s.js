import{_ as t,e as i,f as e,k as r,i as s,g as l,h as o,r as p,o as d}from"./app-CVSWwIkE.js";const c={};function m(u,n){const a=p("RouteLink");return d(),i("div",null,[n[3]||(n[3]=e("h1",{id:"tryfrom-and-tryinto",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tryfrom-and-tryinto"},[e("span",null,[e("code",null,"TryFrom"),s(" and "),e("code",null,"TryInto")])])],-1)),e("p",null,[n[1]||(n[1]=s("类似于 ")),l(a,{to:"/conversion/from_into.html"},{default:o(()=>n[0]||(n[0]=[e("code",null,"From",-1),s(" 和 "),e("code",null,"Into",-1)])),_:1}),n[2]||(n[2]=r('，<a href="https://rustwiki.org/zh-CN/std/convert/trait.TryFrom.html" target="_blank" rel="noopener noreferrer"><code>TryFrom</code></a> 和 <a href="https://rustwiki.org/zh-CN/std/convert/trait.TryInto.html" target="_blank" rel="noopener noreferrer"><code>TryInto</code></a> 是类型转换的通用 trait。不同于 <code>From</code>/<code>Into</code> 的是，<code>TryFrom</code> 和 <code>TryInto</code> trait 用于易出错的转换，也正因如此，其返回值是 <a href="https://rustwiki.org/zh-CN/std/result/enum.Result.html" target="_blank" rel="noopener noreferrer"><code>Result</code></a> 型。',15))]),n[4]||(n[4]=r(`<div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::convert::TryFrom;</span></span>
<span class="line"><span>use std::convert::TryInto;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#[derive(Debug, PartialEq)]</span></span>
<span class="line"><span>struct EvenNumber(i32);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl TryFrom&lt;i32&gt; for EvenNumber {</span></span>
<span class="line"><span>    type Error = ();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fn try_from(value: i32) -&gt; Result&lt;Self, Self::Error&gt; {</span></span>
<span class="line"><span>        if value % 2 == 0 {</span></span>
<span class="line"><span>            Ok(EvenNumber(value))</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            Err(())</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // TryFrom</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    assert_eq!(EvenNumber::try_from(8), Ok(EvenNumber(8)));</span></span>
<span class="line"><span>    assert_eq!(EvenNumber::try_from(5), Err(()));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // TryInto</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let result: Result&lt;EvenNumber, ()&gt; = 8i32.try_into();</span></span>
<span class="line"><span>    assert_eq!(result, Ok(EvenNumber(8)));</span></span>
<span class="line"><span>    let result: Result&lt;EvenNumber, ()&gt; = 5i32.try_into();</span></span>
<span class="line"><span>    assert_eq!(result, Err(()));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const y=t(c,[["render",m],["__file","try_from_try_into.html.vue"]]),b=JSON.parse('{"path":"/conversion/try_from_try_into.html","title":"TryFrom and TryInto","lang":"zh-CN","frontmatter":{"description":"TryFrom and TryInto 类似于 ，TryFrom 和 TryInto 是类型转换的通用 trait。不同于 From/Into 的是，TryFrom 和 TryInto trait 用于易出错的转换，也正因如此，其返回值是 Result 型。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/conversion/try_from_try_into.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"TryFrom and TryInto"}],["meta",{"property":"og:description","content":"TryFrom and TryInto 类似于 ，TryFrom 和 TryInto 是类型转换的通用 trait。不同于 From/Into 的是，TryFrom 和 TryInto trait 用于易出错的转换，也正因如此，其返回值是 Result 型。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TryFrom and TryInto\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.49,"words":146},"filePathRelative":"conversion/try_from_try_into.md","excerpt":"\\n<p>类似于 <a href=\\"/rust-by-example-cn-/conversion/from_into.html\\" target=\\"_blank\\"><code>From</code> 和 <code>Into</code></a>，<a href=\\"https://rustwiki.org/zh-CN/std/convert/trait.TryFrom.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>TryFrom</code></a> 和 <a href=\\"https://rustwiki.org/zh-CN/std/convert/trait.TryInto.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>TryInto</code></a> 是类型转换的通用 trait。不同于 <code>From</code>/<code>Into</code> 的是，<code>TryFrom</code> 和 <code>TryInto</code> trait 用于易出错的转换，也正因如此，其返回值是 <a href=\\"https://rustwiki.org/zh-CN/std/result/enum.Result.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Result</code></a> 型。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"conversion/try_from_try_into.md","value":{"title":"try_from_try_into","path":"conversion/try_from_try_into.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"conversion/try_from_try_into.md"}]}}}');export{y as comp,b as data};
