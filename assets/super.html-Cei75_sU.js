import{_ as s,e as a,k as i,o as l}from"./app-CY03Lsxp.js";const e={};function p(c,n){return l(),a("div",null,n[0]||(n[0]=[i(`<h1 id="super-和-self" tabindex="-1"><a class="header-anchor" href="#super-和-self"><span><code>super</code> 和 <code>self</code></span></a></h1><p>可以在路径中使用 <code>super</code> （父级）和 <code>self</code>（自身）关键字，从而在访问项时消除歧义，以及防止不必要的路径硬编码。</p><div class="language-rust,editalbe line-numbers-mode" data-highlighter="shiki" data-ext="rust,editalbe" data-title="rust,editalbe" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn function() {</span></span>
<span class="line"><span>    println!(&quot;called \`function()\`&quot;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mod cool {</span></span>
<span class="line"><span>    pub fn function() {</span></span>
<span class="line"><span>        println!(&quot;called \`cool::function()\`&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mod my {</span></span>
<span class="line"><span>    fn function() {</span></span>
<span class="line"><span>        println!(&quot;called \`my::function()\`&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    mod cool {</span></span>
<span class="line"><span>        pub fn function() {</span></span>
<span class="line"><span>            println!(&quot;called \`my::cool::function()\`&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    pub fn indirect_call() {</span></span>
<span class="line"><span>        // 让我们从这个作用域中访问所有名为 \`function\` 的函数！</span></span>
<span class="line"><span>        print!(&quot;called \`my::indirect_call()\`, that\\n&gt; &quot;);</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        // \`self\` 关键字表示当前的模块作用域——在这个例子是 \`my\`。</span></span>
<span class="line"><span>        // 调用 \`self::function()\` 和直接调用 \`function()\` 都得到相同的结果，</span></span>
<span class="line"><span>        // 因为他们表示相同的函数。</span></span>
<span class="line"><span>        self::function();</span></span>
<span class="line"><span>        function();</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        // 我们也可以使用 \`self\` 来访问 \`my\` 内部的另一个模块：</span></span>
<span class="line"><span>        self::cool::function();</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        // \`super\` 关键字表示父作用域（在 \`my\` 模块外面）。</span></span>
<span class="line"><span>        super::function();</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        // 这将在 *crate* 作用域内绑定 \`cool::function\` 。</span></span>
<span class="line"><span>        // 在这个例子中，crate 作用域是最外面的作用域。</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            use crate::cool::function as root_function;</span></span>
<span class="line"><span>            root_function();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    my::indirect_call();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const r=s(e,[["render",p],["__file","super.html.vue"]]),t=JSON.parse('{"path":"/mod/super.html","title":"super 和 self","lang":"zh-CN","frontmatter":{"description":"super 和 self 可以在路径中使用 super （父级）和 self（自身）关键字，从而在访问项时消除歧义，以及防止不必要的路径硬编码。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/mod/super.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"super 和 self"}],["meta",{"property":"og:description","content":"super 和 self 可以在路径中使用 super （父级）和 self（自身）关键字，从而在访问项时消除歧义，以及防止不必要的路径硬编码。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"super 和 self\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.84,"words":251},"filePathRelative":"mod/super.md","excerpt":"\\n<p>可以在路径中使用 <code>super</code> （父级）和 <code>self</code>（自身）关键字，从而在访问项时消除歧义，以及防止不必要的路径硬编码。</p>\\n<div class=\\"language-rust,editalbe line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editalbe\\" data-title=\\"rust,editalbe\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn function() {</span></span>\\n<span class=\\"line\\"><span>    println!(\\"called `function()`\\");</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>mod cool {</span></span>\\n<span class=\\"line\\"><span>    pub fn function() {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"called `cool::function()`\\");</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>mod my {</span></span>\\n<span class=\\"line\\"><span>    fn function() {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"called `my::function()`\\");</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>    </span></span>\\n<span class=\\"line\\"><span>    mod cool {</span></span>\\n<span class=\\"line\\"><span>        pub fn function() {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"called `my::cool::function()`\\");</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>    </span></span>\\n<span class=\\"line\\"><span>    pub fn indirect_call() {</span></span>\\n<span class=\\"line\\"><span>        // 让我们从这个作用域中访问所有名为 `function` 的函数！</span></span>\\n<span class=\\"line\\"><span>        print!(\\"called `my::indirect_call()`, that\\\\n&gt; \\");</span></span>\\n<span class=\\"line\\"><span>        </span></span>\\n<span class=\\"line\\"><span>        // `self` 关键字表示当前的模块作用域——在这个例子是 `my`。</span></span>\\n<span class=\\"line\\"><span>        // 调用 `self::function()` 和直接调用 `function()` 都得到相同的结果，</span></span>\\n<span class=\\"line\\"><span>        // 因为他们表示相同的函数。</span></span>\\n<span class=\\"line\\"><span>        self::function();</span></span>\\n<span class=\\"line\\"><span>        function();</span></span>\\n<span class=\\"line\\"><span>        </span></span>\\n<span class=\\"line\\"><span>        // 我们也可以使用 `self` 来访问 `my` 内部的另一个模块：</span></span>\\n<span class=\\"line\\"><span>        self::cool::function();</span></span>\\n<span class=\\"line\\"><span>        </span></span>\\n<span class=\\"line\\"><span>        // `super` 关键字表示父作用域（在 `my` 模块外面）。</span></span>\\n<span class=\\"line\\"><span>        super::function();</span></span>\\n<span class=\\"line\\"><span>        </span></span>\\n<span class=\\"line\\"><span>        // 这将在 *crate* 作用域内绑定 `cool::function` 。</span></span>\\n<span class=\\"line\\"><span>        // 在这个例子中，crate 作用域是最外面的作用域。</span></span>\\n<span class=\\"line\\"><span>        {</span></span>\\n<span class=\\"line\\"><span>            use crate::cool::function as root_function;</span></span>\\n<span class=\\"line\\"><span>            root_function();</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    my::indirect_call();</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"mod/super.md","value":{"title":"super","path":"mod/super.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"mod/super.md"}]}}}');export{r as comp,t as data};
