import{_ as s,e as a,k as i,o as e}from"./app-CVSWwIkE.js";const l={};function p(c,n){return e(),a("div",null,n[0]||(n[0]=[i(`<h1 id="箱子、栈和堆" tabindex="-1"><a class="header-anchor" href="#箱子、栈和堆"><span>箱子、栈和堆</span></a></h1><p>在 Rust 中，所有值默认都是栈分配的。通过创建 <code>Box&lt;T&gt;</code>，可以把值<strong>装箱</strong>（boxed）来使它在堆上分配。箱子（box，即 <code>Box&lt;T&gt;</code> 类型的实例）是一个智能指针，指向堆分配的 <code>T</code> 类型的值。当箱子离开作用域时，它的析构函数会被调用，内部的对象会被销毁，堆上分配的内存也会被释放。</p><p>被装箱的值可以使用 <code>*</code> 运算符进行解引用；这会移除掉一层装箱。</p><div class="language-rust,editalbe line-numbers-mode" data-highlighter="shiki" data-ext="rust,editalbe" data-title="rust,editalbe" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::mem;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#[allow(dead_code)]</span></span>
<span class="line"><span>#[derive(Debug, Clone, Copy)]</span></span>
<span class="line"><span>struct Point {</span></span>
<span class="line"><span>    x: f64,</span></span>
<span class="line"><span>    y: f64,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#[allow(dead_code)]</span></span>
<span class="line"><span>struct Rectangle {</span></span>
<span class="line"><span>    p1: Point,</span></span>
<span class="line"><span>    p2: Point,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn origin() -&gt; Point {</span></span>
<span class="line"><span>    Point { x: 0.0, y: 0.0 }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn boxed_origin() -&gt; Box&lt;Point&gt; {</span></span>
<span class="line"><span>    // 在堆上分配这个点（point），并返回一个指向它的指针</span></span>
<span class="line"><span>    Box::new(Point { x: 0.0, y: 0.0 })</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // （所有的类型标注都不是必需的）</span></span>
<span class="line"><span>    // 栈分配的变量</span></span>
<span class="line"><span>    let point: Point = origin();</span></span>
<span class="line"><span>    let rectangle: Rectangle = Rectangle {</span></span>
<span class="line"><span>        p1: origin(),</span></span>
<span class="line"><span>        p2: Point { x: 3.0, y: 4.0 }</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 堆分配的 rectangle（矩形）</span></span>
<span class="line"><span>    let boxed_rectangle: Box&lt;Rectangle&gt; = Box::new(Rectangle {</span></span>
<span class="line"><span>        p1: origin(),</span></span>
<span class="line"><span>        p2: origin()</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 函数的输出可以装箱</span></span>
<span class="line"><span>    let boxed_point: Box&lt;Point&gt; = Box::new(origin());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 两层装箱</span></span>
<span class="line"><span>    let box_in_a_box: Box&lt;Box&lt;Point&gt;&gt; = Box::new(boxed_origin());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;Point occupies {} bytes in the stack&quot;,</span></span>
<span class="line"><span>             mem::size_of_val(&amp;point));</span></span>
<span class="line"><span>    println!(&quot;Rectangle occupies {} bytes in the stack&quot;,</span></span>
<span class="line"><span>             mem::size_of_val(&amp;rectangle));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // box 的宽度就是指针宽度</span></span>
<span class="line"><span>    println!(&quot;Boxed point occupies {} bytes in the stack&quot;,</span></span>
<span class="line"><span>             mem::size_of_val(&amp;boxed_point));</span></span>
<span class="line"><span>    println!(&quot;Boxed rectangle occupies {} bytes in the stack&quot;,</span></span>
<span class="line"><span>             mem::size_of_val(&amp;boxed_rectangle));</span></span>
<span class="line"><span>    println!(&quot;Boxed box occupies {} bytes in the stack&quot;,</span></span>
<span class="line"><span>             mem::size_of_val(&amp;box_in_a_box));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 将包含在 \`boxed_point\` 中的数据复制到 \`unboxed_point\`</span></span>
<span class="line"><span>    let unboxed_point: Point = *boxed_point;</span></span>
<span class="line"><span>    println!(&quot;Unboxed point occupies {} bytes in the stack&quot;,</span></span>
<span class="line"><span>             mem::size_of_val(&amp;unboxed_point));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const t=s(l,[["render",p],["__file","box.html.vue"]]),o=JSON.parse('{"path":"/std/box.html","title":"箱子、栈和堆","lang":"zh-CN","frontmatter":{"description":"箱子、栈和堆 在 Rust 中，所有值默认都是栈分配的。通过创建 Box<T>，可以把值装箱（boxed）来使它在堆上分配。箱子（box，即 Box<T> 类型的实例）是一个智能指针，指向堆分配的 T 类型的值。当箱子离开作用域时，它的析构函数会被调用，内部的对象会被销毁，堆上分配的内存也会被释放。 被装箱的值可以使用 * 运算符进行解引用；这会移除掉...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std/box.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"箱子、栈和堆"}],["meta",{"property":"og:description","content":"箱子、栈和堆 在 Rust 中，所有值默认都是栈分配的。通过创建 Box<T>，可以把值装箱（boxed）来使它在堆上分配。箱子（box，即 Box<T> 类型的实例）是一个智能指针，指向堆分配的 T 类型的值。当箱子离开作用域时，它的析构函数会被调用，内部的对象会被销毁，堆上分配的内存也会被释放。 被装箱的值可以使用 * 运算符进行解引用；这会移除掉..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"箱子、栈和堆\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.27,"words":381},"filePathRelative":"std/box.md","excerpt":"\\n<p>在 Rust 中，所有值默认都是栈分配的。通过创建 <code>Box&lt;T&gt;</code>，可以把值<strong>装箱</strong>（boxed）来使它在堆上分配。箱子（box，即 <code>Box&lt;T&gt;</code> 类型的实例）是一个智能指针，指向堆分配的 <code>T</code> 类型的值。当箱子离开作用域时，它的析构函数会被调用，内部的对象会被销毁，堆上分配的内存也会被释放。</p>\\n<p>被装箱的值可以使用 <code>*</code> 运算符进行解引用；这会移除掉一层装箱。</p>\\n<div class=\\"language-rust,editalbe line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editalbe\\" data-title=\\"rust,editalbe\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::mem;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>#[allow(dead_code)]</span></span>\\n<span class=\\"line\\"><span>#[derive(Debug, Clone, Copy)]</span></span>\\n<span class=\\"line\\"><span>struct Point {</span></span>\\n<span class=\\"line\\"><span>    x: f64,</span></span>\\n<span class=\\"line\\"><span>    y: f64,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>#[allow(dead_code)]</span></span>\\n<span class=\\"line\\"><span>struct Rectangle {</span></span>\\n<span class=\\"line\\"><span>    p1: Point,</span></span>\\n<span class=\\"line\\"><span>    p2: Point,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn origin() -&gt; Point {</span></span>\\n<span class=\\"line\\"><span>    Point { x: 0.0, y: 0.0 }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn boxed_origin() -&gt; Box&lt;Point&gt; {</span></span>\\n<span class=\\"line\\"><span>    // 在堆上分配这个点（point），并返回一个指向它的指针</span></span>\\n<span class=\\"line\\"><span>    Box::new(Point { x: 0.0, y: 0.0 })</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // （所有的类型标注都不是必需的）</span></span>\\n<span class=\\"line\\"><span>    // 栈分配的变量</span></span>\\n<span class=\\"line\\"><span>    let point: Point = origin();</span></span>\\n<span class=\\"line\\"><span>    let rectangle: Rectangle = Rectangle {</span></span>\\n<span class=\\"line\\"><span>        p1: origin(),</span></span>\\n<span class=\\"line\\"><span>        p2: Point { x: 3.0, y: 4.0 }</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 堆分配的 rectangle（矩形）</span></span>\\n<span class=\\"line\\"><span>    let boxed_rectangle: Box&lt;Rectangle&gt; = Box::new(Rectangle {</span></span>\\n<span class=\\"line\\"><span>        p1: origin(),</span></span>\\n<span class=\\"line\\"><span>        p2: origin()</span></span>\\n<span class=\\"line\\"><span>    });</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 函数的输出可以装箱</span></span>\\n<span class=\\"line\\"><span>    let boxed_point: Box&lt;Point&gt; = Box::new(origin());</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 两层装箱</span></span>\\n<span class=\\"line\\"><span>    let box_in_a_box: Box&lt;Box&lt;Point&gt;&gt; = Box::new(boxed_origin());</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"Point occupies {} bytes in the stack\\",</span></span>\\n<span class=\\"line\\"><span>             mem::size_of_val(&amp;point));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Rectangle occupies {} bytes in the stack\\",</span></span>\\n<span class=\\"line\\"><span>             mem::size_of_val(&amp;rectangle));</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // box 的宽度就是指针宽度</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Boxed point occupies {} bytes in the stack\\",</span></span>\\n<span class=\\"line\\"><span>             mem::size_of_val(&amp;boxed_point));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Boxed rectangle occupies {} bytes in the stack\\",</span></span>\\n<span class=\\"line\\"><span>             mem::size_of_val(&amp;boxed_rectangle));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Boxed box occupies {} bytes in the stack\\",</span></span>\\n<span class=\\"line\\"><span>             mem::size_of_val(&amp;box_in_a_box));</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 将包含在 `boxed_point` 中的数据复制到 `unboxed_point`</span></span>\\n<span class=\\"line\\"><span>    let unboxed_point: Point = *boxed_point;</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Unboxed point occupies {} bytes in the stack\\",</span></span>\\n<span class=\\"line\\"><span>             mem::size_of_val(&amp;unboxed_point));</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"raii","link":"scope/raii.html"},{"title":"testcase_linked_list","link":"custom_types/enum/testcase_linked_list.html"},{"title":"capture","link":"fn/closures/capture.html"}],"localMap":{"nodes":[{"id":"std/box.md","value":{"title":"box","path":"std/box.md","outlink":[],"backlink":["SUMMARY.md","scope/raii.md","custom_types/enum/testcase_linked_list.md","fn/closures/capture.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"scope/raii.md","value":{"title":"raii","path":"scope/raii.md","outlink":[],"backlink":[]}},{"id":"custom_types/enum/testcase_linked_list.md","value":{"title":"testcase_linked_list","path":"custom_types/enum/testcase_linked_list.md","outlink":[],"backlink":[]}},{"id":"fn/closures/capture.md","value":{"title":"capture","path":"fn/closures/capture.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std/box.md"},{"source":"scope/raii.md","target":"std/box.md"},{"source":"custom_types/enum/testcase_linked_list.md","target":"std/box.md"},{"source":"fn/closures/capture.md","target":"std/box.md"}]}}}');export{t as comp,o as data};
