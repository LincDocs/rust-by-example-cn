import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function r(p,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="提前返回" tabindex="-1"><a class="header-anchor" href="#提前返回"><span>提前返回</span></a></h1><p>在上一个例子中，我们显式地使用组合算子处理了错误。另一种处理错误的方式是使用<br><code>match</code> 语句和<strong>提前返回</strong>（early return）的结合。</p><p>这也就是说，如果发生错误，我们可以停止函数的执行然后返回错误。对有些人来说，这样的代码更好写，更易读。这次我们使用提前返回改写之前的例子：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::num::ParseIntError;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn multiply(first_number_str: &amp;str, second_number_str: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {</span></span>
<span class="line"><span>    let first_number = match first_number_str.parse::&lt;i32&gt;() {</span></span>
<span class="line"><span>        Ok(first_number)  =&gt; first_number,</span></span>
<span class="line"><span>        Err(e) =&gt; return Err(e),</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let second_number = match second_number_str.parse::&lt;i32&gt;() {</span></span>
<span class="line"><span>        Ok(second_number)  =&gt; second_number,</span></span>
<span class="line"><span>        Err(e) =&gt; return Err(e),</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Ok(first_number * second_number)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn print(result: Result&lt;i32, ParseIntError&gt;) {</span></span>
<span class="line"><span>    match result {</span></span>
<span class="line"><span>        Ok(n)  =&gt; println!(&quot;n is {}&quot;, n),</span></span>
<span class="line"><span>        Err(e) =&gt; println!(&quot;Error: {}&quot;, e),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    print(multiply(&quot;10&quot;, &quot;2&quot;));</span></span>
<span class="line"><span>    print(multiply(&quot;t&quot;, &quot;2&quot;));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止，我们已经学会了如何使用组合算子和提前返回显式地处理错误。我们一般是想要避免 panic 的，但显式地处理所有错误确实显得过于繁琐。</p><p>在下一部分，我们将看到，当只是需要 <code>unwrap</code> 并且不产生 <code>panic</code> 时，可以使用<br><code>?</code> 来达到同样的效果。</p>`,6)]))}const c=s(l,[["render",r],["__file","early_returns.html.vue"]]),d=JSON.parse('{"path":"/error/result/early_returns.html","title":"提前返回","lang":"zh-CN","frontmatter":{"description":"提前返回 在上一个例子中，我们显式地使用组合算子处理了错误。另一种处理错误的方式是使用 match 语句和提前返回（early return）的结合。 这也就是说，如果发生错误，我们可以停止函数的执行然后返回错误。对有些人来说，这样的代码更好写，更易读。这次我们使用提前返回改写之前的例子： 到此为止，我们已经学会了如何使用组合算子和提前返回显式地处理错...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/error/result/early_returns.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"提前返回"}],["meta",{"property":"og:description","content":"提前返回 在上一个例子中，我们显式地使用组合算子处理了错误。另一种处理错误的方式是使用 match 语句和提前返回（early return）的结合。 这也就是说，如果发生错误，我们可以停止函数的执行然后返回错误。对有些人来说，这样的代码更好写，更易读。这次我们使用提前返回改写之前的例子： 到此为止，我们已经学会了如何使用组合算子和提前返回显式地处理错..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"提前返回\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.94,"words":283},"filePathRelative":"error/result/early_returns.md","excerpt":"\\n<p>在上一个例子中，我们显式地使用组合算子处理了错误。另一种处理错误的方式是使用<br>\\n<code>match</code> 语句和<strong>提前返回</strong>（early return）的结合。</p>\\n<p>这也就是说，如果发生错误，我们可以停止函数的执行然后返回错误。对有些人来说，这样的代码更好写，更易读。这次我们使用提前返回改写之前的例子：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::num::ParseIntError;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn multiply(first_number_str: &amp;str, second_number_str: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {</span></span>\\n<span class=\\"line\\"><span>    let first_number = match first_number_str.parse::&lt;i32&gt;() {</span></span>\\n<span class=\\"line\\"><span>        Ok(first_number)  =&gt; first_number,</span></span>\\n<span class=\\"line\\"><span>        Err(e) =&gt; return Err(e),</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let second_number = match second_number_str.parse::&lt;i32&gt;() {</span></span>\\n<span class=\\"line\\"><span>        Ok(second_number)  =&gt; second_number,</span></span>\\n<span class=\\"line\\"><span>        Err(e) =&gt; return Err(e),</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    Ok(first_number * second_number)</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn print(result: Result&lt;i32, ParseIntError&gt;) {</span></span>\\n<span class=\\"line\\"><span>    match result {</span></span>\\n<span class=\\"line\\"><span>        Ok(n)  =&gt; println!(\\"n is {}\\", n),</span></span>\\n<span class=\\"line\\"><span>        Err(e) =&gt; println!(\\"Error: {}\\", e),</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    print(multiply(\\"10\\", \\"2\\"));</span></span>\\n<span class=\\"line\\"><span>    print(multiply(\\"t\\", \\"2\\"));</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"error/result/early_returns.md","value":{"title":"early_returns","path":"error/result/early_returns.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"error/result/early_returns.md"}]}}}');export{c as comp,d as data};
