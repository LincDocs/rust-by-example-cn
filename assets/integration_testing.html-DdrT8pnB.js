import{_ as l,e as p,f as i,k as d,g as e,i as n,h as t,r,o as h}from"./app-CVSWwIkE.js";const k={};function g(o,s){const a=r("RouteLink");return h(),p("div",null,[s[7]||(s[7]=i("h1",{id:"集成测试",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#集成测试"},[i("span",null,"集成测试")])],-1)),i("p",null,[e(a,{to:"/testing/unit_testing.html"},{default:t(()=>s[0]||(s[0]=[n("单元测试")])),_:1}),s[1]||(s[1]=n("一次仅能单独测试一个模块，这种测试是小规模的，并且能测试私有代码；集成测试是 crate 外部的测试，并且仅使用 crate 的公共接口，就像其他使用该 crate 的程序那样。集成测试的目的是检验你的库的各部分是否能够正确地协同工作。"))]),s[8]||(s[8]=d(`<p>cargo 在与 <code>src</code> 同级别的 <code>tests</code> 目录寻找集成测试。</p><p>文件 <code>src/lib.rs</code>：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 在一个叫做 &#39;adder&#39; 的 crate 中定义此函数。</span></span>
<span class="line"><span>pub fn add(a: i32, b: i32) -&gt; i32 {</span></span>
<span class="line"><span>    a + b</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包含测试的文件：<code>tests/integration_test.rs</code>：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>#[test]</span></span>
<span class="line"><span>fn test_add() {</span></span>
<span class="line"><span>    assert_eq!(adder::add(3, 2), 5);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo test</code> 命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">running</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> passed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> failed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ignored</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> measured</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filtered</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Running</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> target/debug/deps/integration_test-bcd60824f5fbfe19</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">running</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test_add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> passed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> failed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ignored</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> measured</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filtered</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Doc-tests</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> adder</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">running</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> passed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> failed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ignored</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> measured</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filtered</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tests</code> 目录中的每一个 Rust 源文件都被编译成一个单独的 crate。在集成测试中要想共享代码，一种方式是创建具有公用函数的模块，然后在测试中导入并使用它。</p><p>文件 <code>tests/common.rs</code>:</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pub fn setup() {</span></span>
<span class="line"><span>    // 一些配置代码，比如创建文件/目录，开启服务器等等。</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包含测试的文件：<code>tests/integration_test.rs</code></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 导入共用模块。</span></span>
<span class="line"><span>mod common;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#[test]</span></span>
<span class="line"><span>fn test_add() {</span></span>
<span class="line"><span>    // 使用共用模块。</span></span>
<span class="line"><span>    common::setup();</span></span>
<span class="line"><span>    assert_eq!(adder::add(3, 2), 5);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),i("p",null,[s[3]||(s[3]=n("带有共用代码的模块遵循和普通的")),e(a,{to:"/mod.html"},{default:t(()=>s[2]||(s[2]=[n("模块")])),_:1}),s[4]||(s[4]=n("一样的规则，所以完全可以把公共模块写在 ")),s[5]||(s[5]=i("code",null,"tests/common/mod.rs",-1)),s[6]||(s[6]=n(" 文件中。"))])])}const u=l(k,[["render",g],["__file","integration_testing.html.vue"]]),m=JSON.parse('{"path":"/testing/integration_testing.html","title":"集成测试","lang":"zh-CN","frontmatter":{"description":"集成测试 一次仅能单独测试一个模块，这种测试是小规模的，并且能测试私有代码；集成测试是 crate 外部的测试，并且仅使用 crate 的公共接口，就像其他使用该 crate 的程序那样。集成测试的目的是检验你的库的各部分是否能够正确地协同工作。 cargo 在与 src 同级别的 tests 目录寻找集成测试。 文件 src/lib.rs： 包含测试...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/testing/integration_testing.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"集成测试"}],["meta",{"property":"og:description","content":"集成测试 一次仅能单独测试一个模块，这种测试是小规模的，并且能测试私有代码；集成测试是 crate 外部的测试，并且仅使用 crate 的公共接口，就像其他使用该 crate 的程序那样。集成测试的目的是检验你的库的各部分是否能够正确地协同工作。 cargo 在与 src 同级别的 tests 目录寻找集成测试。 文件 src/lib.rs： 包含测试..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集成测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.38,"words":413},"filePathRelative":"testing/integration_testing.md","excerpt":"\\n<p><a href=\\"/rust-by-example-cn-/testing/unit_testing.html\\" target=\\"_blank\\">单元测试</a>一次仅能单独测试一个模块，这种测试是小规模的，并且能测试私有代码；集成测试是 crate 外部的测试，并且仅使用 crate 的公共接口，就像其他使用该 crate 的程序那样。集成测试的目的是检验你的库的各部分是否能够正确地协同工作。</p>\\n<p>cargo 在与 <code>src</code> 同级别的 <code>tests</code> 目录寻找集成测试。</p>\\n<p>文件 <code>src/lib.rs</code>：</p>","autoDesc":true,"bioChainData":{"outlink":[{"title":"unit_testing","link":"testing/unit_testing.html"},{"title":"mod","link":"mod.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"testing/integration_testing.md","value":{"title":"integration_testing","path":"testing/integration_testing.md","outlink":["testing/unit_testing.md","mod.md"],"backlink":["SUMMARY.md"]}},{"id":"testing/unit_testing.md","value":{"title":"unit_testing","path":"testing/unit_testing.md","outlink":[],"backlink":[]}},{"id":"mod.md","value":{"title":"mod","path":"mod.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"testing/integration_testing.md","target":"testing/unit_testing.md"},{"source":"testing/integration_testing.md","target":"mod.md"},{"source":"SUMMARY.md","target":"testing/integration_testing.md"}]}}}');export{u as comp,m as data};
