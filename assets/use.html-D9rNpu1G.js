import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(d,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="use-声明" tabindex="-1"><a class="header-anchor" href="#use-声明"><span><code>use</code> 声明</span></a></h1><p><code>use</code> 声明可以将一个完整的路径绑定到一个新的名字，从而更容易访问。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 将 \`deeply::nested::function\` 路径绑定到 \`other_function\`。</span></span>
<span class="line"><span>use deeply::nested::function as other_function;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn function() {</span></span>
<span class="line"><span>    println!(&quot;called \`function()\`&quot;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mod deeply {</span></span>
<span class="line"><span>    pub mod nested {</span></span>
<span class="line"><span>        pub fn function() {</span></span>
<span class="line"><span>            println!(&quot;called \`deeply::nested::function()\`&quot;)</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 更容易访问 \`deeply::nested::funcion\`</span></span>
<span class="line"><span>    other_function();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;Entering block&quot;);</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        // 这和 \`use deeply::nested::function as function\` 等价。</span></span>
<span class="line"><span>        // 此 \`function()\` 将遮蔽外部的同名函数。</span></span>
<span class="line"><span>        use deeply::nested::function;</span></span>
<span class="line"><span>        function();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // \`use\` 绑定拥有局部作用域。在这个例子中，\`function()\`</span></span>
<span class="line"><span>        // 的遮蔽只存在这个代码块中。</span></span>
<span class="line"><span>        println!(&quot;Leaving block&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    function();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const c=s(l,[["render",p],["__file","use.html.vue"]]),u=JSON.parse('{"path":"/mod/use.html","title":"use 声明","lang":"zh-CN","frontmatter":{"description":"use 声明 use 声明可以将一个完整的路径绑定到一个新的名字，从而更容易访问。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/mod/use.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"use 声明"}],["meta",{"property":"og:description","content":"use 声明 use 声明可以将一个完整的路径绑定到一个新的名字，从而更容易访问。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"use 声明\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.49,"words":148},"filePathRelative":"mod/use.md","excerpt":"\\n<p><code>use</code> 声明可以将一个完整的路径绑定到一个新的名字，从而更容易访问。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 将 `deeply::nested::function` 路径绑定到 `other_function`。</span></span>\\n<span class=\\"line\\"><span>use deeply::nested::function as other_function;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn function() {</span></span>\\n<span class=\\"line\\"><span>    println!(\\"called `function()`\\");</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>mod deeply {</span></span>\\n<span class=\\"line\\"><span>    pub mod nested {</span></span>\\n<span class=\\"line\\"><span>        pub fn function() {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"called `deeply::nested::function()`\\")</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 更容易访问 `deeply::nested::funcion`</span></span>\\n<span class=\\"line\\"><span>    other_function();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"Entering block\\");</span></span>\\n<span class=\\"line\\"><span>    {</span></span>\\n<span class=\\"line\\"><span>        // 这和 `use deeply::nested::function as function` 等价。</span></span>\\n<span class=\\"line\\"><span>        // 此 `function()` 将遮蔽外部的同名函数。</span></span>\\n<span class=\\"line\\"><span>        use deeply::nested::function;</span></span>\\n<span class=\\"line\\"><span>        function();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // `use` 绑定拥有局部作用域。在这个例子中，`function()`</span></span>\\n<span class=\\"line\\"><span>        // 的遮蔽只存在这个代码块中。</span></span>\\n<span class=\\"line\\"><span>        println!(\\"Leaving block\\");</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    function();</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"enum_use","link":"custom_types/enum/enum_use.html"},{"title":"print_display","link":"hello/print/print_display.html"}],"localMap":{"nodes":[{"id":"mod/use.md","value":{"title":"use","path":"mod/use.md","outlink":[],"backlink":["SUMMARY.md","custom_types/enum/enum_use.md","hello/print/print_display.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"custom_types/enum/enum_use.md","value":{"title":"enum_use","path":"custom_types/enum/enum_use.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display.md","value":{"title":"print_display","path":"hello/print/print_display.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"mod/use.md"},{"source":"custom_types/enum/enum_use.md","target":"mod/use.md"},{"source":"hello/print/print_display.md","target":"mod/use.md"}]}}}');export{c as comp,u as data};
