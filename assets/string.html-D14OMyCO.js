import{_ as a,e as t,f as s,k as r,i,g as l,h as p,r as o,o as d}from"./app-CVSWwIkE.js";const c={};function m(u,n){const e=o("RouteLink");return d(),t("div",null,[n[11]||(n[11]=s("h1",{id:"tostring-和-fromstr",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tostring-和-fromstr"},[s("span",null,[s("code",null,"ToString"),i(" 和 "),s("code",null,"FromStr")])])],-1)),n[12]||(n[12]=s("h2",{id:"tostring",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tostring"},[s("span",null,[s("code",null,"ToString")])])],-1)),s("p",null,[n[1]||(n[1]=i("要把任何类型转换成 ")),n[2]||(n[2]=s("code",null,"String",-1)),n[3]||(n[3]=i("，只需要实现那个类型的 ")),n[4]||(n[4]=s("a",{href:"https://rustwiki.org/zh-CN/std/string/trait.ToString.html",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"ToString")],-1)),n[5]||(n[5]=i(" trait。然而不要直接这么做，您应该实现")),n[6]||(n[6]=s("a",{href:"https://rustwiki.org/zh-CN/std/fmt/trait.Display.html",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"fmt::Display")],-1)),n[7]||(n[7]=i(" trait，它会自动提供 ")),n[8]||(n[8]=s("a",{href:"https://rustwiki.org/zh-CN/std/string/trait.ToString.html",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"ToString")],-1)),n[9]||(n[9]=i("，并且还可以用来打印类型，就像 ")),l(e,{to:"/hello/print.html"},{default:p(()=>n[0]||(n[0]=[s("code",null,"print!",-1)])),_:1}),n[10]||(n[10]=i(" 一节中讨论的那样。"))]),n[13]||(n[13]=r(`<div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::fmt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct Circle {</span></span>
<span class="line"><span>    radius: i32</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl fmt::Display for Circle {</span></span>
<span class="line"><span>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {</span></span>
<span class="line"><span>        write!(f, &quot;Circle of radius {}&quot;, self.radius)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let circle = Circle { radius: 6 };</span></span>
<span class="line"><span>    println!(&quot;{}&quot;, circle.to_string());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>译注：一个实现 <code>ToString</code> 的例子</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::string::ToString;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct Circle {</span></span>
<span class="line"><span>    radius: i32</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl ToString for Circle {</span></span>
<span class="line"><span>    fn to_string(&amp;self) -&gt; String {</span></span>
<span class="line"><span>        format!(&quot;Circle of radius {:?}&quot;, self.radius)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let circle = Circle { radius: 6 };</span></span>
<span class="line"><span>    println!(&quot;{}&quot;, circle.to_string());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析字符串" tabindex="-1"><a class="header-anchor" href="#解析字符串"><span>解析字符串</span></a></h2><p>我们经常需要把字符串转成数字。完成这项工作的标准手段是用 <a href="https://rustwiki.org/zh-CN/std/primitive.str.html#method.parse" target="_blank" rel="noopener noreferrer"><code>parse</code></a> 函数。我们得提供要转换到的类型，这可以通过使用类型推断，或者用 “涡轮鱼” 语法（turbo fish，<code>&lt;&gt;</code>）实现。</p><p>只要对目标类型实现了 <a href="https://rustwiki.org/zh-CN/std/str/trait.FromStr.html" target="_blank" rel="noopener noreferrer"><code>FromStr</code></a> trait，就可以用 <code>parse</code> 把字符串转换成目标类型。<br> 标准库中已经给无数种类型实现了 <code>FromStr</code>。如果要转换到用户定义类型，只要手动实现<br><code>FromStr</code> 就行。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let parsed: i32 = &quot;5&quot;.parse().unwrap();</span></span>
<span class="line"><span>    let turbo_parsed = &quot;10&quot;.parse::&lt;i32&gt;().unwrap();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let sum = parsed + turbo_parsed;</span></span>
<span class="line"><span>    println!{&quot;Sum: {:?}&quot;, sum};</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7))])}const v=a(c,[["render",m],["__file","string.html.vue"]]),h=JSON.parse('{"path":"/conversion/string.html","title":"ToString 和 FromStr","lang":"zh-CN","frontmatter":{"description":"ToString 和 FromStr ToString 要把任何类型转换成 String，只需要实现那个类型的 ToString trait。然而不要直接这么做，您应该实现fmt::Display trait，它会自动提供 ToString，并且还可以用来打印类型，就像 一节中讨论的那样。 译注：一个实现 ToString 的例子 解析字符串 我们经常...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/conversion/string.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"ToString 和 FromStr"}],["meta",{"property":"og:description","content":"ToString 和 FromStr ToString 要把任何类型转换成 String，只需要实现那个类型的 ToString trait。然而不要直接这么做，您应该实现fmt::Display trait，它会自动提供 ToString，并且还可以用来打印类型，就像 一节中讨论的那样。 译注：一个实现 ToString 的例子 解析字符串 我们经常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ToString 和 FromStr\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.1,"words":331},"filePathRelative":"conversion/string.md","excerpt":"\\n<h2><code>ToString</code></h2>\\n<p>要把任何类型转换成 <code>String</code>，只需要实现那个类型的 <a href=\\"https://rustwiki.org/zh-CN/std/string/trait.ToString.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>ToString</code></a> trait。然而不要直接这么做，您应该实现<a href=\\"https://rustwiki.org/zh-CN/std/fmt/trait.Display.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>fmt::Display</code></a> trait，它会自动提供 <a href=\\"https://rustwiki.org/zh-CN/std/string/trait.ToString.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>ToString</code></a>，并且还可以用来打印类型，就像 <a href=\\"/rust-by-example-cn-/hello/print.html\\" target=\\"_blank\\"><code>print!</code></a> 一节中讨论的那样。</p>","autoDesc":true,"bioChainData":{"outlink":[{"title":"print","link":"hello/print.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"print","link":"hello/print.html"}],"localMap":{"nodes":[{"id":"conversion/string.md","value":{"title":"string","path":"conversion/string.md","outlink":["hello/print.md"],"backlink":["SUMMARY.md","hello/print.md"]}},{"id":"hello/print.md","value":{"title":"print","path":"hello/print.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"conversion/string.md","target":"hello/print.md"},{"source":"SUMMARY.md","target":"conversion/string.md"},{"source":"hello/print.md","target":"conversion/string.md"}]}}}');export{v as comp,h as data};
