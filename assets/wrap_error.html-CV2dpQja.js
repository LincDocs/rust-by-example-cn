import{_ as e,e as l,k as i,f as n,i as p,g as r,h as t,r as d,o as c}from"./app-CVSWwIkE.js";const u={};function v(m,s){const a=d("RouteLink");return c(),l("div",null,[s[3]||(s[3]=i(`<h1 id="包裹错误" tabindex="-1"><a class="header-anchor" href="#包裹错误"><span>包裹错误</span></a></h1><p>把错误装箱这种做法也可以改成把它包裹到你自己的错误类型中。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::error;</span></span>
<span class="line"><span>use std::num::ParseIntError;</span></span>
<span class="line"><span>use std::fmt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type Result&lt;T&gt; = std::result::Result&lt;T, DoubleError&gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>enum DoubleError {</span></span>
<span class="line"><span>    EmptyVec,</span></span>
<span class="line"><span>    // 在这个错误类型中，我们采用 \`parse\` 的错误类型中 \`Err\` 部分的实现。</span></span>
<span class="line"><span>    // 若想提供更多信息，则该类型中还需要加入更多数据。</span></span>
<span class="line"><span>    Parse(ParseIntError),</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl fmt::Display for DoubleError {</span></span>
<span class="line"><span>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {</span></span>
<span class="line"><span>        match *self {</span></span>
<span class="line"><span>            DoubleError::EmptyVec =&gt;</span></span>
<span class="line"><span>                write!(f, &quot;please use a vector with at least one element&quot;),</span></span>
<span class="line"><span>            // 这是一个封装（wrapper），它采用内部各类型对 \`fmt\` 的实现。</span></span>
<span class="line"><span>            DoubleError::Parse(ref e) =&gt; e.fmt(f),</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl error::Error for DoubleError {</span></span>
<span class="line"><span>    fn source(&amp;self) -&gt; Option&lt;&amp;(dyn error::Error + &#39;static)&gt; {</span></span>
<span class="line"><span>        match *self {</span></span>
<span class="line"><span>            DoubleError::EmptyVec =&gt; None,</span></span>
<span class="line"><span>            // 原因采取内部对错误类型的实现。它隐式地转换成了 trait 对象 \`&amp;error:Error\`。</span></span>
<span class="line"><span>            // 这可以工作，因为内部的类型已经实现了 \`Error\` trait。</span></span>
<span class="line"><span>            DoubleError::Parse(ref e) =&gt; Some(e),</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 实现从 \`ParseIntError\` 到 \`DoubleError\` 的转换。</span></span>
<span class="line"><span>// 在使用 \`?\` 时，或者一个 \`ParseIntError\` 需要转换成 \`DoubleError\` 时，它会被自动调用。</span></span>
<span class="line"><span>impl From&lt;ParseIntError&gt; for DoubleError {</span></span>
<span class="line"><span>    fn from(err: ParseIntError) -&gt; DoubleError {</span></span>
<span class="line"><span>        DoubleError::Parse(err)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn double_first(vec: Vec&lt;&amp;str&gt;) -&gt; Result&lt;i32&gt; {</span></span>
<span class="line"><span>    let first = vec.first().ok_or(DoubleError::EmptyVec)?;</span></span>
<span class="line"><span>    let parsed = first.parse::&lt;i32&gt;()?;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Ok(2 * parsed)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn print(result: Result&lt;i32&gt;) {</span></span>
<span class="line"><span>    match result {</span></span>
<span class="line"><span>        Ok(n)  =&gt; println!(&quot;The first doubled is {}&quot;, n),</span></span>
<span class="line"><span>        Err(e) =&gt; println!(&quot;Error: {}&quot;, e),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let numbers = vec![&quot;42&quot;, &quot;93&quot;, &quot;18&quot;];</span></span>
<span class="line"><span>    let empty = vec![];</span></span>
<span class="line"><span>    let strings = vec![&quot;tofu&quot;, &quot;93&quot;, &quot;18&quot;];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    print(double_first(numbers));</span></span>
<span class="line"><span>    print(double_first(empty));</span></span>
<span class="line"><span>    print(double_first(strings));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种做法会在错误处理中增加一些模板化的代码，而且也不是所有的应用都需要这样做。一些库可以帮你处理模板化代码的问题。</p><h3 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also"><span>See also:</span></a></h3>`,5)),n("p",null,[s[1]||(s[1]=n("a",{href:"https://rustwiki.org/zh-CN/std/convert/trait.From.html",target:"_blank",rel:"noopener noreferrer"},[n("code",null,"From::from")],-1)),s[2]||(s[2]=p(" and ")),r(a,{to:"/custom_types/enum.html"},{default:t(()=>s[0]||(s[0]=[n("code",null,"枚举类型",-1)])),_:1})])])}const b=e(u,[["render",v],["__file","wrap_error.html.vue"]]),f=JSON.parse('{"path":"/error/multiple_error_types/wrap_error.html","title":"包裹错误","lang":"zh-CN","frontmatter":{"description":"包裹错误 把错误装箱这种做法也可以改成把它包裹到你自己的错误类型中。 这种做法会在错误处理中增加一些模板化的代码，而且也不是所有的应用都需要这样做。一些库可以帮你处理模板化代码的问题。 See also: From::from and","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/error/multiple_error_types/wrap_error.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"包裹错误"}],["meta",{"property":"og:description","content":"包裹错误 把错误装箱这种做法也可以改成把它包裹到你自己的错误类型中。 这种做法会在错误处理中增加一些模板化的代码，而且也不是所有的应用都需要这样做。一些库可以帮你处理模板化代码的问题。 See also: From::from and"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"包裹错误\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.4,"words":420},"filePathRelative":"error/multiple_error_types/wrap_error.md","excerpt":"\\n<p>把错误装箱这种做法也可以改成把它包裹到你自己的错误类型中。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::error;</span></span>\\n<span class=\\"line\\"><span>use std::num::ParseIntError;</span></span>\\n<span class=\\"line\\"><span>use std::fmt;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>type Result&lt;T&gt; = std::result::Result&lt;T, DoubleError&gt;;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>#[derive(Debug)]</span></span>\\n<span class=\\"line\\"><span>enum DoubleError {</span></span>\\n<span class=\\"line\\"><span>    EmptyVec,</span></span>\\n<span class=\\"line\\"><span>    // 在这个错误类型中，我们采用 `parse` 的错误类型中 `Err` 部分的实现。</span></span>\\n<span class=\\"line\\"><span>    // 若想提供更多信息，则该类型中还需要加入更多数据。</span></span>\\n<span class=\\"line\\"><span>    Parse(ParseIntError),</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl fmt::Display for DoubleError {</span></span>\\n<span class=\\"line\\"><span>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {</span></span>\\n<span class=\\"line\\"><span>        match *self {</span></span>\\n<span class=\\"line\\"><span>            DoubleError::EmptyVec =&gt;</span></span>\\n<span class=\\"line\\"><span>                write!(f, \\"please use a vector with at least one element\\"),</span></span>\\n<span class=\\"line\\"><span>            // 这是一个封装（wrapper），它采用内部各类型对 `fmt` 的实现。</span></span>\\n<span class=\\"line\\"><span>            DoubleError::Parse(ref e) =&gt; e.fmt(f),</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl error::Error for DoubleError {</span></span>\\n<span class=\\"line\\"><span>    fn source(&amp;self) -&gt; Option&lt;&amp;(dyn error::Error + \'static)&gt; {</span></span>\\n<span class=\\"line\\"><span>        match *self {</span></span>\\n<span class=\\"line\\"><span>            DoubleError::EmptyVec =&gt; None,</span></span>\\n<span class=\\"line\\"><span>            // 原因采取内部对错误类型的实现。它隐式地转换成了 trait 对象 `&amp;error:Error`。</span></span>\\n<span class=\\"line\\"><span>            // 这可以工作，因为内部的类型已经实现了 `Error` trait。</span></span>\\n<span class=\\"line\\"><span>            DoubleError::Parse(ref e) =&gt; Some(e),</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 实现从 `ParseIntError` 到 `DoubleError` 的转换。</span></span>\\n<span class=\\"line\\"><span>// 在使用 `?` 时，或者一个 `ParseIntError` 需要转换成 `DoubleError` 时，它会被自动调用。</span></span>\\n<span class=\\"line\\"><span>impl From&lt;ParseIntError&gt; for DoubleError {</span></span>\\n<span class=\\"line\\"><span>    fn from(err: ParseIntError) -&gt; DoubleError {</span></span>\\n<span class=\\"line\\"><span>        DoubleError::Parse(err)</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn double_first(vec: Vec&lt;&amp;str&gt;) -&gt; Result&lt;i32&gt; {</span></span>\\n<span class=\\"line\\"><span>    let first = vec.first().ok_or(DoubleError::EmptyVec)?;</span></span>\\n<span class=\\"line\\"><span>    let parsed = first.parse::&lt;i32&gt;()?;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    Ok(2 * parsed)</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn print(result: Result&lt;i32&gt;) {</span></span>\\n<span class=\\"line\\"><span>    match result {</span></span>\\n<span class=\\"line\\"><span>        Ok(n)  =&gt; println!(\\"The first doubled is {}\\", n),</span></span>\\n<span class=\\"line\\"><span>        Err(e) =&gt; println!(\\"Error: {}\\", e),</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let numbers = vec![\\"42\\", \\"93\\", \\"18\\"];</span></span>\\n<span class=\\"line\\"><span>    let empty = vec![];</span></span>\\n<span class=\\"line\\"><span>    let strings = vec![\\"tofu\\", \\"93\\", \\"18\\"];</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    print(double_first(numbers));</span></span>\\n<span class=\\"line\\"><span>    print(double_first(empty));</span></span>\\n<span class=\\"line\\"><span>    print(double_first(strings));</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"enum","link":"custom_types/enum.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"error/multiple_error_types/wrap_error.md","value":{"title":"wrap_error","path":"error/multiple_error_types/wrap_error.md","outlink":["custom_types/enum.md"],"backlink":["SUMMARY.md"]}},{"id":"custom_types/enum.md","value":{"title":"enum","path":"custom_types/enum.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"error/multiple_error_types/wrap_error.md","target":"custom_types/enum.md"},{"source":"SUMMARY.md","target":"error/multiple_error_types/wrap_error.md"}]}}}');export{b as comp,f as data};
