import{_ as a,e,k as i,f as l,g as p,h as t,r,o as d,i as c}from"./app-CY03Lsxp.js";const u={};function m(o,s){const n=r("RouteLink");return d(),e("div",null,[s[1]||(s[1]=i(`<h1 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体"><span>结构体</span></a></h1><p>在结构体中标注生命周期也和函数的类似：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 一个 \`Borrowed\` 类型，含有一个指向 \`i32\` 类型的引用。</span></span>
<span class="line"><span>// 该引用必须比 \`Borrowed\` 寿命更长。</span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct Borrowed&lt;&#39;a&gt;(&amp;&#39;a i32);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 和前面类似，这里的两个引用都必须比这个结构体长寿。</span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct NamedBorrowed&lt;&#39;a&gt; {</span></span>
<span class="line"><span>    x: &amp;&#39;a i32,</span></span>
<span class="line"><span>    y: &amp;&#39;a i32,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 一个枚举类型，其取值不是 \`i32\` 类型就是一个指向 \`i32\` 的引用。</span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>enum Either&lt;&#39;a&gt; {</span></span>
<span class="line"><span>    Num(i32),</span></span>
<span class="line"><span>    Ref(&amp;&#39;a i32),</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let x = 18;</span></span>
<span class="line"><span>    let y = 15;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let single = Borrowed(&amp;x);</span></span>
<span class="line"><span>    let double = NamedBorrowed { x: &amp;x, y: &amp;y };</span></span>
<span class="line"><span>    let reference = Either::Ref(&amp;x);</span></span>
<span class="line"><span>    let number    = Either::Num(y);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;x is borrowed in {:?}&quot;, single);</span></span>
<span class="line"><span>    println!(&quot;x and y are borrowed in {:?}&quot;, double);</span></span>
<span class="line"><span>    println!(&quot;x is borrowed in {:?}&quot;, reference);</span></span>
<span class="line"><span>    println!(&quot;y is *not* borrowed in {:?}&quot;, number);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,4)),l("p",null,[p(n,{to:"/custom_types/structs.html"},{default:t(()=>s[0]||(s[0]=[c("结构体")])),_:1})])])}const b=a(u,[["render",m],["__file","struct.html.vue"]]),h=JSON.parse('{"path":"/scope/lifetime/struct.html","title":"结构体","lang":"zh-CN","frontmatter":{"description":"结构体 在结构体中标注生命周期也和函数的类似： 参见：","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/scope/lifetime/struct.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"结构体"}],["meta",{"property":"og:description","content":"结构体 在结构体中标注生命周期也和函数的类似： 参见："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构体\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.65,"words":194},"filePathRelative":"scope/lifetime/struct.md","excerpt":"\\n<p>在结构体中标注生命周期也和函数的类似：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 一个 `Borrowed` 类型，含有一个指向 `i32` 类型的引用。</span></span>\\n<span class=\\"line\\"><span>// 该引用必须比 `Borrowed` 寿命更长。</span></span>\\n<span class=\\"line\\"><span>#[derive(Debug)]</span></span>\\n<span class=\\"line\\"><span>struct Borrowed&lt;\'a&gt;(&amp;\'a i32);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 和前面类似，这里的两个引用都必须比这个结构体长寿。</span></span>\\n<span class=\\"line\\"><span>#[derive(Debug)]</span></span>\\n<span class=\\"line\\"><span>struct NamedBorrowed&lt;\'a&gt; {</span></span>\\n<span class=\\"line\\"><span>    x: &amp;\'a i32,</span></span>\\n<span class=\\"line\\"><span>    y: &amp;\'a i32,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 一个枚举类型，其取值不是 `i32` 类型就是一个指向 `i32` 的引用。</span></span>\\n<span class=\\"line\\"><span>#[derive(Debug)]</span></span>\\n<span class=\\"line\\"><span>enum Either&lt;\'a&gt; {</span></span>\\n<span class=\\"line\\"><span>    Num(i32),</span></span>\\n<span class=\\"line\\"><span>    Ref(&amp;\'a i32),</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let x = 18;</span></span>\\n<span class=\\"line\\"><span>    let y = 15;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let single = Borrowed(&amp;x);</span></span>\\n<span class=\\"line\\"><span>    let double = NamedBorrowed { x: &amp;x, y: &amp;y };</span></span>\\n<span class=\\"line\\"><span>    let reference = Either::Ref(&amp;x);</span></span>\\n<span class=\\"line\\"><span>    let number    = Either::Num(y);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"x is borrowed in {:?}\\", single);</span></span>\\n<span class=\\"line\\"><span>    println!(\\"x and y are borrowed in {:?}\\", double);</span></span>\\n<span class=\\"line\\"><span>    println!(\\"x is borrowed in {:?}\\", reference);</span></span>\\n<span class=\\"line\\"><span>    println!(\\"y is *not* borrowed in {:?}\\", number);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"structs","link":"custom_types/structs.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"scope/lifetime/struct.md","value":{"title":"struct","path":"scope/lifetime/struct.md","outlink":["custom_types/structs.md"],"backlink":["SUMMARY.md"]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"scope/lifetime/struct.md","target":"custom_types/structs.md"},{"source":"SUMMARY.md","target":"scope/lifetime/struct.md"}]}}}');export{b as comp,h as data};
