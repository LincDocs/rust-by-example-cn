import{_ as o,e as t,k as r,o as n}from"./app-CVSWwIkE.js";const c={};function d(i,e){return n(),t("div",null,e[0]||(e[0]=[r('<h1 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h1><p>错误处理（error handling）是处理可能发生的失败情况的过程。例如读取一个文件时失败了，如果继续使用这个<strong>无效的</strong>输入，那显然是有问题的。注意到并且显式地处理这种错误可以避免程序的其他部分产生潜在的问题。</p><p>在 Rust 中有多种处理错误的方式，在接下来的小节中会一一介绍。它们多少有些区别，使用场景也不尽相同。总的来说：</p><ul><li>显式的 <code>panic</code> 主要用于测试，以及处理不可恢复的错误。在原型开发中这很有用，比如<br> 用来测试还没有实现的函数，不过这时使用 <code>unimplemented</code> 更能表达意图。另外在<br> 测试中，<code>panic</code> 是一种显式地失败（fail）的好方法。</li><li><code>Option</code> 类型是为了值是可选的、或者缺少值并不是错误的情况准备的。比如说寻找<br> 父目录时，<code>/</code> 和 <code>C:</code> 这样的目录就没有父目录，这应当并不是一个错误。当处理<br><code>Option</code> 时，<code>unwrap</code> 可用于原型开发，也可以用于能够确定 <code>Option</code> 中一定有值<br> 的情形。然而 <code>expect</code> 更有用，因为它允许你指定一条错误信息，以免万一还是出现<br> 了错误。</li><li>当错误有可能发生，且应当由调用者处理时，使用 <code>Result</code>。你也可以 <code>unwrap</code> 然后<br> 使用 <code>expect</code>，但是除了在测试或者原型开发中，请不要这样做。</li></ul><p>有关错误处理的更多内容，可参考<a href="https://rustwiki.org/zh-CN/book/ch09-00-error-handling.html" target="_blank" rel="noopener noreferrer">官方文档</a>的错误处理的章节。</p>',5)]))}const l=o(c,[["render",d],["__file","error.html.vue"]]),p=JSON.parse('{"path":"/error.html","title":"错误处理","lang":"zh-CN","frontmatter":{"description":"错误处理 错误处理（error handling）是处理可能发生的失败情况的过程。例如读取一个文件时失败了，如果继续使用这个无效的输入，那显然是有问题的。注意到并且显式地处理这种错误可以避免程序的其他部分产生潜在的问题。 在 Rust 中有多种处理错误的方式，在接下来的小节中会一一介绍。它们多少有些区别，使用场景也不尽相同。总的来说： 显式的 pani...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/error.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"错误处理"}],["meta",{"property":"og:description","content":"错误处理 错误处理（error handling）是处理可能发生的失败情况的过程。例如读取一个文件时失败了，如果继续使用这个无效的输入，那显然是有问题的。注意到并且显式地处理这种错误可以避免程序的其他部分产生潜在的问题。 在 Rust 中有多种处理错误的方式，在接下来的小节中会一一介绍。它们多少有些区别，使用场景也不尽相同。总的来说： 显式的 pani..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"错误处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.41,"words":422},"filePathRelative":"error.md","excerpt":"\\n<p>错误处理（error handling）是处理可能发生的失败情况的过程。例如读取一个文件时失败了，如果继续使用这个<strong>无效的</strong>输入，那显然是有问题的。注意到并且显式地处理这种错误可以避免程序的其他部分产生潜在的问题。</p>\\n<p>在 Rust 中有多种处理错误的方式，在接下来的小节中会一一介绍。它们多少有些区别，使用场景也不尽相同。总的来说：</p>\\n<ul>\\n<li>显式的 <code>panic</code> 主要用于测试，以及处理不可恢复的错误。在原型开发中这很有用，比如<br>\\n用来测试还没有实现的函数，不过这时使用 <code>unimplemented</code> 更能表达意图。另外在<br>\\n测试中，<code>panic</code> 是一种显式地失败（fail）的好方法。</li>\\n<li><code>Option</code> 类型是为了值是可选的、或者缺少值并不是错误的情况准备的。比如说寻找<br>\\n父目录时，<code>/</code> 和 <code>C:</code> 这样的目录就没有父目录，这应当并不是一个错误。当处理<br>\\n<code>Option</code> 时，<code>unwrap</code> 可用于原型开发，也可以用于能够确定 <code>Option</code> 中一定有值<br>\\n的情形。然而 <code>expect</code> 更有用，因为它允许你指定一条错误信息，以免万一还是出现<br>\\n了错误。</li>\\n<li>当错误有可能发生，且应当由调用者处理时，使用 <code>Result</code>。你也可以 <code>unwrap</code> 然后<br>\\n使用 <code>expect</code>，但是除了在测试或者原型开发中，请不要这样做。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"error.md","value":{"title":"error","path":"error.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"error.md"}]}}}');export{l as comp,p as data};
