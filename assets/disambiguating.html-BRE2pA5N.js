import{_ as s,e as a,k as e,o as i}from"./app-CY03Lsxp.js";const l={};function p(t,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="消除重叠-trait" tabindex="-1"><a class="header-anchor" href="#消除重叠-trait"><span>消除重叠 trait</span></a></h1><p>一个类型可以实现许多不同的 trait。如果两个 trait 都需要相同的名称怎么办？例如，许多 trait 可能拥有名为 <code>get()</code> 的方法。他们甚至可能有不同的返回类型！</p><p>有个好消息：由于每个 trait 实现都有自己的 <code>impl</code> 块，因此很清楚您要实现哪个 trait 的 <code>get</code> 方法。</p><p>何时需要<strong>调用</strong>这些方法呢？为了消除它们之间的歧义，我们必须使用完全限定语法（Fully Qualified Syntax）。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>trait UsernameWidget {</span></span>
<span class="line"><span>    // 从这个 widget 中获取选定的用户名</span></span>
<span class="line"><span>    fn get(&amp;self) -&gt; String;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>trait AgeWidget {</span></span>
<span class="line"><span>    // 从这个 widget 中获取选定的年龄</span></span>
<span class="line"><span>    fn get(&amp;self) -&gt; u8;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 同时具有 UsernameWidget 和 AgeWidget 的表单</span></span>
<span class="line"><span>struct Form {</span></span>
<span class="line"><span>    username: String,</span></span>
<span class="line"><span>    age: u8,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl UsernameWidget for Form {</span></span>
<span class="line"><span>    fn get(&amp;self) -&gt; String {</span></span>
<span class="line"><span>        self.username.clone()</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl AgeWidget for Form {</span></span>
<span class="line"><span>    fn get(&amp;self) -&gt; u8 {</span></span>
<span class="line"><span>        self.age</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let form = Form{</span></span>
<span class="line"><span>        username: &quot;rustacean&quot;.to_owned(),</span></span>
<span class="line"><span>        age: 28,</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 如果取消注释此行，则会收到一条错误消息，提示 “multiple \`get\` found”（找到了多个\`get\`）。</span></span>
<span class="line"><span>    // 因为毕竟有多个名为 \`get\` 的方法。</span></span>
<span class="line"><span>    // println!(&quot;{}&quot;, form.get());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let username = &lt;Form as UsernameWidget&gt;::get(&amp;form);</span></span>
<span class="line"><span>    assert_eq!(&quot;rustacean&quot;.to_owned(), username);</span></span>
<span class="line"><span>    let age = &lt;Form as AgeWidget&gt;::get(&amp;form);</span></span>
<span class="line"><span>    assert_eq!(28, age);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3><p><a href="https://rustwiki.org/zh-CN/book/ch19-03-advanced-traits.html#%E5%AE%8C%E5%85%A8%E9%99%90%E5%AE%9A%E8%AF%AD%E6%B3%95%E4%B8%8E%E6%B6%88%E6%AD%A7%E4%B9%89%E8%B0%83%E7%94%A8%E7%9B%B8%E5%90%8C%E5%90%8D%E7%A7%B0%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">《Rust 程序设计语言》中关于“完全限定语法”的章节</a></p>`,7)]))}const r=s(l,[["render",p],["__file","disambiguating.html.vue"]]),c=JSON.parse('{"path":"/trait/disambiguating.html","title":"消除重叠 trait","lang":"zh-CN","frontmatter":{"description":"消除重叠 trait 一个类型可以实现许多不同的 trait。如果两个 trait 都需要相同的名称怎么办？例如，许多 trait 可能拥有名为 get() 的方法。他们甚至可能有不同的返回类型！ 有个好消息：由于每个 trait 实现都有自己的 impl 块，因此很清楚您要实现哪个 trait 的 get 方法。 何时需要调用这些方法呢？为了消除它们...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/trait/disambiguating.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"消除重叠 trait"}],["meta",{"property":"og:description","content":"消除重叠 trait 一个类型可以实现许多不同的 trait。如果两个 trait 都需要相同的名称怎么办？例如，许多 trait 可能拥有名为 get() 的方法。他们甚至可能有不同的返回类型！ 有个好消息：由于每个 trait 实现都有自己的 impl 块，因此很清楚您要实现哪个 trait 的 get 方法。 何时需要调用这些方法呢？为了消除它们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消除重叠 trait\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.13,"words":338},"filePathRelative":"trait/disambiguating.md","excerpt":"\\n<p>一个类型可以实现许多不同的 trait。如果两个 trait 都需要相同的名称怎么办？例如，许多 trait 可能拥有名为 <code>get()</code> 的方法。他们甚至可能有不同的返回类型！</p>\\n<p>有个好消息：由于每个 trait 实现都有自己的 <code>impl</code> 块，因此很清楚您要实现哪个 trait 的 <code>get</code> 方法。</p>\\n<p>何时需要<strong>调用</strong>这些方法呢？为了消除它们之间的歧义，我们必须使用完全限定语法（Fully Qualified Syntax）。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>trait UsernameWidget {</span></span>\\n<span class=\\"line\\"><span>    // 从这个 widget 中获取选定的用户名</span></span>\\n<span class=\\"line\\"><span>    fn get(&amp;self) -&gt; String;</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>trait AgeWidget {</span></span>\\n<span class=\\"line\\"><span>    // 从这个 widget 中获取选定的年龄</span></span>\\n<span class=\\"line\\"><span>    fn get(&amp;self) -&gt; u8;</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 同时具有 UsernameWidget 和 AgeWidget 的表单</span></span>\\n<span class=\\"line\\"><span>struct Form {</span></span>\\n<span class=\\"line\\"><span>    username: String,</span></span>\\n<span class=\\"line\\"><span>    age: u8,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl UsernameWidget for Form {</span></span>\\n<span class=\\"line\\"><span>    fn get(&amp;self) -&gt; String {</span></span>\\n<span class=\\"line\\"><span>        self.username.clone()</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl AgeWidget for Form {</span></span>\\n<span class=\\"line\\"><span>    fn get(&amp;self) -&gt; u8 {</span></span>\\n<span class=\\"line\\"><span>        self.age</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let form = Form{</span></span>\\n<span class=\\"line\\"><span>        username: \\"rustacean\\".to_owned(),</span></span>\\n<span class=\\"line\\"><span>        age: 28,</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 如果取消注释此行，则会收到一条错误消息，提示 “multiple `get` found”（找到了多个`get`）。</span></span>\\n<span class=\\"line\\"><span>    // 因为毕竟有多个名为 `get` 的方法。</span></span>\\n<span class=\\"line\\"><span>    // println!(\\"{}\\", form.get());</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let username = &lt;Form as UsernameWidget&gt;::get(&amp;form);</span></span>\\n<span class=\\"line\\"><span>    assert_eq!(\\"rustacean\\".to_owned(), username);</span></span>\\n<span class=\\"line\\"><span>    let age = &lt;Form as AgeWidget&gt;::get(&amp;form);</span></span>\\n<span class=\\"line\\"><span>    assert_eq!(28, age);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"trait/disambiguating.md","value":{"title":"disambiguating","path":"trait/disambiguating.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"trait/disambiguating.md"}]}}}');export{r as comp,c as data};
