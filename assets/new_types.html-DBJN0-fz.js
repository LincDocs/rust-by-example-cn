import{_ as e,e as i,k as l,f as n,g as p,h as t,r as d,o as c}from"./app-CY03Lsxp.js";const r={};function o(u,s){const a=d("RouteLink");return c(),i("div",null,[s[1]||(s[1]=l(`<h1 id="new-type-惯用法" tabindex="-1"><a class="header-anchor" href="#new-type-惯用法"><span>new type 惯用法</span></a></h1><p><code>newtype</code> 惯用法（译注：即为不同种类的数据分别定义新的类型）能保证在编译时，提供给程序的都是正确的类型。</p><p>比如说，实现一个 “年龄认证” 函数，它要求输入<strong>必须</strong>是 <code>Years</code> 类型。</p><div class="language-rust, line-numbers-mode" data-highlighter="shiki" data-ext="rust," data-title="rust," style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct Years(i64);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct Days(i64);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl Years {</span></span>
<span class="line"><span>    pub fn to_days(&amp;self) -&gt; Days {</span></span>
<span class="line"><span>        Days(self.0 * 365)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl Days {</span></span>
<span class="line"><span>    /// 舍去不满一年的部分</span></span>
<span class="line"><span>    pub fn to_years(&amp;self) -&gt; Years {</span></span>
<span class="line"><span>        Years(self.0 / 365)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn old_enough(age: &amp;Years) -&gt; bool {</span></span>
<span class="line"><span>    age.0 &gt;= 18</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let age = Years(5);</span></span>
<span class="line"><span>    let age_days = age.to_days();</span></span>
<span class="line"><span>    println!(&quot;Old enough {}&quot;, old_enough(&amp;age));</span></span>
<span class="line"><span>    println!(&quot;Old enough {}&quot;, old_enough(&amp;age_days.to_years()));</span></span>
<span class="line"><span>    // println!(&quot;Old enough {}&quot;, old_enough(&amp;age_days));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取消最后一行的注释，就可以发现提供给 <code>old_enough</code> 的必须是 <code>Years</code> 类型。</p><h3 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also"><span>See also:</span></a></h3>`,6)),n("p",null,[p(a,{to:"/custom_types/structs.html"},{default:t(()=>s[0]||(s[0]=[n("code",null,"structs",-1)])),_:1})])])}const v=e(r,[["render",o],["__file","new_types.html.vue"]]),b=JSON.parse('{"path":"/generics/new_types.html","title":"new type 惯用法","lang":"zh-CN","frontmatter":{"description":"new type 惯用法 newtype 惯用法（译注：即为不同种类的数据分别定义新的类型）能保证在编译时，提供给程序的都是正确的类型。 比如说，实现一个 “年龄认证” 函数，它要求输入必须是 Years 类型。 取消最后一行的注释，就可以发现提供给 old_enough 的必须是 Years 类型。 See also:","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/generics/new_types.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"new type 惯用法"}],["meta",{"property":"og:description","content":"new type 惯用法 newtype 惯用法（译注：即为不同种类的数据分别定义新的类型）能保证在编译时，提供给程序的都是正确的类型。 比如说，实现一个 “年龄认证” 函数，它要求输入必须是 Years 类型。 取消最后一行的注释，就可以发现提供给 old_enough 的必须是 Years 类型。 See also:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"new type 惯用法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.58,"words":174},"filePathRelative":"generics/new_types.md","excerpt":"\\n<p><code>newtype</code> 惯用法（译注：即为不同种类的数据分别定义新的类型）能保证在编译时，提供给程序的都是正确的类型。</p>\\n<p>比如说，实现一个 “年龄认证” 函数，它要求输入<strong>必须</strong>是 <code>Years</code> 类型。</p>\\n<div class=\\"language-rust, line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,\\" data-title=\\"rust,\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>struct Years(i64);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>struct Days(i64);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl Years {</span></span>\\n<span class=\\"line\\"><span>    pub fn to_days(&amp;self) -&gt; Days {</span></span>\\n<span class=\\"line\\"><span>        Days(self.0 * 365)</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl Days {</span></span>\\n<span class=\\"line\\"><span>    /// 舍去不满一年的部分</span></span>\\n<span class=\\"line\\"><span>    pub fn to_years(&amp;self) -&gt; Years {</span></span>\\n<span class=\\"line\\"><span>        Years(self.0 / 365)</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn old_enough(age: &amp;Years) -&gt; bool {</span></span>\\n<span class=\\"line\\"><span>    age.0 &gt;= 18</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let age = Years(5);</span></span>\\n<span class=\\"line\\"><span>    let age_days = age.to_days();</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Old enough {}\\", old_enough(&amp;age));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Old enough {}\\", old_enough(&amp;age_days.to_years()));</span></span>\\n<span class=\\"line\\"><span>    // println!(\\"Old enough {}\\", old_enough(&amp;age_days));</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"structs","link":"custom_types/structs.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"generics/new_types.md","value":{"title":"new_types","path":"generics/new_types.md","outlink":["custom_types/structs.md"],"backlink":["SUMMARY.md"]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"generics/new_types.md","target":"custom_types/structs.md"},{"source":"SUMMARY.md","target":"generics/new_types.md"}]}}}');export{v as comp,b as data};
