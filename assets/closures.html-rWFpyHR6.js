import{_ as n,e as i,k as e,o as a}from"./app-CVSWwIkE.js";const l={};function t(p,s){return a(),i("div",null,s[0]||(s[0]=[e(`<h1 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h1><p>Rust 中的闭包（closure），也叫做 lambda 表达式或者 lambda，是一类能够捕获周围作用域中变量的函数。例如，一个可以捕获 x 变量的闭包如下：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它们的语法和能力使它们在临时（on the fly）使用时相当方便。调用一个闭包和调用一个函数完全相同，不过调用闭包时，输入和返回类型两者都<strong>可以</strong>自动推导，而输入变量名<strong>必须</strong>指明。</p><p>其他的特点包括：</p><ul><li>声明时使用 <code>||</code> 替代 <code>()</code> 将输入参数括起来。</li><li>函数体定界符（<code>{}</code>）对于单个表达式是可选的，其他情况必须加上。</li><li>有能力捕获外部环境的变量。</li></ul><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 通过闭包和函数分别实现自增。</span></span>
<span class="line"><span>    // 译注：下面这行是使用函数的实现</span></span>
<span class="line"><span>    fn  function            (i: i32) -&gt; i32 { i + 1 }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 闭包是匿名的，这里我们将它们绑定到引用。</span></span>
<span class="line"><span>    // 类型标注和函数的一样，不过类型标注和使用 \`{}\` 来围住函数体都是可选的。</span></span>
<span class="line"><span>    // 这些匿名函数（nameless function）被赋值给合适地命名的变量。</span></span>
<span class="line"><span>    let closure_annotated = |i: i32| -&gt; i32 { i + 1 };</span></span>
<span class="line"><span>    let closure_inferred  = |i     |          i + 1  ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 译注：将闭包绑定到引用的说法可能不准。</span></span>
<span class="line"><span>    // 据[语言参考](https://doc.rust-lang.org/beta/reference/types.html#closure-types)</span></span>
<span class="line"><span>    // 闭包表达式产生的类型就是 “闭包类型”，不属于引用类型，而且确实无法对上面两个</span></span>
<span class="line"><span>    // \`closure_xxx\` 变量解引用。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let i = 1;</span></span>
<span class="line"><span>    // 调用函数和闭包。</span></span>
<span class="line"><span>    println!(&quot;function: {}&quot;, function(i));</span></span>
<span class="line"><span>    println!(&quot;closure_annotated: {}&quot;, closure_annotated(i));</span></span>
<span class="line"><span>    println!(&quot;closure_inferred: {}&quot;, closure_inferred(i));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 没有参数的闭包，返回一个 \`i32\` 类型。</span></span>
<span class="line"><span>    // 返回类型是自动推导的。</span></span>
<span class="line"><span>    let one = || 1;</span></span>
<span class="line"><span>    println!(&quot;closure returning one: {}&quot;, one());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const d=n(l,[["render",t],["__file","closures.html.vue"]]),c=JSON.parse('{"path":"/fn/closures.html","title":"闭包","lang":"zh-CN","frontmatter":{"description":"闭包 Rust 中的闭包（closure），也叫做 lambda 表达式或者 lambda，是一类能够捕获周围作用域中变量的函数。例如，一个可以捕获 x 变量的闭包如下： 它们的语法和能力使它们在临时（on the fly）使用时相当方便。调用一个闭包和调用一个函数完全相同，不过调用闭包时，输入和返回类型两者都可以自动推导，而输入变量名必须指明。 其他...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/fn/closures.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"闭包"}],["meta",{"property":"og:description","content":"闭包 Rust 中的闭包（closure），也叫做 lambda 表达式或者 lambda，是一类能够捕获周围作用域中变量的函数。例如，一个可以捕获 x 变量的闭包如下： 它们的语法和能力使它们在临时（on the fly）使用时相当方便。调用一个闭包和调用一个函数完全相同，不过调用闭包时，输入和返回类型两者都可以自动推导，而输入变量名必须指明。 其他..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.47,"words":440},"filePathRelative":"fn/closures.md","excerpt":"\\n<p>Rust 中的闭包（closure），也叫做 lambda 表达式或者 lambda，是一类能够捕获周围作用域中变量的函数。例如，一个可以捕获 x 变量的闭包如下：</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust\\" data-title=\\"rust\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">|</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">val</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">|</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> val</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> + </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">x</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"and_then","link":"error/option_unwrap/and_then.html"},{"title":"map","link":"error/option_unwrap/map.html"},{"title":"explicit","link":"scope/lifetime/explicit.html"}],"localMap":{"nodes":[{"id":"fn/closures.md","value":{"title":"closures","path":"fn/closures.md","outlink":[],"backlink":["SUMMARY.md","error/option_unwrap/and_then.md","error/option_unwrap/map.md","scope/lifetime/explicit.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"error/option_unwrap/and_then.md","value":{"title":"and_then","path":"error/option_unwrap/and_then.md","outlink":[],"backlink":[]}},{"id":"error/option_unwrap/map.md","value":{"title":"map","path":"error/option_unwrap/map.md","outlink":[],"backlink":[]}},{"id":"scope/lifetime/explicit.md","value":{"title":"explicit","path":"scope/lifetime/explicit.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"fn/closures.md"},{"source":"error/option_unwrap/and_then.md","target":"fn/closures.md"},{"source":"error/option_unwrap/map.md","target":"fn/closures.md"},{"source":"scope/lifetime/explicit.md","target":"fn/closures.md"}]}}}');export{d as comp,c as data};
