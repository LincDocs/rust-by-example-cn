import{_ as n,e as a,k as i,o as e}from"./app-CVSWwIkE.js";const l={};function p(t,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="文档测试" tabindex="-1"><a class="header-anchor" href="#文档测试"><span>文档测试</span></a></h1><p>为 Rust 工程编写文档的主要方式是在源代码中写注释。文档注释使用 <a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="noopener noreferrer">markdown</a> 语法书写，支持代码块。Rust 很注重正确性，这些注释中的代码块也会被编译并且用作测试。</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/// 第一行是对函数的简短描述。</span></span>
<span class="line"><span>///</span></span>
<span class="line"><span>/// 接下来数行是详细文档。代码块用三个反引号开启，Rust 会隐式地在其中添加</span></span>
<span class="line"><span>/// \`fn main()\` 和 \`extern crate &lt;cratename&gt;\`。比如测试 \`doccomments\` crate：</span></span>
<span class="line"><span>///</span></span>
<span class="line"><span>/// \`\`\`</span></span>
<span class="line"><span>/// let result = doccomments::add(2, 3);</span></span>
<span class="line"><span>/// assert_eq!(result, 5);</span></span>
<span class="line"><span>/// \`\`\`</span></span>
<span class="line"><span>pub fn add(a: i32, b: i32) -&gt; i32 {</span></span>
<span class="line"><span>    a + b</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/// 文档注释通常可能带有 &quot;Examples&quot;、&quot;Panics&quot; 和 &quot;Failures&quot; 这些部分。</span></span>
<span class="line"><span>///</span></span>
<span class="line"><span>/// 下面的函数将两数相除。</span></span>
<span class="line"><span>///</span></span>
<span class="line"><span>/// # Examples</span></span>
<span class="line"><span>///</span></span>
<span class="line"><span>/// \`\`\`</span></span>
<span class="line"><span>/// let result = doccomments::div(10, 2);</span></span>
<span class="line"><span>/// assert_eq!(result, 5);</span></span>
<span class="line"><span>/// \`\`\`</span></span>
<span class="line"><span>///</span></span>
<span class="line"><span>/// # Panics</span></span>
<span class="line"><span>///</span></span>
<span class="line"><span>/// 如果第二个参数是 0，函数将会 panic。</span></span>
<span class="line"><span>///</span></span>
<span class="line"><span>/// \`\`\`rust,should_panic</span></span>
<span class="line"><span>/// // panics on division by zero</span></span>
<span class="line"><span>/// doccomments::div(10, 0);</span></span>
<span class="line"><span>/// \`\`\`</span></span>
<span class="line"><span>pub fn div(a: i32, b: i32) -&gt; i32 {</span></span>
<span class="line"><span>    if b == 0 {</span></span>
<span class="line"><span>        panic!(&quot;Divide-by-zero error&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    a / b</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些测试仍然可以通过 <code>cargo test</code> 执行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">running</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> passed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> failed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ignored</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> measured</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filtered</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Doc-tests</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> doccomments</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">running</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/lib.rs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ... ok</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/lib.rs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">21</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ... ok</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/lib.rs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ... ok</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> passed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> failed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ignored</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> measured</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filtered</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文档测试的目的" tabindex="-1"><a class="header-anchor" href="#文档测试的目的"><span>文档测试的目的</span></a></h2><p>文档测试的主要目的是作为使用函数功能的例子，这是最重要的<a href="https://rust-lang-nursery.github.io/api-guidelines/documentation.html#examples-use--not-try-not-unwrap-c-question-mark" target="_blank" rel="noopener noreferrer">指导原则</a>之一。文档测试应当可以作为完整的代码段被直接使用（很多用户会复制文档中的代码来用，所以例子要写得完善）。但使用 <code>?</code> 符号会导致编译失败，因为 <code>main</code> 函数会返回 <code>unit</code> 类型。幸运的是，我们可以在文档中隐藏几行源代码：你可以写 <code>fn try_main() -&gt; Result&lt;(), ErrorType&gt;</code> 这样的函数，把它隐藏起来，然后在隐藏的 <code>main</code> 中展开它。听起来很复杂？请看例子：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/// 在文档测试中使用隐藏的 \`try_main\`。</span></span>
<span class="line"><span>///</span></span>
<span class="line"><span>/// \`\`\`</span></span>
<span class="line"><span>/// # // 被隐藏的行以 \`#\` 开始，但它们仍然会被编译！</span></span>
<span class="line"><span>/// # fn try_main() -&gt; Result&lt;(), String&gt; { // 隐藏行包围了文档中显示的函数体</span></span>
<span class="line"><span>/// let res = try::try_div(10, 2)?;</span></span>
<span class="line"><span>/// # Ok(()) // 从 try_main 返回</span></span>
<span class="line"><span>/// # }</span></span>
<span class="line"><span>/// # fn main() { // 开始主函数，其中将展开 \`try_main\` 函数</span></span>
<span class="line"><span>/// #    try_main().unwrap(); // 调用并展开 try_main，这样出错时测试会 panic</span></span>
<span class="line"><span>/// # }</span></span>
<span class="line"><span>/// \`\`\`</span></span>
<span class="line"><span>pub fn try_div(a: i32, b: i32) -&gt; Result&lt;i32, String&gt; {</span></span>
<span class="line"><span>    if b == 0 {</span></span>
<span class="line"><span>        Err(String::from(&quot;Divide-by-zero&quot;))</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        Ok(a / b)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见</span></a></h2><ul><li>关于文档风格的 <a href="https://github.com/rust-lang/rfcs/blob/master/text/0505-api-comment-conventions.md" target="_blank" rel="noopener noreferrer">RFC505</a></li><li><a href="https://rust-lang-nursery.github.io/api-guidelines/documentation.html" target="_blank" rel="noopener noreferrer">API 指导原则</a>中关于文档的原则</li></ul>`,10)]))}const r=n(l,[["render",p],["__file","doc_testing.html.vue"]]),c=JSON.parse('{"path":"/testing/doc_testing.html","title":"文档测试","lang":"zh-CN","frontmatter":{"description":"文档测试 为 Rust 工程编写文档的主要方式是在源代码中写注释。文档注释使用 markdown 语法书写，支持代码块。Rust 很注重正确性，这些注释中的代码块也会被编译并且用作测试。 这些测试仍然可以通过 cargo test 执行： 文档测试的目的 文档测试的主要目的是作为使用函数功能的例子，这是最重要的指导原则之一。文档测试应当可以作为完整的代...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/testing/doc_testing.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"文档测试"}],["meta",{"property":"og:description","content":"文档测试 为 Rust 工程编写文档的主要方式是在源代码中写注释。文档注释使用 markdown 语法书写，支持代码块。Rust 很注重正确性，这些注释中的代码块也会被编译并且用作测试。 这些测试仍然可以通过 cargo test 执行： 文档测试的目的 文档测试的主要目的是作为使用函数功能的例子，这是最重要的指导原则之一。文档测试应当可以作为完整的代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文档测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.33,"words":698},"filePathRelative":"testing/doc_testing.md","excerpt":"\\n<p>为 Rust 工程编写文档的主要方式是在源代码中写注释。文档注释使用 <a href=\\"https://daringfireball.net/projects/markdown/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">markdown</a> 语法书写，支持代码块。Rust 很注重正确性，这些注释中的代码块也会被编译并且用作测试。</p>\\n<div class=\\"language-rust,ignore line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,ignore\\" data-title=\\"rust,ignore\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>/// 第一行是对函数的简短描述。</span></span>\\n<span class=\\"line\\"><span>///</span></span>\\n<span class=\\"line\\"><span>/// 接下来数行是详细文档。代码块用三个反引号开启，Rust 会隐式地在其中添加</span></span>\\n<span class=\\"line\\"><span>/// `fn main()` 和 `extern crate &lt;cratename&gt;`。比如测试 `doccomments` crate：</span></span>\\n<span class=\\"line\\"><span>///</span></span>\\n<span class=\\"line\\"><span>/// ```</span></span>\\n<span class=\\"line\\"><span>/// let result = doccomments::add(2, 3);</span></span>\\n<span class=\\"line\\"><span>/// assert_eq!(result, 5);</span></span>\\n<span class=\\"line\\"><span>/// ```</span></span>\\n<span class=\\"line\\"><span>pub fn add(a: i32, b: i32) -&gt; i32 {</span></span>\\n<span class=\\"line\\"><span>    a + b</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>/// 文档注释通常可能带有 \\"Examples\\"、\\"Panics\\" 和 \\"Failures\\" 这些部分。</span></span>\\n<span class=\\"line\\"><span>///</span></span>\\n<span class=\\"line\\"><span>/// 下面的函数将两数相除。</span></span>\\n<span class=\\"line\\"><span>///</span></span>\\n<span class=\\"line\\"><span>/// # Examples</span></span>\\n<span class=\\"line\\"><span>///</span></span>\\n<span class=\\"line\\"><span>/// ```</span></span>\\n<span class=\\"line\\"><span>/// let result = doccomments::div(10, 2);</span></span>\\n<span class=\\"line\\"><span>/// assert_eq!(result, 5);</span></span>\\n<span class=\\"line\\"><span>/// ```</span></span>\\n<span class=\\"line\\"><span>///</span></span>\\n<span class=\\"line\\"><span>/// # Panics</span></span>\\n<span class=\\"line\\"><span>///</span></span>\\n<span class=\\"line\\"><span>/// 如果第二个参数是 0，函数将会 panic。</span></span>\\n<span class=\\"line\\"><span>///</span></span>\\n<span class=\\"line\\"><span>/// ```rust,should_panic</span></span>\\n<span class=\\"line\\"><span>/// // panics on division by zero</span></span>\\n<span class=\\"line\\"><span>/// doccomments::div(10, 0);</span></span>\\n<span class=\\"line\\"><span>/// ```</span></span>\\n<span class=\\"line\\"><span>pub fn div(a: i32, b: i32) -&gt; i32 {</span></span>\\n<span class=\\"line\\"><span>    if b == 0 {</span></span>\\n<span class=\\"line\\"><span>        panic!(\\"Divide-by-zero error\\");</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    a / b</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"testing/doc_testing.md","value":{"title":"doc_testing","path":"testing/doc_testing.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"testing/doc_testing.md"}]}}}');export{r as comp,c as data};
