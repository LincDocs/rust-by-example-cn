import{_ as t,e as l,k as r,f as p,g as e,i as n,h as i,r as c,o as d}from"./app-CVSWwIkE.js";const o={};function u(m,s){const a=c("RouteLink");return d(),l("div",null,[s[3]||(s[3]=r(`<h1 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体"><span>结构体</span></a></h1><p>类似地，解构 <code>struct</code> 如下所示：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    struct Foo { x: (u32, u32), y: u32 }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 解构结构体的成员</span></span>
<span class="line"><span>    let foo = Foo { x: (1, 2), y: 3 };</span></span>
<span class="line"><span>    let Foo { x: (a, b), y } = foo;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;a = {}, b = {},  y = {} &quot;, a, b, y);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 可以解构结构体并重命名变量，成员顺序并不重要</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let Foo { y: i, x: j } = foo;</span></span>
<span class="line"><span>    println!(&quot;i = {:?}, j = {:?}&quot;, i, j);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 也可以忽略某些变量</span></span>
<span class="line"><span>    let Foo { y, .. } = foo;</span></span>
<span class="line"><span>    println!(&quot;y = {}&quot;, y);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 这将得到一个错误：模式中没有提及 \`x\` 字段</span></span>
<span class="line"><span>    // let Foo { y } = foo;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,4)),p("p",null,[e(a,{to:"/custom_types/structs.html"},{default:i(()=>s[0]||(s[0]=[n("结构体")])),_:1}),s[2]||(s[2]=n(", ")),e(a,{to:"/scope/borrow/ref.html"},{default:i(()=>s[1]||(s[1]=[n("ref 模式")])),_:1})])])}const b=t(o,[["render",u],["__file","destructure_structures.html.vue"]]),h=JSON.parse('{"path":"/flow_control/match/destructuring/destructure_structures.html","title":"结构体","lang":"zh-CN","frontmatter":{"description":"结构体 类似地，解构 struct 如下所示： 参见： ,","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/flow_control/match/destructuring/destructure_structures.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"结构体"}],["meta",{"property":"og:description","content":"结构体 类似地，解构 struct 如下所示： 参见： ,"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构体\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.47,"words":141},"filePathRelative":"flow_control/match/destructuring/destructure_structures.md","excerpt":"\\n<p>类似地，解构 <code>struct</code> 如下所示：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    struct Foo { x: (u32, u32), y: u32 }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 解构结构体的成员</span></span>\\n<span class=\\"line\\"><span>    let foo = Foo { x: (1, 2), y: 3 };</span></span>\\n<span class=\\"line\\"><span>    let Foo { x: (a, b), y } = foo;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"a = {}, b = {},  y = {} \\", a, b, y);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 可以解构结构体并重命名变量，成员顺序并不重要</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let Foo { y: i, x: j } = foo;</span></span>\\n<span class=\\"line\\"><span>    println!(\\"i = {:?}, j = {:?}\\", i, j);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 也可以忽略某些变量</span></span>\\n<span class=\\"line\\"><span>    let Foo { y, .. } = foo;</span></span>\\n<span class=\\"line\\"><span>    println!(\\"y = {}\\", y);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 这将得到一个错误：模式中没有提及 `x` 字段</span></span>\\n<span class=\\"line\\"><span>    // let Foo { y } = foo;</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"structs","link":"custom_types/structs.html"},{"title":"ref","link":"scope/borrow/ref.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"flow_control/match/destructuring/destructure_structures.md","value":{"title":"destructure_structures","path":"flow_control/match/destructuring/destructure_structures.md","outlink":["custom_types/structs.md","scope/borrow/ref.md"],"backlink":["SUMMARY.md"]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"scope/borrow/ref.md","value":{"title":"ref","path":"scope/borrow/ref.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"flow_control/match/destructuring/destructure_structures.md","target":"custom_types/structs.md"},{"source":"flow_control/match/destructuring/destructure_structures.md","target":"scope/borrow/ref.md"},{"source":"SUMMARY.md","target":"flow_control/match/destructuring/destructure_structures.md"}]}}}');export{b as comp,h as data};
