import{_ as n,e as a,k as i,o as e}from"./app-CVSWwIkE.js";const p={};function l(d,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="管道" tabindex="-1"><a class="header-anchor" href="#管道"><span>管道</span></a></h1><p><code>std::Child</code> 结构体代表了一个正在运行的子进程，它暴露了 <code>stdin</code>（标准输入），<code>stdout</code>（标准输出）和 <code>stderr</code>（标准错误）句柄，从而可以通过管道与所代表的进程交互。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::io::prelude::*;</span></span>
<span class="line"><span>use std::process::{Command, Stdio};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>static PANGRAM: &amp;&#39;static str =</span></span>
<span class="line"><span>&quot;the quick brown fox jumped over the lazy dog\\n&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 启动 \`wc\` 命令</span></span>
<span class="line"><span>    let process = match Command::new(&quot;wc&quot;)</span></span>
<span class="line"><span>                                .stdin(Stdio::piped())</span></span>
<span class="line"><span>                                .stdout(Stdio::piped())</span></span>
<span class="line"><span>                                .spawn() {</span></span>
<span class="line"><span>        Err(why) =&gt; panic!(&quot;couldn&#39;t spawn wc: {:?}&quot;, why),</span></span>
<span class="line"><span>        Ok(process) =&gt; process,</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 将字符串写入 \`wc\` 的 \`stdin\`。</span></span>
<span class="line"><span>    //</span></span>
<span class="line"><span>    // \`stdin\` 拥有 \`Option&lt;ChildStdin&gt;\` 类型，不过我们已经知道这个实例不为空值，</span></span>
<span class="line"><span>    // 因而可以直接 \`unwrap 它。</span></span>
<span class="line"><span>    match process.stdin.unwrap().write_all(PANGRAM.as_bytes()) {</span></span>
<span class="line"><span>        Err(why) =&gt; panic!(&quot;couldn&#39;t write to wc stdin: {:?}&quot;, why),</span></span>
<span class="line"><span>        Ok(_) =&gt; println!(&quot;sent pangram to wc&quot;),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 因为 \`stdin\` 在上面调用后就不再存活，所以它被 \`drop\` 了，管道也被关闭。</span></span>
<span class="line"><span>    //</span></span>
<span class="line"><span>    // 这点非常重要，因为否则 \`wc\` 就不会开始处理我们刚刚发送的输入。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`stdout\` 字段也拥有 \`Option&lt;ChildStdout&gt;\` 类型，所以必需解包。</span></span>
<span class="line"><span>    let mut s = String::new();</span></span>
<span class="line"><span>    match process.stdout.unwrap().read_to_string(&amp;mut s) {</span></span>
<span class="line"><span>        Err(why) =&gt; panic!(&quot;couldn&#39;t read wc stdout: {:?}&quot;, why),</span></span>
<span class="line"><span>        Ok(_) =&gt; print!(&quot;wc responded with:\\n{}&quot;, s),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const c=n(p,[["render",l],["__file","pipe.html.vue"]]),r=JSON.parse('{"path":"/std_misc/process/pipe.html","title":"管道","lang":"zh-CN","frontmatter":{"description":"管道 std::Child 结构体代表了一个正在运行的子进程，它暴露了 stdin（标准输入），stdout（标准输出）和 stderr（标准错误）句柄，从而可以通过管道与所代表的进程交互。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std_misc/process/pipe.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"管道"}],["meta",{"property":"og:description","content":"管道 std::Child 结构体代表了一个正在运行的子进程，它暴露了 stdin（标准输入），stdout（标准输出）和 stderr（标准错误）句柄，从而可以通过管道与所代表的进程交互。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"管道\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.94,"words":281},"filePathRelative":"std_misc/process/pipe.md","excerpt":"\\n<p><code>std::Child</code> 结构体代表了一个正在运行的子进程，它暴露了 <code>stdin</code>（标准输入），<code>stdout</code>（标准输出）和 <code>stderr</code>（标准错误）句柄，从而可以通过管道与所代表的进程交互。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::io::prelude::*;</span></span>\\n<span class=\\"line\\"><span>use std::process::{Command, Stdio};</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>static PANGRAM: &amp;\'static str =</span></span>\\n<span class=\\"line\\"><span>\\"the quick brown fox jumped over the lazy dog\\\\n\\";</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 启动 `wc` 命令</span></span>\\n<span class=\\"line\\"><span>    let process = match Command::new(\\"wc\\")</span></span>\\n<span class=\\"line\\"><span>                                .stdin(Stdio::piped())</span></span>\\n<span class=\\"line\\"><span>                                .stdout(Stdio::piped())</span></span>\\n<span class=\\"line\\"><span>                                .spawn() {</span></span>\\n<span class=\\"line\\"><span>        Err(why) =&gt; panic!(\\"couldn\'t spawn wc: {:?}\\", why),</span></span>\\n<span class=\\"line\\"><span>        Ok(process) =&gt; process,</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 将字符串写入 `wc` 的 `stdin`。</span></span>\\n<span class=\\"line\\"><span>    //</span></span>\\n<span class=\\"line\\"><span>    // `stdin` 拥有 `Option&lt;ChildStdin&gt;` 类型，不过我们已经知道这个实例不为空值，</span></span>\\n<span class=\\"line\\"><span>    // 因而可以直接 `unwrap 它。</span></span>\\n<span class=\\"line\\"><span>    match process.stdin.unwrap().write_all(PANGRAM.as_bytes()) {</span></span>\\n<span class=\\"line\\"><span>        Err(why) =&gt; panic!(\\"couldn\'t write to wc stdin: {:?}\\", why),</span></span>\\n<span class=\\"line\\"><span>        Ok(_) =&gt; println!(\\"sent pangram to wc\\"),</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 因为 `stdin` 在上面调用后就不再存活，所以它被 `drop` 了，管道也被关闭。</span></span>\\n<span class=\\"line\\"><span>    //</span></span>\\n<span class=\\"line\\"><span>    // 这点非常重要，因为否则 `wc` 就不会开始处理我们刚刚发送的输入。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `stdout` 字段也拥有 `Option&lt;ChildStdout&gt;` 类型，所以必需解包。</span></span>\\n<span class=\\"line\\"><span>    let mut s = String::new();</span></span>\\n<span class=\\"line\\"><span>    match process.stdout.unwrap().read_to_string(&amp;mut s) {</span></span>\\n<span class=\\"line\\"><span>        Err(why) =&gt; panic!(\\"couldn\'t read wc stdout: {:?}\\", why),</span></span>\\n<span class=\\"line\\"><span>        Ok(_) =&gt; print!(\\"wc responded with:\\\\n{}\\", s),</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std_misc/process/pipe.md","value":{"title":"pipe","path":"std_misc/process/pipe.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std_misc/process/pipe.md"}]}}}');export{c as comp,r as data};
