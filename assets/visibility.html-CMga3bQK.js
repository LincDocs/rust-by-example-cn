import{_ as s,e as a,k as i,o as l}from"./app-CY03Lsxp.js";const p={};function e(c,n){return l(),a("div",null,n[0]||(n[0]=[i(`<h1 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性"><span>可见性</span></a></h1><p>默认情况下，模块中的项拥有私有的可见性（private visibility），不过可以加上 <code>pub</code> 修饰语来重载这一行为。模块中只有公有的（public）项可以从模块外的作用域访问。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 一个名为 \`my_mod\` 的模块</span></span>
<span class="line"><span>mod my_mod {</span></span>
<span class="line"><span>    // 模块中的项默认具有私有的可见性</span></span>
<span class="line"><span>    fn private_function() {</span></span>
<span class="line"><span>        println!(&quot;called \`my_mod::private_function()\`&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 使用 \`pub\` 修饰语来改变默认可见性。</span></span>
<span class="line"><span>    pub fn function() {</span></span>
<span class="line"><span>        println!(&quot;called \`my_mod::function()\`&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 在同一模块中，项可以访问其它项，即使它是私有的。</span></span>
<span class="line"><span>    pub fn indirect_access() {</span></span>
<span class="line"><span>        print!(&quot;called \`my_mod::indirect_access()\`, that\\n&gt; &quot;);</span></span>
<span class="line"><span>        private_function();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 模块也可以嵌套</span></span>
<span class="line"><span>    pub mod nested {</span></span>
<span class="line"><span>        pub fn function() {</span></span>
<span class="line"><span>            println!(&quot;called \`my_mod::nested::function()\`&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        #[allow(dead_code)]</span></span>
<span class="line"><span>        fn private_function() {</span></span>
<span class="line"><span>            println!(&quot;called \`my_mod::nested::private_function()\`&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 使用 \`pub(in path)\` 语法定义的函数只在给定的路径中可见。</span></span>
<span class="line"><span>        // \`path\` 必须是父模块（parent module）或祖先模块（ancestor module）</span></span>
<span class="line"><span>        pub(in crate::my_mod) fn public_function_in_my_mod() {</span></span>
<span class="line"><span>            print!(&quot;called \`my_mod::nested::public_function_in_my_mod()\`, that\\n &gt; &quot;);</span></span>
<span class="line"><span>            public_function_in_nested()</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 使用 \`pub(self)\` 语法定义的函数则只在当前模块中可见。</span></span>
<span class="line"><span>        pub(self) fn public_function_in_nested() {</span></span>
<span class="line"><span>            println!(&quot;called \`my_mod::nested::public_function_in_nested&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 使用 \`pub(super)\` 语法定义的函数只在父模块中可见。</span></span>
<span class="line"><span>        pub(super) fn public_function_in_super_mod() {</span></span>
<span class="line"><span>            println!(&quot;called my_mod::nested::public_function_in_super_mod&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    pub fn call_public_function_in_my_mod() {</span></span>
<span class="line"><span>        print!(&quot;called \`my_mod::call_public_funcion_in_my_mod()\`, that\\n&gt; &quot;);</span></span>
<span class="line"><span>        nested::public_function_in_my_mod();</span></span>
<span class="line"><span>        print!(&quot;&gt; &quot;);</span></span>
<span class="line"><span>        nested::public_function_in_super_mod();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`pub(crate)\` 使得函数只在当前 crate 中可见</span></span>
<span class="line"><span>    pub(crate) fn public_function_in_crate() {</span></span>
<span class="line"><span>        println!(&quot;called \`my_mod::public_function_in_crate()&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 嵌套模块的可见性遵循相同的规则</span></span>
<span class="line"><span>    mod private_nested {</span></span>
<span class="line"><span>        #[allow(dead_code)]</span></span>
<span class="line"><span>        pub fn function() {</span></span>
<span class="line"><span>            println!(&quot;called \`my_mod::private_nested::function()\`&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn function() {</span></span>
<span class="line"><span>    println!(&quot;called \`function()\`&quot;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 模块机制消除了相同名字的项之间的歧义。</span></span>
<span class="line"><span>    function();</span></span>
<span class="line"><span>    my_mod::function();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 公有项，包括嵌套模块内的，都可以在父模块外部访问。</span></span>
<span class="line"><span>    my_mod::indirect_access();</span></span>
<span class="line"><span>    my_mod::nested::function();</span></span>
<span class="line"><span>    my_mod::call_public_function_in_my_mod();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // pub(crate) 项可以在同一个 crate 中的任何地方访问</span></span>
<span class="line"><span>    my_mod::public_function_in_crate();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // pub(in path) 项只能在指定的模块中访问</span></span>
<span class="line"><span>    // 报错！函数 \`public_function_in_my_mod\` 是私有的</span></span>
<span class="line"><span>    //my_mod::nested::public_function_in_my_mod();</span></span>
<span class="line"><span>    // 试一试 ^ 取消该行的注释</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 模块的私有项不能直接访问，即便它是嵌套在公有模块内部的</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！\`private_function\` 是私有的</span></span>
<span class="line"><span>    //my_mod::private_function();</span></span>
<span class="line"><span>    // 试一试 ^ 取消此行注释</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！\`private_function\` 是私有的</span></span>
<span class="line"><span>    //my_mod::nested::private_function();</span></span>
<span class="line"><span>    // 试一试 ^ 取消此行的注释</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！\`private_nested\` 是私有的</span></span>
<span class="line"><span>    //my_mod::private_nested::function();</span></span>
<span class="line"><span>    // 试一试 ^ 取消此行的注释</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const v=s(p,[["render",e],["__file","visibility.html.vue"]]),u=JSON.parse('{"path":"/mod/visibility.html","title":"可见性","lang":"zh-CN","frontmatter":{"description":"可见性 默认情况下，模块中的项拥有私有的可见性（private visibility），不过可以加上 pub 修饰语来重载这一行为。模块中只有公有的（public）项可以从模块外的作用域访问。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/mod/visibility.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"可见性"}],["meta",{"property":"og:description","content":"可见性 默认情况下，模块中的项拥有私有的可见性（private visibility），不过可以加上 pub 修饰语来重载这一行为。模块中只有公有的（public）项可以从模块外的作用域访问。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"可见性\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.9,"words":569},"filePathRelative":"mod/visibility.md","excerpt":"\\n<p>默认情况下，模块中的项拥有私有的可见性（private visibility），不过可以加上 <code>pub</code> 修饰语来重载这一行为。模块中只有公有的（public）项可以从模块外的作用域访问。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 一个名为 `my_mod` 的模块</span></span>\\n<span class=\\"line\\"><span>mod my_mod {</span></span>\\n<span class=\\"line\\"><span>    // 模块中的项默认具有私有的可见性</span></span>\\n<span class=\\"line\\"><span>    fn private_function() {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"called `my_mod::private_function()`\\");</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 使用 `pub` 修饰语来改变默认可见性。</span></span>\\n<span class=\\"line\\"><span>    pub fn function() {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"called `my_mod::function()`\\");</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 在同一模块中，项可以访问其它项，即使它是私有的。</span></span>\\n<span class=\\"line\\"><span>    pub fn indirect_access() {</span></span>\\n<span class=\\"line\\"><span>        print!(\\"called `my_mod::indirect_access()`, that\\\\n&gt; \\");</span></span>\\n<span class=\\"line\\"><span>        private_function();</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 模块也可以嵌套</span></span>\\n<span class=\\"line\\"><span>    pub mod nested {</span></span>\\n<span class=\\"line\\"><span>        pub fn function() {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"called `my_mod::nested::function()`\\");</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        #[allow(dead_code)]</span></span>\\n<span class=\\"line\\"><span>        fn private_function() {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"called `my_mod::nested::private_function()`\\");</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 使用 `pub(in path)` 语法定义的函数只在给定的路径中可见。</span></span>\\n<span class=\\"line\\"><span>        // `path` 必须是父模块（parent module）或祖先模块（ancestor module）</span></span>\\n<span class=\\"line\\"><span>        pub(in crate::my_mod) fn public_function_in_my_mod() {</span></span>\\n<span class=\\"line\\"><span>            print!(\\"called `my_mod::nested::public_function_in_my_mod()`, that\\\\n &gt; \\");</span></span>\\n<span class=\\"line\\"><span>            public_function_in_nested()</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 使用 `pub(self)` 语法定义的函数则只在当前模块中可见。</span></span>\\n<span class=\\"line\\"><span>        pub(self) fn public_function_in_nested() {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"called `my_mod::nested::public_function_in_nested\\");</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 使用 `pub(super)` 语法定义的函数只在父模块中可见。</span></span>\\n<span class=\\"line\\"><span>        pub(super) fn public_function_in_super_mod() {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"called my_mod::nested::public_function_in_super_mod\\");</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    pub fn call_public_function_in_my_mod() {</span></span>\\n<span class=\\"line\\"><span>        print!(\\"called `my_mod::call_public_funcion_in_my_mod()`, that\\\\n&gt; \\");</span></span>\\n<span class=\\"line\\"><span>        nested::public_function_in_my_mod();</span></span>\\n<span class=\\"line\\"><span>        print!(\\"&gt; \\");</span></span>\\n<span class=\\"line\\"><span>        nested::public_function_in_super_mod();</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `pub(crate)` 使得函数只在当前 crate 中可见</span></span>\\n<span class=\\"line\\"><span>    pub(crate) fn public_function_in_crate() {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"called `my_mod::public_function_in_crate()\\");</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 嵌套模块的可见性遵循相同的规则</span></span>\\n<span class=\\"line\\"><span>    mod private_nested {</span></span>\\n<span class=\\"line\\"><span>        #[allow(dead_code)]</span></span>\\n<span class=\\"line\\"><span>        pub fn function() {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"called `my_mod::private_nested::function()`\\");</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn function() {</span></span>\\n<span class=\\"line\\"><span>    println!(\\"called `function()`\\");</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 模块机制消除了相同名字的项之间的歧义。</span></span>\\n<span class=\\"line\\"><span>    function();</span></span>\\n<span class=\\"line\\"><span>    my_mod::function();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 公有项，包括嵌套模块内的，都可以在父模块外部访问。</span></span>\\n<span class=\\"line\\"><span>    my_mod::indirect_access();</span></span>\\n<span class=\\"line\\"><span>    my_mod::nested::function();</span></span>\\n<span class=\\"line\\"><span>    my_mod::call_public_function_in_my_mod();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // pub(crate) 项可以在同一个 crate 中的任何地方访问</span></span>\\n<span class=\\"line\\"><span>    my_mod::public_function_in_crate();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // pub(in path) 项只能在指定的模块中访问</span></span>\\n<span class=\\"line\\"><span>    // 报错！函数 `public_function_in_my_mod` 是私有的</span></span>\\n<span class=\\"line\\"><span>    //my_mod::nested::public_function_in_my_mod();</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 取消该行的注释</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 模块的私有项不能直接访问，即便它是嵌套在公有模块内部的</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 报错！`private_function` 是私有的</span></span>\\n<span class=\\"line\\"><span>    //my_mod::private_function();</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 取消此行注释</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 报错！`private_function` 是私有的</span></span>\\n<span class=\\"line\\"><span>    //my_mod::nested::private_function();</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 取消此行的注释</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 报错！`private_nested` 是私有的</span></span>\\n<span class=\\"line\\"><span>    //my_mod::private_nested::function();</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 取消此行的注释</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"split","link":"mod/split.html"}],"localMap":{"nodes":[{"id":"mod/visibility.md","value":{"title":"visibility","path":"mod/visibility.md","outlink":[],"backlink":["SUMMARY.md","mod/split.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"mod/split.md","value":{"title":"split","path":"mod/split.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"mod/visibility.md"},{"source":"mod/split.md","target":"mod/visibility.md"}]}}}');export{v as comp,u as data};
