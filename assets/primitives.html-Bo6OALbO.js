import{_ as d,e as l,k as o,f as n,i,g as a,h as t,r as c,o as p}from"./app-CY03Lsxp.js";const r={};function u(m,e){const s=c("RouteLink");return p(),l("div",null,[e[7]||(e[7]=o(`<h1 id="原生类型" tabindex="-1"><a class="header-anchor" href="#原生类型"><span>原生类型</span></a></h1><p>Rust 提供了多种原生类型（<code>primitives</code>），包括：</p><h2 id="标量类型-scalar-type" tabindex="-1"><a class="header-anchor" href="#标量类型-scalar-type"><span>标量类型（scalar type）</span></a></h2><ul><li>有符号整数（signed integers）：<code>i8</code>、<code>i16</code>、<code>i32</code>、<code>i64</code>、<code>i128</code> 和 <code>isize</code>（指针宽度）</li><li>无符号整数（unsigned integers）： <code>u8</code>、<code>u16</code>、<code>u32</code>、<code>u64</code>、<code>u128</code> 和 <code>usize</code>（指针宽度）</li><li>浮点数（floating point）： <code>f32</code>、<code>f64</code></li><li><code>char</code>（字符）：单个 Unicode 字符，如 <code>&#39;a&#39;</code>，<code>&#39;α&#39;</code> 和 <code>&#39;∞&#39;</code>（每个都是 4 字节）</li><li><code>bool</code>（布尔型）：只能是 <code>true</code> 或 <code>false</code></li><li>单元类型（unit type）：<code>()</code>。其唯一可能的值就是 <code>()</code> 这个空元组</li></ul><p>尽管单元类型的值是个元组，它却并不被认为是复合类型，因为并不包含多个值。</p><h2 id="复合类型-compound-type" tabindex="-1"><a class="header-anchor" href="#复合类型-compound-type"><span>复合类型（compound type）</span></a></h2><ul><li>数组（array）：如 <code>[1, 2, 3]</code></li><li>元组（tuple）：如 <code>(1, true)</code></li></ul><p>变量都能够显式地给出<strong>类型说明</strong>（type annotation）。数字还可以通过<strong>后缀</strong>（suffix）或<strong>默认方式</strong>来声明类型。整型默认为 <code>i32</code> 类型，浮点型默认为 <code>f64</code>类型。注意 Rust 还可以根据上下文来推断（infer）类型（译注：比如一个未声明类型整数和 <code>i64</code> 的整数相加，则该整数会自动推断为 <code>i64</code> 类型。仅当根据环境无法推断时，才按默认方式取整型数值为 <code>i32</code>，浮点数值为 <code>f64</code>）。</p><div class="language-rust,editable,ignore,mdbook-runnable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore,mdbook-runnable" data-title="rust,editable,ignore,mdbook-runnable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 变量可以给出类型说明。</span></span>
<span class="line"><span>    let logical: bool = true;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let a_float: f64 = 1.0;  // 常规说明</span></span>
<span class="line"><span>    let an_integer   = 5i32; // 后缀说明</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 否则会按默认方式决定类型。</span></span>
<span class="line"><span>    let default_float   = 3.0; // \`f64\`</span></span>
<span class="line"><span>    let default_integer = 7;   // \`i32\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 类型也可根据上下文自动推断。</span></span>
<span class="line"><span>    let mut inferred_type = 12; // 根据下一行的赋值推断为 i64 类型</span></span>
<span class="line"><span>    inferred_type = 4294967296i64;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 可变的（mutable）变量，其值可以改变。</span></span>
<span class="line"><span>    let mut mutable = 12; // Mutable \`i32\`</span></span>
<span class="line"><span>    mutable = 21;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！变量的类型并不能改变。</span></span>
<span class="line"><span>    mutable = true;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 但可以用遮蔽（shadow）来覆盖前面的变量。</span></span>
<span class="line"><span>    let mutable = true;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,10)),n("p",null,[e[3]||(e[3]=n("a",{href:"https://rustwiki.org/zh-CN/std/",target:"_blank",rel:"noopener noreferrer"},[n("code",null,"std"),i(" 库")],-1)),e[4]||(e[4]=i("、")),a(s,{to:"/variable_bindings/mut.html"},{default:t(()=>e[0]||(e[0]=[n("code",null,"mut",-1)])),_:1}),e[5]||(e[5]=i("、")),a(s,{to:"/types/inference.html"},{default:t(()=>e[1]||(e[1]=[i("类型推断")])),_:1}),e[6]||(e[6]=i(" 和 ")),a(s,{to:"/variable_bindings/scope.html"},{default:t(()=>e[2]||(e[2]=[i("变量遮蔽")])),_:1})])])}const b=d(r,[["render",u],["__file","primitives.html.vue"]]),g=JSON.parse(`{"path":"/primitives.html","title":"原生类型","lang":"zh-CN","frontmatter":{"description":"原生类型 Rust 提供了多种原生类型（primitives），包括： 标量类型（scalar type） 有符号整数（signed integers）：i8、i16、i32、i64、i128 和 isize（指针宽度） 无符号整数（unsigned integers）： u8、u16、u32、u64、u128 和 usize（指针宽度） 浮点数（fl...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/primitives.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"原生类型"}],["meta",{"property":"og:description","content":"原生类型 Rust 提供了多种原生类型（primitives），包括： 标量类型（scalar type） 有符号整数（signed integers）：i8、i16、i32、i64、i128 和 isize（指针宽度） 无符号整数（unsigned integers）： u8、u16、u32、u64、u128 和 usize（指针宽度） 浮点数（fl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原生类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"primitives.md","excerpt":"\\n<p>Rust 提供了多种原生类型（<code>primitives</code>），包括：</p>\\n<h2>标量类型（scalar type）</h2>\\n<ul>\\n<li>有符号整数（signed integers）：<code>i8</code>、<code>i16</code>、<code>i32</code>、<code>i64</code>、<code>i128</code> 和 <code>isize</code>（指针宽度）</li>\\n<li>无符号整数（unsigned integers）： <code>u8</code>、<code>u16</code>、<code>u32</code>、<code>u64</code>、<code>u128</code> 和 <code>usize</code>（指针宽度）</li>\\n<li>浮点数（floating point）： <code>f32</code>、<code>f64</code></li>\\n<li><code>char</code>（字符）：单个 Unicode 字符，如 <code>'a'</code>，<code>'α'</code> 和 <code>'∞'</code>（每个都是 4 字节）</li>\\n<li><code>bool</code>（布尔型）：只能是 <code>true</code> 或 <code>false</code></li>\\n<li>单元类型（unit type）：<code>()</code>。其唯一可能的值就是 <code>()</code> 这个空元组</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[{"title":"mut","link":"variable_bindings/mut.html"},{"title":"inference","link":"types/inference.html"},{"title":"scope","link":"variable_bindings/scope.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"std","link":"std.html"},{"title":"std_misc","link":"std_misc.html"}],"localMap":{"nodes":[{"id":"primitives.md","value":{"title":"primitives","path":"primitives.md","outlink":["variable_bindings/mut.md","types/inference.md","variable_bindings/scope.md"],"backlink":["SUMMARY.md","std.md","std_misc.md"]}},{"id":"variable_bindings/mut.md","value":{"title":"mut","path":"variable_bindings/mut.md","outlink":[],"backlink":[]}},{"id":"types/inference.md","value":{"title":"inference","path":"types/inference.md","outlink":[],"backlink":[]}},{"id":"variable_bindings/scope.md","value":{"title":"scope","path":"variable_bindings/scope.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"std.md","value":{"title":"std","path":"std.md","outlink":[],"backlink":[]}},{"id":"std_misc.md","value":{"title":"std_misc","path":"std_misc.md","outlink":[],"backlink":[]}}],"links":[{"source":"primitives.md","target":"variable_bindings/mut.md"},{"source":"primitives.md","target":"types/inference.md"},{"source":"primitives.md","target":"variable_bindings/scope.md"},{"source":"SUMMARY.md","target":"primitives.md"},{"source":"std.md","target":"primitives.md"},{"source":"std_misc.md","target":"primitives.md"}]}}}`);export{b as comp,g as data};
