import{_ as l,e as p,k as r,f as n,i as a,g as i,h as t,r as d,o as c}from"./app-CVSWwIkE.js";const o={};function u(m,s){const e=d("RouteLink");return c(),p("div",null,[s[8]||(s[8]=r(`<h1 id="约束" tabindex="-1"><a class="header-anchor" href="#约束"><span>约束</span></a></h1><p>在使用泛型时，类型参数常常必须使用 trait 作为<strong>约束</strong>（bound）来明确规定类型应实现哪些功能。例如下面的例子用到了 <code>Display</code> trait 来打印，所以它用<br><code>Display</code> 来约束 <code>T</code>，也就是说 <code>T</code> <strong>必须</strong>实现 <code>Display</code>。</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 定义一个函数 \`printer\`，接受一个类型为泛型 \`T\` 的参数，</span></span>
<span class="line"><span>// 其中 \`T\` 必须实现 \`Display\` trait。</span></span>
<span class="line"><span>fn printer&lt;T: Display&gt;(t: T) {</span></span>
<span class="line"><span>    println!(&quot;{}&quot;, t);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>约束把泛型类型限制为符合约束的类型。请看：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct S&lt;T: Display&gt;(T);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 报错！\`Vec&lt;T&gt;\` 未实现 \`Display\`。此次泛型具体化失败。</span></span>
<span class="line"><span>let s = S(vec![1]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>约束的另一个作用是泛型的实例可以访问作为约束的 trait 的方法。例如：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 这个 trait 用来实现打印标记：\`{:?}\`。</span></span>
<span class="line"><span>use std::fmt::Debug;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>trait HasArea {</span></span>
<span class="line"><span>    fn area(&amp;self) -&gt; f64;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl HasArea for Rectangle {</span></span>
<span class="line"><span>    fn area(&amp;self) -&gt; f64 { self.length * self.height }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct Rectangle { length: f64, height: f64 }</span></span>
<span class="line"><span>#[allow(dead_code)]</span></span>
<span class="line"><span>struct Triangle  { length: f64, height: f64 }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 泛型 \`T\` 必须实现 \`Debug\` 。只要满足这点，无论什么类型</span></span>
<span class="line"><span>// 都可以让下面函数正常工作。</span></span>
<span class="line"><span>fn print_debug&lt;T: Debug&gt;(t: &amp;T) {</span></span>
<span class="line"><span>    println!(&quot;{:?}&quot;, t);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// \`T\` 必须实现 \`HasArea\`。任意符合该约束的泛型的实例</span></span>
<span class="line"><span>// 都可访问 \`HasArea\` 的 \`area\` 函数</span></span>
<span class="line"><span>fn area&lt;T: HasArea&gt;(t: &amp;T) -&gt; f64 { t.area() }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let rectangle = Rectangle { length: 3.0, height: 4.0 };</span></span>
<span class="line"><span>    let _triangle = Triangle  { length: 3.0, height: 4.0 };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    print_debug(&amp;rectangle);</span></span>
<span class="line"><span>    println!(&quot;Area: {}&quot;, area(&amp;rectangle));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //print_debug(&amp;_triangle);</span></span>
<span class="line"><span>    //println!(&quot;Area: {}&quot;, area(&amp;_triangle));</span></span>
<span class="line"><span>    // ^ 试一试：取消上述语句的注释。</span></span>
<span class="line"><span>    // | 报错：未实现 \`Debug\` 或 \`HasArea\`。</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),n("p",null,[s[1]||(s[1]=a("多说一句，某些情况下也可使用 ")),i(e,{to:"/generics/where.html"},{default:t(()=>s[0]||(s[0]=[n("code",null,"where",-1)])),_:1}),s[2]||(s[2]=a(" 分句来形成约束，这拥有更好的表现力。"))]),s[9]||(s[9]=n("h3",{id:"参见",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参见"},[n("span",null,"参见：")])],-1)),n("p",null,[i(e,{to:"/hello/print.html"},{default:t(()=>s[3]||(s[3]=[n("code",null,"std::fmt",-1)])),_:1}),s[6]||(s[6]=a(", ")),i(e,{to:"/custom_types/structs.html"},{default:t(()=>s[4]||(s[4]=[n("code",null,"struct",-1)])),_:1}),s[7]||(s[7]=a(", 和 ")),i(e,{to:"/trait.html"},{default:t(()=>s[5]||(s[5]=[n("code",null,"trait",-1)])),_:1})])])}const v=l(o,[["render",u],["__file","bounds.html.vue"]]),g=JSON.parse('{"path":"/generics/bounds.html","title":"约束","lang":"zh-CN","frontmatter":{"description":"约束 在使用泛型时，类型参数常常必须使用 trait 作为约束（bound）来明确规定类型应实现哪些功能。例如下面的例子用到了 Display trait 来打印，所以它用 Display 来约束 T，也就是说 T 必须实现 Display。 约束把泛型类型限制为符合约束的类型。请看： 约束的另一个作用是泛型的实例可以访问作为约束的 trait 的方法...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/generics/bounds.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"约束"}],["meta",{"property":"og:description","content":"约束 在使用泛型时，类型参数常常必须使用 trait 作为约束（bound）来明确规定类型应实现哪些功能。例如下面的例子用到了 Display trait 来打印，所以它用 Display 来约束 T，也就是说 T 必须实现 Display。 约束把泛型类型限制为符合约束的类型。请看： 约束的另一个作用是泛型的实例可以访问作为约束的 trait 的方法..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"约束\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.41,"words":422},"filePathRelative":"generics/bounds.md","excerpt":"\\n<p>在使用泛型时，类型参数常常必须使用 trait 作为<strong>约束</strong>（bound）来明确规定类型应实现哪些功能。例如下面的例子用到了 <code>Display</code> trait 来打印，所以它用<br>\\n<code>Display</code> 来约束 <code>T</code>，也就是说 <code>T</code> <strong>必须</strong>实现 <code>Display</code>。</p>\\n<div class=\\"language-rust,ignore line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,ignore\\" data-title=\\"rust,ignore\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 定义一个函数 `printer`，接受一个类型为泛型 `T` 的参数，</span></span>\\n<span class=\\"line\\"><span>// 其中 `T` 必须实现 `Display` trait。</span></span>\\n<span class=\\"line\\"><span>fn printer&lt;T: Display&gt;(t: T) {</span></span>\\n<span class=\\"line\\"><span>    println!(\\"{}\\", t);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"where","link":"generics/where.html"},{"title":"print","link":"hello/print.html"},{"title":"structs","link":"custom_types/structs.html"},{"title":"trait","link":"trait.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"testcase_units","link":"generics/phantom/testcase_units.html"},{"title":"lifetime_bounds","link":"scope/lifetime/lifetime_bounds.html"}],"localMap":{"nodes":[{"id":"generics/bounds.md","value":{"title":"bounds","path":"generics/bounds.md","outlink":["generics/where.md","hello/print.md","custom_types/structs.md","trait.md"],"backlink":["SUMMARY.md","generics/phantom/testcase_units.md","scope/lifetime/lifetime_bounds.md"]}},{"id":"generics/where.md","value":{"title":"where","path":"generics/where.md","outlink":[],"backlink":[]}},{"id":"hello/print.md","value":{"title":"print","path":"hello/print.md","outlink":[],"backlink":[]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"trait.md","value":{"title":"trait","path":"trait.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"generics/phantom/testcase_units.md","value":{"title":"testcase_units","path":"generics/phantom/testcase_units.md","outlink":[],"backlink":[]}},{"id":"scope/lifetime/lifetime_bounds.md","value":{"title":"lifetime_bounds","path":"scope/lifetime/lifetime_bounds.md","outlink":[],"backlink":[]}}],"links":[{"source":"generics/bounds.md","target":"generics/where.md"},{"source":"generics/bounds.md","target":"hello/print.md"},{"source":"generics/bounds.md","target":"custom_types/structs.md"},{"source":"generics/bounds.md","target":"trait.md"},{"source":"SUMMARY.md","target":"generics/bounds.md"},{"source":"generics/phantom/testcase_units.md","target":"generics/bounds.md"},{"source":"scope/lifetime/lifetime_bounds.md","target":"generics/bounds.md"}]}}}');export{v as comp,g as data};
