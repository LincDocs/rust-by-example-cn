import{_ as n,e as a,k as i,o as e}from"./app-CVSWwIkE.js";const l={};function p(t,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="重载" tabindex="-1"><a class="header-anchor" href="#重载"><span>重载</span></a></h1><p>宏可以重载，从而接受不同的参数组合。在这方面，<code>macro_rules!</code> 的作用类似于匹配（match）代码块：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 根据你调用它的方式，\`test!\` 将以不同的方式来比较 \`$left\` 和 \`$right\`。</span></span>
<span class="line"><span>macro_rules! test {</span></span>
<span class="line"><span>    // 参数不需要使用逗号隔开。</span></span>
<span class="line"><span>    // 参数可以任意组合！</span></span>
<span class="line"><span>    ($left:expr; and $right:expr) =&gt; {</span></span>
<span class="line"><span>        println!(&quot;{:?} and {:?} is {:?}&quot;,</span></span>
<span class="line"><span>                 stringify!($left),</span></span>
<span class="line"><span>                 stringify!($right),</span></span>
<span class="line"><span>                 $left &amp;&amp; $right)</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>    // ^ 每个分支都必须以分号结束。</span></span>
<span class="line"><span>    ($left:expr; or $right:expr) =&gt; {</span></span>
<span class="line"><span>        println!(&quot;{:?} or {:?} is {:?}&quot;,</span></span>
<span class="line"><span>                 stringify!($left),</span></span>
<span class="line"><span>                 stringify!($right),</span></span>
<span class="line"><span>                 $left || $right)</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    test!(1i32 + 1 == 2i32; and 2i32 * 2 == 4i32);</span></span>
<span class="line"><span>    test!(true; or false);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const d=n(l,[["render",p],["__file","overload.html.vue"]]),c=JSON.parse('{"path":"/macros/overload.html","title":"重载","lang":"zh-CN","frontmatter":{"description":"重载 宏可以重载，从而接受不同的参数组合。在这方面，macro_rules! 的作用类似于匹配（match）代码块：","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/macros/overload.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"重载"}],["meta",{"property":"og:description","content":"重载 宏可以重载，从而接受不同的参数组合。在这方面，macro_rules! 的作用类似于匹配（match）代码块："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"重载\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.46,"words":139},"filePathRelative":"macros/overload.md","excerpt":"\\n<p>宏可以重载，从而接受不同的参数组合。在这方面，<code>macro_rules!</code> 的作用类似于匹配（match）代码块：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 根据你调用它的方式，`test!` 将以不同的方式来比较 `$left` 和 `$right`。</span></span>\\n<span class=\\"line\\"><span>macro_rules! test {</span></span>\\n<span class=\\"line\\"><span>    // 参数不需要使用逗号隔开。</span></span>\\n<span class=\\"line\\"><span>    // 参数可以任意组合！</span></span>\\n<span class=\\"line\\"><span>    ($left:expr; and $right:expr) =&gt; {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"{:?} and {:?} is {:?}\\",</span></span>\\n<span class=\\"line\\"><span>                 stringify!($left),</span></span>\\n<span class=\\"line\\"><span>                 stringify!($right),</span></span>\\n<span class=\\"line\\"><span>                 $left &amp;&amp; $right)</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span>    // ^ 每个分支都必须以分号结束。</span></span>\\n<span class=\\"line\\"><span>    ($left:expr; or $right:expr) =&gt; {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"{:?} or {:?} is {:?}\\",</span></span>\\n<span class=\\"line\\"><span>                 stringify!($left),</span></span>\\n<span class=\\"line\\"><span>                 stringify!($right),</span></span>\\n<span class=\\"line\\"><span>                 $left || $right)</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    test!(1i32 + 1 == 2i32; and 2i32 * 2 == 4i32);</span></span>\\n<span class=\\"line\\"><span>    test!(true; or false);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"macros/overload.md","value":{"title":"overload","path":"macros/overload.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"macros/overload.md"}]}}}');export{d as comp,c as data};
