import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(t,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="变量绑定" tabindex="-1"><a class="header-anchor" href="#变量绑定"><span>变量绑定</span></a></h1><p>Rust 通过静态类型确保类型安全。变量绑定可以在声明时说明类型，不过在多数情况下，编译器能够从上下文推导出变量的类型，从而大大减少了类型说明的工作。</p><p>使用 <code>let</code> 绑定操作可以将值（比如字面量）绑定（bind）到变量。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let an_integer = 1u32;</span></span>
<span class="line"><span>    let a_boolean = true;</span></span>
<span class="line"><span>    let unit = ();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 将 \`an_integer\` 复制到 \`copied_integer\`</span></span>
<span class="line"><span>    let copied_integer = an_integer;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;An integer: {:?}&quot;, copied_integer);</span></span>
<span class="line"><span>    println!(&quot;A boolean: {:?}&quot;, a_boolean);</span></span>
<span class="line"><span>    println!(&quot;Meet the unit value: {:?}&quot;, unit);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 编译器会对未使用的变量绑定产生警告；可以给变量名加上下划线前缀来消除警告。</span></span>
<span class="line"><span>    let _unused_variable = 3u32;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let noisy_unused_variable = 2u32;</span></span>
<span class="line"><span>    // 改正 ^ 在变量名前加上下划线以消除警告</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const r=s(l,[["render",p],["__file","variable_bindings.html.vue"]]),c=JSON.parse('{"path":"/variable_bindings.html","title":"变量绑定","lang":"zh-CN","frontmatter":{"description":"变量绑定 Rust 通过静态类型确保类型安全。变量绑定可以在声明时说明类型，不过在多数情况下，编译器能够从上下文推导出变量的类型，从而大大减少了类型说明的工作。 使用 let 绑定操作可以将值（比如字面量）绑定（bind）到变量。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/variable_bindings.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"变量绑定"}],["meta",{"property":"og:description","content":"变量绑定 Rust 通过静态类型确保类型安全。变量绑定可以在声明时说明类型，不过在多数情况下，编译器能够从上下文推导出变量的类型，从而大大减少了类型说明的工作。 使用 let 绑定操作可以将值（比如字面量）绑定（bind）到变量。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"变量绑定\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.63,"words":188},"filePathRelative":"variable_bindings.md","excerpt":"\\n<p>Rust 通过静态类型确保类型安全。变量绑定可以在声明时说明类型，不过在多数情况下，编译器能够从上下文推导出变量的类型，从而大大减少了类型说明的工作。</p>\\n<p>使用 <code>let</code> 绑定操作可以将值（比如字面量）绑定（bind）到变量。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let an_integer = 1u32;</span></span>\\n<span class=\\"line\\"><span>    let a_boolean = true;</span></span>\\n<span class=\\"line\\"><span>    let unit = ();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 将 `an_integer` 复制到 `copied_integer`</span></span>\\n<span class=\\"line\\"><span>    let copied_integer = an_integer;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"An integer: {:?}\\", copied_integer);</span></span>\\n<span class=\\"line\\"><span>    println!(\\"A boolean: {:?}\\", a_boolean);</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Meet the unit value: {:?}\\", unit);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 编译器会对未使用的变量绑定产生警告；可以给变量名加上下划线前缀来消除警告。</span></span>\\n<span class=\\"line\\"><span>    let _unused_variable = 3u32;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let noisy_unused_variable = 2u32;</span></span>\\n<span class=\\"line\\"><span>    // 改正 ^ 在变量名前加上下划线以消除警告</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"variable_bindings.md","value":{"title":"variable_bindings","path":"variable_bindings.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"variable_bindings.md"}]}}}');export{r as comp,c as data};
