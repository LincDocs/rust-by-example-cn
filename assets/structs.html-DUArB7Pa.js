import{_ as a,e as l,k as p,f as r,g as t,i as n,h as i,r as c,o as d}from"./app-CY03Lsxp.js";const u={};function o(m,s){const e=c("RouteLink");return d(),l("div",null,[s[3]||(s[3]=p(`<h1 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体"><span>结构体</span></a></h1><p>结构体（structure，缩写成 struct）有 3 种类型，使用 <code>struct</code> 关键字来创建：</p><ul><li>元组结构体（tuple struct），事实上就是具名元组而已。</li><li>经典的 <a href="https://en.wikipedia.org/wiki/Struct_(C_programming_language)" target="_blank" rel="noopener noreferrer">C 语言风格结构体</a>（C struct）。</li><li>单元结构体（unit struct），不带字段，在泛型中很有用。</li></ul><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct Person {</span></span>
<span class="line"><span>    name: String,</span></span>
<span class="line"><span>    age: u8,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 单元结构体</span></span>
<span class="line"><span>struct Unit;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 元组结构体</span></span>
<span class="line"><span>struct Pair(i32, f32);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 带有两个字段的结构体</span></span>
<span class="line"><span>struct Point {</span></span>
<span class="line"><span>    x: f32,</span></span>
<span class="line"><span>    y: f32,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 结构体可以作为另一个结构体的字段</span></span>
<span class="line"><span>#[allow(dead_code)]</span></span>
<span class="line"><span>struct Rectangle {</span></span>
<span class="line"><span>    // 可以在空间中给定左上角和右下角在空间中的位置来指定矩形。</span></span>
<span class="line"><span>    top_left: Point,</span></span>
<span class="line"><span>    bottom_right: Point,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 使用简单的写法初始化字段，并创建结构体</span></span>
<span class="line"><span>    let name = String::from(&quot;Peter&quot;);</span></span>
<span class="line"><span>    let age = 27;</span></span>
<span class="line"><span>    let peter = Person { name, age };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 以 Debug 方式打印结构体</span></span>
<span class="line"><span>    println!(&quot;{:?}&quot;, peter);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 实例化结构体 \`Point\`</span></span>
<span class="line"><span>    let point: Point = Point { x: 10.3, y: 0.4 };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 访问 point 的字段</span></span>
<span class="line"><span>    println!(&quot;point coordinates: ({}, {})&quot;, point.x, point.y);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 使用结构体更新语法创建新的 point，</span></span>
<span class="line"><span>    // 这样可以用到之前的 point 的字段</span></span>
<span class="line"><span>    let bottom_right = Point { x: 5.2, ..point };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`bottom_right.y\` 与 \`point.y\` 一样，因为这个字段就是从 \`point\` 中来的</span></span>
<span class="line"><span>    println!(&quot;second point: ({}, {})&quot;, bottom_right.x, bottom_right.y);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 使用 \`let\` 绑定来解构 point</span></span>
<span class="line"><span>    let Point { x: left_edge, y: top_edge } = point;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let _rectangle = Rectangle {</span></span>
<span class="line"><span>        // 结构体的实例化也是一个表达式</span></span>
<span class="line"><span>        top_left: Point { x: left_edge, y: top_edge },</span></span>
<span class="line"><span>        bottom_right: bottom_right,</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 实例化一个单元结构体</span></span>
<span class="line"><span>    let _unit = Unit;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 实例化一个元组结构体</span></span>
<span class="line"><span>    let pair = Pair(1, 0.1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 访问元组结构体的字段</span></span>
<span class="line"><span>    println!(&quot;pair contains {:?} and {:?}&quot;, pair.0, pair.1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 解构一个元组结构体</span></span>
<span class="line"><span>    let Pair(integer, decimal) = pair;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;pair contains {:?} and {:?}&quot;, integer, decimal);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动手试一试" tabindex="-1"><a class="header-anchor" href="#动手试一试"><span>动手试一试:</span></a></h3><ol><li>增加一个计算 <code>Rectangle</code> （长方形）面积的函数 <code>rect_area</code>（尝试使用嵌套的解构方式）。</li><li>增加一个函数 <code>square</code>，接受的参数是一个 <code>Point</code> 和一个 <code>f32</code>，并返回一个 <code>Rectangle</code>（长方形），其左上角位于该点上，长和宽都对应于 <code>f32</code>。</li></ol><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见:</span></a></h3>`,7)),r("p",null,[t(e,{to:"/attribute.html"},{default:i(()=>s[0]||(s[0]=[n("属性")])),_:1}),s[2]||(s[2]=n(" 和 ")),t(e,{to:"/flow_control/match/destructuring.html"},{default:i(()=>s[1]||(s[1]=[n("解构")])),_:1})])])}const g=a(u,[["render",o],["__file","structs.html.vue"]]),b=JSON.parse('{"path":"/custom_types/structs.html","title":"结构体","lang":"zh-CN","frontmatter":{"description":"结构体 结构体（structure，缩写成 struct）有 3 种类型，使用 struct 关键字来创建： 元组结构体（tuple struct），事实上就是具名元组而已。 经典的 C 语言风格结构体（C struct）。 单元结构体（unit struct），不带字段，在泛型中很有用。 动手试一试: 增加一个计算 Rectangle （长方形）面积...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/custom_types/structs.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"结构体"}],["meta",{"property":"og:description","content":"结构体 结构体（structure，缩写成 struct）有 3 种类型，使用 struct 关键字来创建： 元组结构体（tuple struct），事实上就是具名元组而已。 经典的 C 语言风格结构体（C struct）。 单元结构体（unit struct），不带字段，在泛型中很有用。 动手试一试: 增加一个计算 Rectangle （长方形）面积..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构体\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"custom_types/structs.md","excerpt":"\\n<p>结构体（structure，缩写成 struct）有 3 种类型，使用 <code>struct</code> 关键字来创建：</p>\\n<ul>\\n<li>元组结构体（tuple struct），事实上就是具名元组而已。</li>\\n<li>经典的 <a href=\\"https://en.wikipedia.org/wiki/Struct_(C_programming_language)\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">C 语言风格结构体</a>（C struct）。</li>\\n<li>单元结构体（unit struct），不带字段，在泛型中很有用。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[{"title":"attribute","link":"attribute.html"},{"title":"destructuring","link":"flow_control/match/destructuring.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"generics","link":"generics.html"},{"title":"bounds","link":"generics/bounds.html"},{"title":"gen_fn","link":"generics/gen_fn.html"},{"title":"gen_trait","link":"generics/gen_trait.html"},{"title":"impl","link":"generics/impl.html"},{"title":"new_types","link":"generics/new_types.html"},{"title":"phantom","link":"generics/phantom.html"},{"title":"where","link":"generics/where.html"},{"title":"print","link":"hello/print.html"},{"title":"the_problem","link":"generics/assoc_items/the_problem.html"},{"title":"testcase_units","link":"generics/phantom/testcase_units.html"},{"title":"print_debug","link":"hello/print/print_debug.html"},{"title":"print_display","link":"hello/print/print_display.html"},{"title":"struct","link":"scope/lifetime/struct.html"},{"title":"destructure_structures","link":"flow_control/match/destructuring/destructure_structures.html"},{"title":"testcase_list","link":"hello/print/print_display/testcase_list.html"}],"localMap":{"nodes":[{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":["attribute.md","flow_control/match/destructuring.md"],"backlink":["SUMMARY.md","generics.md","generics/bounds.md","generics/gen_fn.md","generics/gen_trait.md","generics/impl.md","generics/new_types.md","generics/phantom.md","generics/where.md","hello/print.md","generics/assoc_items/the_problem.md","generics/phantom/testcase_units.md","hello/print/print_debug.md","hello/print/print_display.md","scope/lifetime/struct.md","flow_control/match/destructuring/destructure_structures.md","hello/print/print_display/testcase_list.md"]}},{"id":"attribute.md","value":{"title":"attribute","path":"attribute.md","outlink":[],"backlink":[]}},{"id":"flow_control/match/destructuring.md","value":{"title":"destructuring","path":"flow_control/match/destructuring.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"generics.md","value":{"title":"generics","path":"generics.md","outlink":[],"backlink":[]}},{"id":"generics/bounds.md","value":{"title":"bounds","path":"generics/bounds.md","outlink":[],"backlink":[]}},{"id":"generics/gen_fn.md","value":{"title":"gen_fn","path":"generics/gen_fn.md","outlink":[],"backlink":[]}},{"id":"generics/gen_trait.md","value":{"title":"gen_trait","path":"generics/gen_trait.md","outlink":[],"backlink":[]}},{"id":"generics/impl.md","value":{"title":"impl","path":"generics/impl.md","outlink":[],"backlink":[]}},{"id":"generics/new_types.md","value":{"title":"new_types","path":"generics/new_types.md","outlink":[],"backlink":[]}},{"id":"generics/phantom.md","value":{"title":"phantom","path":"generics/phantom.md","outlink":[],"backlink":[]}},{"id":"generics/where.md","value":{"title":"where","path":"generics/where.md","outlink":[],"backlink":[]}},{"id":"hello/print.md","value":{"title":"print","path":"hello/print.md","outlink":[],"backlink":[]}},{"id":"generics/assoc_items/the_problem.md","value":{"title":"the_problem","path":"generics/assoc_items/the_problem.md","outlink":[],"backlink":[]}},{"id":"generics/phantom/testcase_units.md","value":{"title":"testcase_units","path":"generics/phantom/testcase_units.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_debug.md","value":{"title":"print_debug","path":"hello/print/print_debug.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display.md","value":{"title":"print_display","path":"hello/print/print_display.md","outlink":[],"backlink":[]}},{"id":"scope/lifetime/struct.md","value":{"title":"struct","path":"scope/lifetime/struct.md","outlink":[],"backlink":[]}},{"id":"flow_control/match/destructuring/destructure_structures.md","value":{"title":"destructure_structures","path":"flow_control/match/destructuring/destructure_structures.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display/testcase_list.md","value":{"title":"testcase_list","path":"hello/print/print_display/testcase_list.md","outlink":[],"backlink":[]}}],"links":[{"source":"custom_types/structs.md","target":"attribute.md"},{"source":"custom_types/structs.md","target":"flow_control/match/destructuring.md"},{"source":"SUMMARY.md","target":"custom_types/structs.md"},{"source":"generics.md","target":"custom_types/structs.md"},{"source":"generics/bounds.md","target":"custom_types/structs.md"},{"source":"generics/gen_fn.md","target":"custom_types/structs.md"},{"source":"generics/gen_trait.md","target":"custom_types/structs.md"},{"source":"generics/impl.md","target":"custom_types/structs.md"},{"source":"generics/new_types.md","target":"custom_types/structs.md"},{"source":"generics/phantom.md","target":"custom_types/structs.md"},{"source":"generics/where.md","target":"custom_types/structs.md"},{"source":"hello/print.md","target":"custom_types/structs.md"},{"source":"generics/assoc_items/the_problem.md","target":"custom_types/structs.md"},{"source":"generics/phantom/testcase_units.md","target":"custom_types/structs.md"},{"source":"hello/print/print_debug.md","target":"custom_types/structs.md"},{"source":"hello/print/print_display.md","target":"custom_types/structs.md"},{"source":"scope/lifetime/struct.md","target":"custom_types/structs.md"},{"source":"flow_control/match/destructuring/destructure_structures.md","target":"custom_types/structs.md"},{"source":"hello/print/print_display/testcase_list.md","target":"custom_types/structs.md"}]}}}');export{g as comp,b as data};
