import{_ as l,e as r,k as p,f as s,i as n,g as a,h as t,r as d,o as c}from"./app-CY03Lsxp.js";const o={};function u(m,e){const i=d("RouteLink");return c(),r("div",null,[e[6]||(e[6]=p(`<h1 id="where-分句" tabindex="-1"><a class="header-anchor" href="#where-分句"><span>where 分句</span></a></h1><p>约束也可以使用 <code>where</code> 分句来表达，它放在 <code>{</code> 的前面，而不需写在类型第一次出现之前。另外 <code>where</code> 从句可以用于任意类型的限定，而不局限于类型参数本身。</p><p><code>where</code> 在下面一些情况下很有用：</p><ul><li>当分别指定泛型的类型和约束会更清晰时：</li></ul><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>impl &lt;A: TraitB + TraitC, D: TraitE + TraitF&gt; MyTrait&lt;A, D&gt; for YourType {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用 \`where\` 从句来表达约束</span></span>
<span class="line"><span>impl &lt;A, D&gt; MyTrait&lt;A, D&gt; for YourType where</span></span>
<span class="line"><span>    A: TraitB + TraitC,</span></span>
<span class="line"><span>    D: TraitE + TraitF {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当使用 <code>where</code> 从句比正常语法更有表现力时。本例中的 <code>impl</code> 如果不用<br><code>where</code> 从句，就无法直接表达。</li></ul><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::fmt::Debug;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>trait PrintInOption {</span></span>
<span class="line"><span>    fn print_in_option(self);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 这里需要一个 \`where\` 从句，否则就要表达成 \`T: Debug\`（这样意思就变了），</span></span>
<span class="line"><span>// 或者改用另一种间接的方法。</span></span>
<span class="line"><span>impl&lt;T&gt; PrintInOption for T where</span></span>
<span class="line"><span>    Option&lt;T&gt;: Debug {</span></span>
<span class="line"><span>    // 我们要将 \`Option&lt;T&gt;: Debug\` 作为约束，因为那是要打印的内容。</span></span>
<span class="line"><span>    // 否则我们会给出错误的约束。</span></span>
<span class="line"><span>    fn print_in_option(self) {</span></span>
<span class="line"><span>        println!(&quot;{:?}&quot;, Some(self));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let vec = vec![1, 2, 3];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    vec.print_in_option();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,8)),s("p",null,[e[2]||(e[2]=n("相关的 ")),e[3]||(e[3]=s("a",{href:"https://github.com/rust-lang/rfcs/blob/master/text/0135-where.md",target:"_blank",rel:"noopener noreferrer"},"RFC",-1)),e[4]||(e[4]=n("、")),a(i,{to:"/custom_types/structs.html"},{default:t(()=>e[0]||(e[0]=[s("code",null,"struct",-1)])),_:1}),e[5]||(e[5]=n(" 和 ")),a(i,{to:"/trait.html"},{default:t(()=>e[1]||(e[1]=[s("code",null,"trait",-1)])),_:1})])])}const v=l(o,[["render",u],["__file","where.html.vue"]]),b=JSON.parse('{"path":"/generics/where.html","title":"where 分句","lang":"zh-CN","frontmatter":{"description":"where 分句 约束也可以使用 where 分句来表达，它放在 { 的前面，而不需写在类型第一次出现之前。另外 where 从句可以用于任意类型的限定，而不局限于类型参数本身。 where 在下面一些情况下很有用： 当分别指定泛型的类型和约束会更清晰时： 当使用 where 从句比正常语法更有表现力时。本例中的 impl 如果不用 where 从句，...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/generics/where.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"where 分句"}],["meta",{"property":"og:description","content":"where 分句 约束也可以使用 where 分句来表达，它放在 { 的前面，而不需写在类型第一次出现之前。另外 where 从句可以用于任意类型的限定，而不局限于类型参数本身。 where 在下面一些情况下很有用： 当分别指定泛型的类型和约束会更清晰时： 当使用 where 从句比正常语法更有表现力时。本例中的 impl 如果不用 where 从句，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"where 分句\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1,"words":299},"filePathRelative":"generics/where.md","excerpt":"\\n<p>约束也可以使用 <code>where</code> 分句来表达，它放在 <code>{</code> 的前面，而不需写在类型第一次出现之前。另外 <code>where</code> 从句可以用于任意类型的限定，而不局限于类型参数本身。</p>\\n<p><code>where</code> 在下面一些情况下很有用：</p>\\n<ul>\\n<li>当分别指定泛型的类型和约束会更清晰时：</li>\\n</ul>\\n<div class=\\"language-rust,ignore line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,ignore\\" data-title=\\"rust,ignore\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>impl &lt;A: TraitB + TraitC, D: TraitE + TraitF&gt; MyTrait&lt;A, D&gt; for YourType {}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 使用 `where` 从句来表达约束</span></span>\\n<span class=\\"line\\"><span>impl &lt;A, D&gt; MyTrait&lt;A, D&gt; for YourType where</span></span>\\n<span class=\\"line\\"><span>    A: TraitB + TraitC,</span></span>\\n<span class=\\"line\\"><span>    D: TraitE + TraitF {}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"structs","link":"custom_types/structs.html"},{"title":"trait","link":"trait.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"bounds","link":"generics/bounds.html"}],"localMap":{"nodes":[{"id":"generics/where.md","value":{"title":"where","path":"generics/where.md","outlink":["custom_types/structs.md","trait.md"],"backlink":["SUMMARY.md","generics/bounds.md"]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"trait.md","value":{"title":"trait","path":"trait.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"generics/bounds.md","value":{"title":"bounds","path":"generics/bounds.md","outlink":[],"backlink":[]}}],"links":[{"source":"generics/where.md","target":"custom_types/structs.md"},{"source":"generics/where.md","target":"trait.md"},{"source":"SUMMARY.md","target":"generics/where.md"},{"source":"generics/bounds.md","target":"generics/where.md"}]}}}');export{v as comp,b as data};
