import{_ as n,e as s,k as a,o as i}from"./app-CY03Lsxp.js";const t={};function l(p,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="字面量和运算符" tabindex="-1"><a class="header-anchor" href="#字面量和运算符"><span>字面量和运算符</span></a></h1><p>整数 <code>1</code>、浮点数 <code>1.2</code>、字符 <code>&#39;a&#39;</code>、字符串 <code>&quot;abc&quot;</code>、布尔值 <code>true</code> 和单元类型 <code>()</code> 可以用数字、文字或符号之类的 “字面量”（literal）来表示。</p><p>另外，通过加前缀 <code>0x</code>、<code>0o</code>、<code>0b</code>，数字可以用十六进制、八进制或二进制记法表示。</p><p>为了改善可读性，可以在数值字面量中插入下划线，比如：<code>1_000</code> 等同于 <code>1000</code>，<code>0.000_001</code> 等同于 <code>0.000001</code>。</p><p>我们需要把字面量的类型告诉编译器。如前面学过的，我们使用 <code>u32</code> 后缀来表明字面量是一个 32 位无符号整数，<code>i32</code> 后缀表明字面量是一个 32 位有符号整数。</p><p><a href="https://rustwiki.org/zh-CN/reference/expressions.html#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7" target="_blank" rel="noopener noreferrer">Rust</a> 提供了一系列的运算符（operator），它们的优先级和<a href="https://en.wikipedia.org/wiki/Operator_precedence#Programming_languages" target="_blank" rel="noopener noreferrer">类 C 语言</a>类似。（译注：类 C 语言包括 C/C++、Java、PHP 等语言）</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 整数相加</span></span>
<span class="line"><span>    println!(&quot;1 + 2 = {}&quot;, 1u32 + 2);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 整数相减</span></span>
<span class="line"><span>    println!(&quot;1 - 2 = {}&quot;, 1i32 - 2);</span></span>
<span class="line"><span>    // 试一试 ^ 尝试将 \`1i32\` 改为 \`1u32\`，体会为什么类型声明这么重要</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 短路求值的布尔逻辑</span></span>
<span class="line"><span>    println!(&quot;true AND false is {}&quot;, true &amp;&amp; false);</span></span>
<span class="line"><span>    println!(&quot;true OR false is {}&quot;, true || false);</span></span>
<span class="line"><span>    println!(&quot;NOT true is {}&quot;, !true);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 位运算</span></span>
<span class="line"><span>    println!(&quot;0011 AND 0101 is {:04b}&quot;, 0b0011u32 &amp; 0b0101);</span></span>
<span class="line"><span>    println!(&quot;0011 OR 0101 is {:04b}&quot;, 0b0011u32 | 0b0101);</span></span>
<span class="line"><span>    println!(&quot;0011 XOR 0101 is {:04b}&quot;, 0b0011u32 ^ 0b0101);</span></span>
<span class="line"><span>    println!(&quot;1 &lt;&lt; 5 is {}&quot;, 1u32 &lt;&lt; 5);</span></span>
<span class="line"><span>    println!(&quot;0x80 &gt;&gt; 2 is 0x{:x}&quot;, 0x80u32 &gt;&gt; 2);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 使用下划线改善数字的可读性！</span></span>
<span class="line"><span>    println!(&quot;One million is written as {}&quot;, 1_000_000u32);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const c=n(t,[["render",l],["__file","literals.html.vue"]]),r=JSON.parse(`{"path":"/primitives/literals.html","title":"字面量和运算符","lang":"zh-CN","frontmatter":{"description":"字面量和运算符 整数 1、浮点数 1.2、字符 'a'、字符串 \\"abc\\"、布尔值 true 和单元类型 () 可以用数字、文字或符号之类的 “字面量”（literal）来表示。 另外，通过加前缀 0x、0o、0b，数字可以用十六进制、八进制或二进制记法表示。 为了改善可读性，可以在数值字面量中插入下划线，比如：1_000 等同于 1000，0.000...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/primitives/literals.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"字面量和运算符"}],["meta",{"property":"og:description","content":"字面量和运算符 整数 1、浮点数 1.2、字符 'a'、字符串 \\"abc\\"、布尔值 true 和单元类型 () 可以用数字、文字或符号之类的 “字面量”（literal）来表示。 另外，通过加前缀 0x、0o、0b，数字可以用十六进制、八进制或二进制记法表示。 为了改善可读性，可以在数值字面量中插入下划线，比如：1_000 等同于 1000，0.000..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字面量和运算符\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.26,"words":378},"filePathRelative":"primitives/literals.md","excerpt":"\\n<p>整数 <code>1</code>、浮点数 <code>1.2</code>、字符 <code>'a'</code>、字符串 <code>\\"abc\\"</code>、布尔值 <code>true</code> 和单元类型 <code>()</code> 可以用数字、文字或符号之类的 “字面量”（literal）来表示。</p>\\n<p>另外，通过加前缀 <code>0x</code>、<code>0o</code>、<code>0b</code>，数字可以用十六进制、八进制或二进制记法表示。</p>\\n<p>为了改善可读性，可以在数值字面量中插入下划线，比如：<code>1_000</code> 等同于 <code>1000</code>，<code>0.000_001</code> 等同于 <code>0.000001</code>。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"primitives/literals.md","value":{"title":"literals","path":"primitives/literals.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"primitives/literals.md"}]}}}`);export{c as comp,r as data};
