import{_ as t,e as p,f as s,k as o,i as l,g as a,h as i,r as d,o as r}from"./app-CY03Lsxp.js";const c={};function m(u,n){const e=d("RouteLink");return r(),p("div",null,[n[7]||(n[7]=s("h1",{id:"注释",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#注释"},[s("span",null,"注释")])],-1)),n[8]||(n[8]=s("p",null,"注释对任何程序都不可缺少，同样 Rust 支持几种不同的注释方式。",-1)),s("ul",null,[n[5]||(n[5]=s("li",null,[s("strong",null,"普通注释"),l("，其内容将被编译器忽略掉： "),s("ul",null,[s("li",null,[s("code",null,"// 单行注释，注释内容直到行尾。")]),s("li",null,[s("code",null,"/* 块注释，注释内容一直到结束分隔符。 */")])])],-1)),s("li",null,[n[1]||(n[1]=s("strong",null,"文档注释",-1)),n[2]||(n[2]=l("，其内容将被解析成 HTML 帮助")),a(e,{to:"/meta/doc.html"},{default:i(()=>n[0]||(n[0]=[l("文档")])),_:1}),n[3]||(n[3]=l("： ")),n[4]||(n[4]=s("ul",null,[s("li",null,[s("code",null,"/// 为接下来的项生成帮助文档。")]),s("li",null,[s("code",null,"//! 为注释所属于的项（译注：如 crate、模块或函数）生成帮助文档。")])],-1))])]),n[9]||(n[9]=o(`<div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 这是行注释的例子</span></span>
<span class="line"><span>    // 注意有两个斜线在本行的开头</span></span>
<span class="line"><span>    // 在这里面的所有内容都不会被编译器读取</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // println!(&quot;Hello, world!&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 请运行一下，你看到结果了吗？现在请将上述语句的两条斜线删掉，并重新运行。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /*</span></span>
<span class="line"><span>     * 这是另外一种注释——块注释。一般而言，行注释是推荐的注释格式，</span></span>
<span class="line"><span>     * 不过块注释在临时注释大块代码特别有用。/* 块注释可以 /* 嵌套, */ */</span></span>
<span class="line"><span>     * 所以只需很少按键就可注释掉这些 main() 函数中的行。/*/*/* 自己试试！*/*/*/</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /*</span></span>
<span class="line"><span>    注意，上面的例子中纵向都有 \`*\`，这只是一种风格，实际上这并不是必须的。</span></span>
<span class="line"><span>    */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 观察块注释是如何简单地对表达式进行修改的，行注释则不能这样。</span></span>
<span class="line"><span>    // 删除注释分隔符将会改变结果。</span></span>
<span class="line"><span>    let x = 5 + /* 90 + */ 5;</span></span>
<span class="line"><span>    println!(&quot;Is \`x\` 10 or 100? x = {}&quot;, x);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见:</span></a></h3>`,2)),s("p",null,[a(e,{to:"/meta/doc.html"},{default:i(()=>n[6]||(n[6]=[l("文档注释")])),_:1})])])}const b=t(c,[["render",m],["__file","comment.html.vue"]]),h=JSON.parse('{"path":"/hello/comment.html","title":"注释","lang":"zh-CN","frontmatter":{"description":"注释 注释对任何程序都不可缺少，同样 Rust 支持几种不同的注释方式。 普通注释，其内容将被编译器忽略掉： // 单行注释，注释内容直到行尾。 /* 块注释，注释内容一直到结束分隔符。 */ 文档注释，其内容将被解析成 HTML 帮助： /// 为接下来的项生成帮助文档。 //! 为注释所属于的项（译注：如 crate、模块或函数）生成帮助文档。 参见:","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/hello/comment.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"注释"}],["meta",{"property":"og:description","content":"注释 注释对任何程序都不可缺少，同样 Rust 支持几种不同的注释方式。 普通注释，其内容将被编译器忽略掉： // 单行注释，注释内容直到行尾。 /* 块注释，注释内容一直到结束分隔符。 */ 文档注释，其内容将被解析成 HTML 帮助： /// 为接下来的项生成帮助文档。 //! 为注释所属于的项（译注：如 crate、模块或函数）生成帮助文档。 参见:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注释\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.32,"words":397},"filePathRelative":"hello/comment.md","excerpt":"\\n<p>注释对任何程序都不可缺少，同样 Rust 支持几种不同的注释方式。</p>\\n<ul>\\n<li><strong>普通注释</strong>，其内容将被编译器忽略掉：\\n<ul>\\n<li><code>// 单行注释，注释内容直到行尾。</code></li>\\n<li><code>/* 块注释，注释内容一直到结束分隔符。 */</code></li>\\n</ul>\\n</li>\\n<li><strong>文档注释</strong>，其内容将被解析成 HTML 帮助<a href=\\"/rust-by-example-cn/meta/doc.html\\" target=\\"_blank\\">文档</a>：\\n<ul>\\n<li><code>/// 为接下来的项生成帮助文档。</code></li>\\n<li><code>//! 为注释所属于的项（译注：如 crate、模块或函数）生成帮助文档。</code></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[{"title":"doc","link":"meta/doc.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"hello/comment.md","value":{"title":"comment","path":"hello/comment.md","outlink":["meta/doc.md"],"backlink":["SUMMARY.md"]}},{"id":"meta/doc.md","value":{"title":"doc","path":"meta/doc.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"hello/comment.md","target":"meta/doc.md"},{"source":"SUMMARY.md","target":"hello/comment.md"}]}}}');export{b as comp,h as data};
