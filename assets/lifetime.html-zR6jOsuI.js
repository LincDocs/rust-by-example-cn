import{_ as s,e,k as a,o as i}from"./app-CVSWwIkE.js";const l={};function t(p,n){return i(),e("div",null,n[0]||(n[0]=[a(`<h1 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h1><p><strong>生命周期</strong>（lifetime）是这样一种概念，编译器（中的借用检查器）用它来保证所有的借用都是有效的。确切地说，一个变量的生命周期在它创建的时候开始，在它销毁的时候结束。虽然生命周期和作用域经常被一起提到，但它们并不相同。</p><p>例如考虑这种情况，我们通过 <code>&amp;</code> 来借用一个变量。该借用拥有一个生命周期，此生命周期由它声明的位置决定。于是，只要该借用在出借者（lender）被销毁前结束，借用就是有效的。然而，借用的作用域则是由使用引用的位置决定的。</p><p>在下面的例子和本章节剩下的内容里，我们将看到生命周期和作用域的联系与区别。</p><blockquote><p>译注：如果代码中的生命周期示意图乱掉了，请把它复制到任何编辑器中，用等宽字体查看。为避免中文的显示问题，下面一些注释没有翻译。</p></blockquote><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 下面使用连线来标注各个变量的创建和销毁，从而显示出生命周期。</span></span>
<span class="line"><span>// \`i\` 的生命周期最长，因为它的作用域完全覆盖了 \`borrow1\` 和</span></span>
<span class="line"><span>// \`borrow2\` 的。\`borrow1\` 和 \`borrow2\` 的周期没有关联，</span></span>
<span class="line"><span>// 因为它们各不相交。</span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let i = 3; // Lifetime for \`i\` starts. ────────────────┐</span></span>
<span class="line"><span>    //                                                     │</span></span>
<span class="line"><span>    { //                                                   │</span></span>
<span class="line"><span>        let borrow1 = &amp;i; // \`borrow1\` lifetime starts. ──┐│</span></span>
<span class="line"><span>        //                                                ││</span></span>
<span class="line"><span>        println!(&quot;borrow1: {}&quot;, borrow1); //              ││</span></span>
<span class="line"><span>    } // \`borrow1 ends. ──────────────────────────────────┘│</span></span>
<span class="line"><span>    //                                                     │</span></span>
<span class="line"><span>    //                                                     │</span></span>
<span class="line"><span>    { //                                                   │</span></span>
<span class="line"><span>        let borrow2 = &amp;i; // \`borrow2\` lifetime starts. ──┐│</span></span>
<span class="line"><span>        //                                                ││</span></span>
<span class="line"><span>        println!(&quot;borrow2: {}&quot;, borrow2); //              ││</span></span>
<span class="line"><span>    } // \`borrow2\` ends. ─────────────────────────────────┘│</span></span>
<span class="line"><span>    //                                                     │</span></span>
<span class="line"><span>}   // Lifetime ends. ─────────────────────────────────────┘</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到这里没有用到名称或类型来标注生命周期，这限制了生命周期的用法，在后面我们将会看到生命周期更强大的功能。</p>`,7)]))}const o=s(l,[["render",t],["__file","lifetime.html.vue"]]),c=JSON.parse('{"path":"/scope/lifetime.html","title":"生命周期","lang":"zh-CN","frontmatter":{"description":"生命周期 生命周期（lifetime）是这样一种概念，编译器（中的借用检查器）用它来保证所有的借用都是有效的。确切地说，一个变量的生命周期在它创建的时候开始，在它销毁的时候结束。虽然生命周期和作用域经常被一起提到，但它们并不相同。 例如考虑这种情况，我们通过 & 来借用一个变量。该借用拥有一个生命周期，此生命周期由它声明的位置决定。于是，只要该借用在出...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/scope/lifetime.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"生命周期"}],["meta",{"property":"og:description","content":"生命周期 生命周期（lifetime）是这样一种概念，编译器（中的借用检查器）用它来保证所有的借用都是有效的。确切地说，一个变量的生命周期在它创建的时候开始，在它销毁的时候结束。虽然生命周期和作用域经常被一起提到，但它们并不相同。 例如考虑这种情况，我们通过 & 来借用一个变量。该借用拥有一个生命周期，此生命周期由它声明的位置决定。于是，只要该借用在出..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.51,"words":454},"filePathRelative":"scope/lifetime.md","excerpt":"\\n<p><strong>生命周期</strong>（lifetime）是这样一种概念，编译器（中的借用检查器）用它来保证所有的借用都是有效的。确切地说，一个变量的生命周期在它创建的时候开始，在它销毁的时候结束。虽然生命周期和作用域经常被一起提到，但它们并不相同。</p>\\n<p>例如考虑这种情况，我们通过 <code>&amp;</code> 来借用一个变量。该借用拥有一个生命周期，此生命周期由它声明的位置决定。于是，只要该借用在出借者（lender）被销毁前结束，借用就是有效的。然而，借用的作用域则是由使用引用的位置决定的。</p>\\n<p>在下面的例子和本章节剩下的内容里，我们将看到生命周期和作用域的联系与区别。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"scope/lifetime.md","value":{"title":"lifetime","path":"scope/lifetime.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"scope/lifetime.md"}]}}}');export{o as comp,c as data};
