import{_ as t,e as p,k as r,f as n,i as e,g as i,h as l,r as d,o as c}from"./app-CVSWwIkE.js";const o={};function u(m,s){const a=d("RouteLink");return c(),p("div",null,[s[5]||(s[5]=r(`<h1 id="trait" tabindex="-1"><a class="header-anchor" href="#trait"><span>trait</span></a></h1><p>当然 <code>trait</code> 也可以是泛型的。我们在这里定义了一个 <code>trait</code>，它把 <code>Drop</code> <code>trait</code><br> 作为泛型方法实现了，可以 <code>drop</code>（丢弃）调用者本身和一个输入参数。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 不可复制的类型。</span></span>
<span class="line"><span>struct Empty;</span></span>
<span class="line"><span>struct Null;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// \`T\` 的泛型 trait。</span></span>
<span class="line"><span>trait DoubleDrop&lt;T&gt; {</span></span>
<span class="line"><span>    // 定义一个调用者的方法，接受一个额外的参数 \`T\`，但不对它做任何事。</span></span>
<span class="line"><span>    fn double_drop(self, _: T);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 对泛型的调用者类型 \`U\` 和任何泛型类型 \`T\` 实现 \`DoubleDrop&lt;T&gt;\` 。</span></span>
<span class="line"><span>impl&lt;T, U&gt; DoubleDrop&lt;T&gt; for U {</span></span>
<span class="line"><span>    // 此方法获得两个传入参数的所有权，并释放它们。</span></span>
<span class="line"><span>    fn double_drop(self, _: T) {}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let empty = Empty;</span></span>
<span class="line"><span>    let null  = Null;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 释放 \`empty\` 和 \`null\`。</span></span>
<span class="line"><span>    empty.double_drop(null);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //empty;</span></span>
<span class="line"><span>    //null;</span></span>
<span class="line"><span>    // ^ 试一试：去掉这两行的注释。</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,4)),n("p",null,[s[2]||(s[2]=n("a",{href:"https://rustwiki.org/zh-CN/std/ops/trait.Drop.html",target:"_blank",rel:"noopener noreferrer"},[n("code",null,"Drop")],-1)),s[3]||(s[3]=e(", ")),i(a,{to:"/custom_types/structs.html"},{default:l(()=>s[0]||(s[0]=[n("code",null,"struct",-1)])),_:1}),s[4]||(s[4]=e(", 和 ")),i(a,{to:"/trait.html"},{default:l(()=>s[1]||(s[1]=[n("code",null,"trait",-1)])),_:1})])])}const b=t(o,[["render",u],["__file","gen_trait.html.vue"]]),g=JSON.parse('{"path":"/generics/gen_trait.html","title":"trait","lang":"zh-CN","frontmatter":{"description":"trait 当然 trait 也可以是泛型的。我们在这里定义了一个 trait，它把 Drop trait 作为泛型方法实现了，可以 drop（丢弃）调用者本身和一个输入参数。 参见： Drop, , 和","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/generics/gen_trait.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"trait"}],["meta",{"property":"og:description","content":"trait 当然 trait 也可以是泛型的。我们在这里定义了一个 trait，它把 Drop trait 作为泛型方法实现了，可以 drop（丢弃）调用者本身和一个输入参数。 参见： Drop, , 和"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"trait\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.71,"words":212},"filePathRelative":"generics/gen_trait.md","excerpt":"\\n<p>当然 <code>trait</code> 也可以是泛型的。我们在这里定义了一个 <code>trait</code>，它把 <code>Drop</code> <code>trait</code><br>\\n作为泛型方法实现了，可以 <code>drop</code>（丢弃）调用者本身和一个输入参数。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 不可复制的类型。</span></span>\\n<span class=\\"line\\"><span>struct Empty;</span></span>\\n<span class=\\"line\\"><span>struct Null;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// `T` 的泛型 trait。</span></span>\\n<span class=\\"line\\"><span>trait DoubleDrop&lt;T&gt; {</span></span>\\n<span class=\\"line\\"><span>    // 定义一个调用者的方法，接受一个额外的参数 `T`，但不对它做任何事。</span></span>\\n<span class=\\"line\\"><span>    fn double_drop(self, _: T);</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 对泛型的调用者类型 `U` 和任何泛型类型 `T` 实现 `DoubleDrop&lt;T&gt;` 。</span></span>\\n<span class=\\"line\\"><span>impl&lt;T, U&gt; DoubleDrop&lt;T&gt; for U {</span></span>\\n<span class=\\"line\\"><span>    // 此方法获得两个传入参数的所有权，并释放它们。</span></span>\\n<span class=\\"line\\"><span>    fn double_drop(self, _: T) {}</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let empty = Empty;</span></span>\\n<span class=\\"line\\"><span>    let null  = Null;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 释放 `empty` 和 `null`。</span></span>\\n<span class=\\"line\\"><span>    empty.double_drop(null);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    //empty;</span></span>\\n<span class=\\"line\\"><span>    //null;</span></span>\\n<span class=\\"line\\"><span>    // ^ 试一试：去掉这两行的注释。</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"structs","link":"custom_types/structs.html"},{"title":"trait","link":"trait.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"generics/gen_trait.md","value":{"title":"gen_trait","path":"generics/gen_trait.md","outlink":["custom_types/structs.md","trait.md"],"backlink":["SUMMARY.md"]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"trait.md","value":{"title":"trait","path":"trait.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"generics/gen_trait.md","target":"custom_types/structs.md"},{"source":"generics/gen_trait.md","target":"trait.md"},{"source":"SUMMARY.md","target":"generics/gen_trait.md"}]}}}');export{b as comp,g as data};
