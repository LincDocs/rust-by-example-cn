import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(t,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="特质-trait" tabindex="-1"><a class="header-anchor" href="#特质-trait"><span>特质 trait</span></a></h1><p><code>trait</code> 是对未知类型 <code>Self</code> 定义的方法集。该类型也可以访问同一个 trait 中定义的其他方法。</p><p>对任何数据类型都可以实现 trait。在下面例子中，我们定义了包含一系列方法的 <code>Animal</code>。然后针对 <code>Sheep</code> 数据类型实现 <code>Animal</code> <code>trait</code>，因而 <code>Sheep</code> 的实例可以使用 <code>Animal</code> 中的所有方法。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct Sheep { naked: bool, name: &amp;&#39;static str }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>trait Animal {</span></span>
<span class="line"><span>    // 关联函数签名；\`Self\` 表示实现者类型（implementor type）。</span></span>
<span class="line"><span>    fn new(name: &amp;&#39;static str) -&gt; Self;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 方法签名；这些方法将返回一个字符串。</span></span>
<span class="line"><span>    fn name(&amp;self) -&gt; &amp;&#39;static str;</span></span>
<span class="line"><span>    fn noise(&amp;self) -&gt; &amp;&#39;static str;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // trait 可以提供默认的方法定义。</span></span>
<span class="line"><span>    fn talk(&amp;self) {</span></span>
<span class="line"><span>        println!(&quot;{} says {}&quot;, self.name(), self.noise());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl Sheep {</span></span>
<span class="line"><span>    fn is_naked(&amp;self) -&gt; bool {</span></span>
<span class="line"><span>        self.naked</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fn shear(&amp;mut self) {</span></span>
<span class="line"><span>        if self.is_naked() {</span></span>
<span class="line"><span>            // 实现者可以使用它的 trait 方法。</span></span>
<span class="line"><span>            println!(&quot;{} is already naked...&quot;, self.name());</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            println!(&quot;{} gets a haircut!&quot;, self.name);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            self.naked = true;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 对 \`Sheep\` 实现 \`Animal\` trait。</span></span>
<span class="line"><span>impl Animal for Sheep {</span></span>
<span class="line"><span>    // \`Self\` 是实现者类型：\`Sheep\`。</span></span>
<span class="line"><span>    fn new(name: &amp;&#39;static str) -&gt; Sheep {</span></span>
<span class="line"><span>        Sheep { name: name, naked: false }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fn name(&amp;self) -&gt; &amp;&#39;static str {</span></span>
<span class="line"><span>        self.name</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fn noise(&amp;self) -&gt; &amp;&#39;static str {</span></span>
<span class="line"><span>        if self.is_naked() {</span></span>
<span class="line"><span>            &quot;baaaaah?&quot;</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            &quot;baaaaah!&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // 默认 trait 方法可以重载。</span></span>
<span class="line"><span>    fn talk(&amp;self) {</span></span>
<span class="line"><span>        // 例如我们可以增加一些安静的沉思。</span></span>
<span class="line"><span>        println!(&quot;{} pauses briefly... {}&quot;, self.name, self.noise());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 这种情况需要类型标注。</span></span>
<span class="line"><span>    let mut dolly: Sheep = Animal::new(&quot;Dolly&quot;);</span></span>
<span class="line"><span>    // 试一试 ^ 移除类型标注。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    dolly.talk();</span></span>
<span class="line"><span>    dolly.shear();</span></span>
<span class="line"><span>    dolly.talk();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const c=s(l,[["render",p],["__file","trait.html.vue"]]),r=JSON.parse('{"path":"/trait.html","title":"特质 trait","lang":"zh-CN","frontmatter":{"description":"特质 trait trait 是对未知类型 Self 定义的方法集。该类型也可以访问同一个 trait 中定义的其他方法。 对任何数据类型都可以实现 trait。在下面例子中，我们定义了包含一系列方法的 Animal。然后针对 Sheep 数据类型实现 Animal trait，因而 Sheep 的实例可以使用 Animal 中的所有方法。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/trait.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"特质 trait"}],["meta",{"property":"og:description","content":"特质 trait trait 是对未知类型 Self 定义的方法集。该类型也可以访问同一个 trait 中定义的其他方法。 对任何数据类型都可以实现 trait。在下面例子中，我们定义了包含一系列方法的 Animal。然后针对 Sheep 数据类型实现 Animal trait，因而 Sheep 的实例可以使用 Animal 中的所有方法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"特质 trait\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.11,"words":334},"filePathRelative":"trait.md","excerpt":"\\n<p><code>trait</code> 是对未知类型 <code>Self</code> 定义的方法集。该类型也可以访问同一个 trait 中定义的其他方法。</p>\\n<p>对任何数据类型都可以实现 trait。在下面例子中，我们定义了包含一系列方法的 <code>Animal</code>。然后针对 <code>Sheep</code> 数据类型实现 <code>Animal</code> <code>trait</code>，因而 <code>Sheep</code> 的实例可以使用 <code>Animal</code> 中的所有方法。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>struct Sheep { naked: bool, name: &amp;\'static str }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>trait Animal {</span></span>\\n<span class=\\"line\\"><span>    // 关联函数签名；`Self` 表示实现者类型（implementor type）。</span></span>\\n<span class=\\"line\\"><span>    fn new(name: &amp;\'static str) -&gt; Self;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 方法签名；这些方法将返回一个字符串。</span></span>\\n<span class=\\"line\\"><span>    fn name(&amp;self) -&gt; &amp;\'static str;</span></span>\\n<span class=\\"line\\"><span>    fn noise(&amp;self) -&gt; &amp;\'static str;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // trait 可以提供默认的方法定义。</span></span>\\n<span class=\\"line\\"><span>    fn talk(&amp;self) {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"{} says {}\\", self.name(), self.noise());</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl Sheep {</span></span>\\n<span class=\\"line\\"><span>    fn is_naked(&amp;self) -&gt; bool {</span></span>\\n<span class=\\"line\\"><span>        self.naked</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    fn shear(&amp;mut self) {</span></span>\\n<span class=\\"line\\"><span>        if self.is_naked() {</span></span>\\n<span class=\\"line\\"><span>            // 实现者可以使用它的 trait 方法。</span></span>\\n<span class=\\"line\\"><span>            println!(\\"{} is already naked...\\", self.name());</span></span>\\n<span class=\\"line\\"><span>        } else {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"{} gets a haircut!\\", self.name);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>            self.naked = true;</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 对 `Sheep` 实现 `Animal` trait。</span></span>\\n<span class=\\"line\\"><span>impl Animal for Sheep {</span></span>\\n<span class=\\"line\\"><span>    // `Self` 是实现者类型：`Sheep`。</span></span>\\n<span class=\\"line\\"><span>    fn new(name: &amp;\'static str) -&gt; Sheep {</span></span>\\n<span class=\\"line\\"><span>        Sheep { name: name, naked: false }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    fn name(&amp;self) -&gt; &amp;\'static str {</span></span>\\n<span class=\\"line\\"><span>        self.name</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    fn noise(&amp;self) -&gt; &amp;\'static str {</span></span>\\n<span class=\\"line\\"><span>        if self.is_naked() {</span></span>\\n<span class=\\"line\\"><span>            \\"baaaaah?\\"</span></span>\\n<span class=\\"line\\"><span>        } else {</span></span>\\n<span class=\\"line\\"><span>            \\"baaaaah!\\"</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>    </span></span>\\n<span class=\\"line\\"><span>    // 默认 trait 方法可以重载。</span></span>\\n<span class=\\"line\\"><span>    fn talk(&amp;self) {</span></span>\\n<span class=\\"line\\"><span>        // 例如我们可以增加一些安静的沉思。</span></span>\\n<span class=\\"line\\"><span>        println!(\\"{} pauses briefly... {}\\", self.name, self.noise());</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 这种情况需要类型标注。</span></span>\\n<span class=\\"line\\"><span>    let mut dolly: Sheep = Animal::new(\\"Dolly\\");</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 移除类型标注。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    dolly.talk();</span></span>\\n<span class=\\"line\\"><span>    dolly.shear();</span></span>\\n<span class=\\"line\\"><span>    dolly.talk();</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"bounds","link":"generics/bounds.html"},{"title":"gen_trait","link":"generics/gen_trait.html"},{"title":"multi_bounds","link":"generics/multi_bounds.html"},{"title":"where","link":"generics/where.html"},{"title":"print","link":"hello/print.html"},{"title":"the_problem","link":"generics/assoc_items/the_problem.html"},{"title":"testcase_empty","link":"generics/bounds/testcase_empty.html"},{"title":"testcase_units","link":"generics/phantom/testcase_units.html"},{"title":"print_display","link":"hello/print/print_display.html"},{"title":"trait","link":"scope/lifetime/trait.html"}],"localMap":{"nodes":[{"id":"trait.md","value":{"title":"trait","path":"trait.md","outlink":[],"backlink":["SUMMARY.md","generics/bounds.md","generics/gen_trait.md","generics/multi_bounds.md","generics/where.md","hello/print.md","generics/assoc_items/the_problem.md","generics/bounds/testcase_empty.md","generics/phantom/testcase_units.md","hello/print/print_display.md","scope/lifetime/trait.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"generics/bounds.md","value":{"title":"bounds","path":"generics/bounds.md","outlink":[],"backlink":[]}},{"id":"generics/gen_trait.md","value":{"title":"gen_trait","path":"generics/gen_trait.md","outlink":[],"backlink":[]}},{"id":"generics/multi_bounds.md","value":{"title":"multi_bounds","path":"generics/multi_bounds.md","outlink":[],"backlink":[]}},{"id":"generics/where.md","value":{"title":"where","path":"generics/where.md","outlink":[],"backlink":[]}},{"id":"hello/print.md","value":{"title":"print","path":"hello/print.md","outlink":[],"backlink":[]}},{"id":"generics/assoc_items/the_problem.md","value":{"title":"the_problem","path":"generics/assoc_items/the_problem.md","outlink":[],"backlink":[]}},{"id":"generics/bounds/testcase_empty.md","value":{"title":"testcase_empty","path":"generics/bounds/testcase_empty.md","outlink":[],"backlink":[]}},{"id":"generics/phantom/testcase_units.md","value":{"title":"testcase_units","path":"generics/phantom/testcase_units.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display.md","value":{"title":"print_display","path":"hello/print/print_display.md","outlink":[],"backlink":[]}},{"id":"scope/lifetime/trait.md","value":{"title":"trait","path":"scope/lifetime/trait.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"trait.md"},{"source":"generics/bounds.md","target":"trait.md"},{"source":"generics/gen_trait.md","target":"trait.md"},{"source":"generics/multi_bounds.md","target":"trait.md"},{"source":"generics/where.md","target":"trait.md"},{"source":"hello/print.md","target":"trait.md"},{"source":"generics/assoc_items/the_problem.md","target":"trait.md"},{"source":"generics/bounds/testcase_empty.md","target":"trait.md"},{"source":"generics/phantom/testcase_units.md","target":"trait.md"},{"source":"hello/print/print_display.md","target":"trait.md"},{"source":"scope/lifetime/trait.md","target":"trait.md"}]}}}');export{c as comp,r as data};
