import{_ as p,e as t,k as d,f as s,g as e,i,h as l,r as c,o as r}from"./app-CY03Lsxp.js";const u={};function m(o,n){const a=c("RouteLink");return r(),t("div",null,[n[7]||(n[7]=d(`<h1 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h1><p><code>enum</code> 关键字允许创建一个从数个不同取值中选其一的枚举类型（enumeration）。任何一个在 <code>struct</code> 中合法的取值在 <code>enum</code> 中也合法。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 该属性用于隐藏对未使用代码的警告。</span></span>
<span class="line"><span>#![allow(dead_code)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建一个 \`enum\`（枚举）来对 web 事件分类。注意变量名和类型共同指定了 \`enum\`</span></span>
<span class="line"><span>// 取值的种类：\`PageLoad\` 不等于 \`PageUnload\`，\`KeyPress(char)\` 不等于</span></span>
<span class="line"><span>// \`Paste(String)\`。各个取值不同，互相独立。</span></span>
<span class="line"><span>enum WebEvent {</span></span>
<span class="line"><span>    // 一个 \`enum\` 可以是单元结构体（称为 \`unit-like\` 或 \`unit\`），</span></span>
<span class="line"><span>    PageLoad,</span></span>
<span class="line"><span>    PageUnload,</span></span>
<span class="line"><span>    // 或者一个元组结构体，</span></span>
<span class="line"><span>    KeyPress(char),</span></span>
<span class="line"><span>    Paste(String),</span></span>
<span class="line"><span>    // 或者一个普通的结构体。</span></span>
<span class="line"><span>    Click { x: i64, y: i64 }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 此函数将一个 \`WebEvent\` enum 作为参数，无返回值。</span></span>
<span class="line"><span>fn inspect(event: WebEvent) {</span></span>
<span class="line"><span>    match event {</span></span>
<span class="line"><span>        WebEvent::PageLoad =&gt; println!(&quot;page loaded&quot;),</span></span>
<span class="line"><span>        WebEvent::PageUnload =&gt; println!(&quot;page unloaded&quot;),</span></span>
<span class="line"><span>        // 从 \`enum\` 里解构出 \`c\`。</span></span>
<span class="line"><span>        WebEvent::KeyPress(c) =&gt; println!(&quot;pressed &#39;{}&#39;.&quot;, c),</span></span>
<span class="line"><span>        WebEvent::Paste(s) =&gt; println!(&quot;pasted \\&quot;{}\\&quot;.&quot;, s),</span></span>
<span class="line"><span>        // 把 \`Click\` 解构给 \`x\` and \`y\`。</span></span>
<span class="line"><span>        WebEvent::Click { x, y } =&gt; {</span></span>
<span class="line"><span>            println!(&quot;clicked at x={}, y={}.&quot;, x, y);</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let pressed = WebEvent::KeyPress(&#39;x&#39;);</span></span>
<span class="line"><span>    // \`to_owned()\` 从一个字符串切片中创建一个具有所有权的 \`String\`。</span></span>
<span class="line"><span>    let pasted  = WebEvent::Paste(&quot;my text&quot;.to_owned());</span></span>
<span class="line"><span>    let click   = WebEvent::Click { x: 20, y: 80 };</span></span>
<span class="line"><span>    let load    = WebEvent::PageLoad;</span></span>
<span class="line"><span>    let unload  = WebEvent::PageUnload;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    inspect(pressed);</span></span>
<span class="line"><span>    inspect(pasted);</span></span>
<span class="line"><span>    inspect(click);</span></span>
<span class="line"><span>    inspect(load);</span></span>
<span class="line"><span>    inspect(unload);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名"><span>类型别名</span></a></h2><p>若使用类型别名，则可以通过其别名引用每个枚举变量。当枚举的名称太长或者太一般化，且你想要对其重命名，那么这对你会有所帮助。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>enum VeryVerboseEnumOfThingsToDoWithNumbers {</span></span>
<span class="line"><span>    Add,</span></span>
<span class="line"><span>    Subtract,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建一个类型别名</span></span>
<span class="line"><span>type Operations = VeryVerboseEnumOfThingsToDoWithNumbers;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 我们可以通过别名引用每个枚举变量，避免使用又长又不方便的枚举名字</span></span>
<span class="line"><span>    let x = Operations::Add;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最常见的情况就是在 <code>impl</code> 块中使用 <code>Self</code> 别名。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>enum VeryVerboseEnumOfThingsToDoWithNumbers {</span></span>
<span class="line"><span>    Add,</span></span>
<span class="line"><span>    Subtract,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl VeryVerboseEnumOfThingsToDoWithNumbers {</span></span>
<span class="line"><span>    fn run(&amp;self, x: i32, y: i32) -&gt; i32 {</span></span>
<span class="line"><span>        match self {</span></span>
<span class="line"><span>            Self::Add =&gt; x + y,</span></span>
<span class="line"><span>            Self::Subtract =&gt; x - y,</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该功能已在 Rust 中稳定下来， 可以阅读 <a href="https://github.com/rust-lang/rust/pull/61682/#issuecomment-502472847" target="_blank" rel="noopener noreferrer">stabilization report</a> 来了解更多有关枚举和类型别名的知识。</p><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,10)),s("p",null,[e(a,{to:"/flow_control/match.html"},{default:l(()=>n[0]||(n[0]=[s("code",null,"match",-1)])),_:1}),n[3]||(n[3]=i(", ")),e(a,{to:"/fn.html"},{default:l(()=>n[1]||(n[1]=[s("code",null,"fn",-1)])),_:1}),n[4]||(n[4]=i(", 和 ")),e(a,{to:"/std/str.html"},{default:l(()=>n[2]||(n[2]=[s("code",null,"String",-1)])),_:1}),n[5]||(n[5]=i(", ")),n[6]||(n[6]=s("a",{href:"https://rust-lang.github.io/rfcs/2338-type-alias-enum-variants.html",target:"_blank",rel:"noopener noreferrer"},"“类型别名枚举变量” 的 RFC",-1))])])}const b=p(u,[["render",m],["__file","enum.html.vue"]]),h=JSON.parse('{"path":"/custom_types/enum.html","title":"枚举","lang":"zh-CN","frontmatter":{"description":"枚举 enum 关键字允许创建一个从数个不同取值中选其一的枚举类型（enumeration）。任何一个在 struct 中合法的取值在 enum 中也合法。 类型别名 若使用类型别名，则可以通过其别名引用每个枚举变量。当枚举的名称太长或者太一般化，且你想要对其重命名，那么这对你会有所帮助。 最常见的情况就是在 impl 块中使用 Self 别名。 该功...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/custom_types/enum.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"枚举"}],["meta",{"property":"og:description","content":"枚举 enum 关键字允许创建一个从数个不同取值中选其一的枚举类型（enumeration）。任何一个在 struct 中合法的取值在 enum 中也合法。 类型别名 若使用类型别名，则可以通过其别名引用每个枚举变量。当枚举的名称太长或者太一般化，且你想要对其重命名，那么这对你会有所帮助。 最常见的情况就是在 impl 块中使用 Self 别名。 该功..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"枚举\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"custom_types/enum.md","excerpt":"\\n<p><code>enum</code> 关键字允许创建一个从数个不同取值中选其一的枚举类型（enumeration）。任何一个在 <code>struct</code> 中合法的取值在 <code>enum</code> 中也合法。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 该属性用于隐藏对未使用代码的警告。</span></span>\\n<span class=\\"line\\"><span>#![allow(dead_code)]</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 创建一个 `enum`（枚举）来对 web 事件分类。注意变量名和类型共同指定了 `enum`</span></span>\\n<span class=\\"line\\"><span>// 取值的种类：`PageLoad` 不等于 `PageUnload`，`KeyPress(char)` 不等于</span></span>\\n<span class=\\"line\\"><span>// `Paste(String)`。各个取值不同，互相独立。</span></span>\\n<span class=\\"line\\"><span>enum WebEvent {</span></span>\\n<span class=\\"line\\"><span>    // 一个 `enum` 可以是单元结构体（称为 `unit-like` 或 `unit`），</span></span>\\n<span class=\\"line\\"><span>    PageLoad,</span></span>\\n<span class=\\"line\\"><span>    PageUnload,</span></span>\\n<span class=\\"line\\"><span>    // 或者一个元组结构体，</span></span>\\n<span class=\\"line\\"><span>    KeyPress(char),</span></span>\\n<span class=\\"line\\"><span>    Paste(String),</span></span>\\n<span class=\\"line\\"><span>    // 或者一个普通的结构体。</span></span>\\n<span class=\\"line\\"><span>    Click { x: i64, y: i64 }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 此函数将一个 `WebEvent` enum 作为参数，无返回值。</span></span>\\n<span class=\\"line\\"><span>fn inspect(event: WebEvent) {</span></span>\\n<span class=\\"line\\"><span>    match event {</span></span>\\n<span class=\\"line\\"><span>        WebEvent::PageLoad =&gt; println!(\\"page loaded\\"),</span></span>\\n<span class=\\"line\\"><span>        WebEvent::PageUnload =&gt; println!(\\"page unloaded\\"),</span></span>\\n<span class=\\"line\\"><span>        // 从 `enum` 里解构出 `c`。</span></span>\\n<span class=\\"line\\"><span>        WebEvent::KeyPress(c) =&gt; println!(\\"pressed \'{}\'.\\", c),</span></span>\\n<span class=\\"line\\"><span>        WebEvent::Paste(s) =&gt; println!(\\"pasted \\\\\\"{}\\\\\\".\\", s),</span></span>\\n<span class=\\"line\\"><span>        // 把 `Click` 解构给 `x` and `y`。</span></span>\\n<span class=\\"line\\"><span>        WebEvent::Click { x, y } =&gt; {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"clicked at x={}, y={}.\\", x, y);</span></span>\\n<span class=\\"line\\"><span>        },</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let pressed = WebEvent::KeyPress(\'x\');</span></span>\\n<span class=\\"line\\"><span>    // `to_owned()` 从一个字符串切片中创建一个具有所有权的 `String`。</span></span>\\n<span class=\\"line\\"><span>    let pasted  = WebEvent::Paste(\\"my text\\".to_owned());</span></span>\\n<span class=\\"line\\"><span>    let click   = WebEvent::Click { x: 20, y: 80 };</span></span>\\n<span class=\\"line\\"><span>    let load    = WebEvent::PageLoad;</span></span>\\n<span class=\\"line\\"><span>    let unload  = WebEvent::PageUnload;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    inspect(pressed);</span></span>\\n<span class=\\"line\\"><span>    inspect(pasted);</span></span>\\n<span class=\\"line\\"><span>    inspect(click);</span></span>\\n<span class=\\"line\\"><span>    inspect(load);</span></span>\\n<span class=\\"line\\"><span>    inspect(unload);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"match","link":"flow_control/match.html"},{"title":"fn","link":"fn.html"},{"title":"str","link":"std/str.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"if_let","link":"flow_control/if_let.html"},{"title":"while_let","link":"flow_control/while_let.html"},{"title":"wrap_error","link":"error/multiple_error_types/wrap_error.html"},{"title":"binding","link":"flow_control/match/binding.html"},{"title":"testcase_units","link":"generics/phantom/testcase_units.html"},{"title":"destructure_enum","link":"flow_control/match/destructuring/destructure_enum.html"}],"localMap":{"nodes":[{"id":"custom_types/enum.md","value":{"title":"enum","path":"custom_types/enum.md","outlink":["flow_control/match.md","fn.md","std/str.md"],"backlink":["SUMMARY.md","flow_control/if_let.md","flow_control/while_let.md","error/multiple_error_types/wrap_error.md","flow_control/match/binding.md","generics/phantom/testcase_units.md","flow_control/match/destructuring/destructure_enum.md"]}},{"id":"flow_control/match.md","value":{"title":"match","path":"flow_control/match.md","outlink":[],"backlink":[]}},{"id":"fn.md","value":{"title":"fn","path":"fn.md","outlink":[],"backlink":[]}},{"id":"std/str.md","value":{"title":"str","path":"std/str.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"flow_control/if_let.md","value":{"title":"if_let","path":"flow_control/if_let.md","outlink":[],"backlink":[]}},{"id":"flow_control/while_let.md","value":{"title":"while_let","path":"flow_control/while_let.md","outlink":[],"backlink":[]}},{"id":"error/multiple_error_types/wrap_error.md","value":{"title":"wrap_error","path":"error/multiple_error_types/wrap_error.md","outlink":[],"backlink":[]}},{"id":"flow_control/match/binding.md","value":{"title":"binding","path":"flow_control/match/binding.md","outlink":[],"backlink":[]}},{"id":"generics/phantom/testcase_units.md","value":{"title":"testcase_units","path":"generics/phantom/testcase_units.md","outlink":[],"backlink":[]}},{"id":"flow_control/match/destructuring/destructure_enum.md","value":{"title":"destructure_enum","path":"flow_control/match/destructuring/destructure_enum.md","outlink":[],"backlink":[]}}],"links":[{"source":"custom_types/enum.md","target":"flow_control/match.md"},{"source":"custom_types/enum.md","target":"fn.md"},{"source":"custom_types/enum.md","target":"std/str.md"},{"source":"SUMMARY.md","target":"custom_types/enum.md"},{"source":"flow_control/if_let.md","target":"custom_types/enum.md"},{"source":"flow_control/while_let.md","target":"custom_types/enum.md"},{"source":"error/multiple_error_types/wrap_error.md","target":"custom_types/enum.md"},{"source":"flow_control/match/binding.md","target":"custom_types/enum.md"},{"source":"generics/phantom/testcase_units.md","target":"custom_types/enum.md"},{"source":"flow_control/match/destructuring/destructure_enum.md","target":"custom_types/enum.md"}]}}}');export{b as comp,h as data};
