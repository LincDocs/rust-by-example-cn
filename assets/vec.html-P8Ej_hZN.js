import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(t,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="动态数组-vector" tabindex="-1"><a class="header-anchor" href="#动态数组-vector"><span>动态数组 vector</span></a></h1><p>vector 是大小可变的数组。和 slice（切片）类似，它们的大小在编译时是未知的，但它们可以随时扩大或缩小。一个 vector 使用 3 个词来表示：一个指向数据的指针，vector 的长度，还有它的容量。此容量指明了要为这个 vector 保留多少内存。vector 的长度只要小于该容量，就可以随意增长；当需要超过这个阈值时，会给 vector 重新分配一段更大的容量。</p><div class="language-rust,editable,ignore,mdbook-runnable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore,mdbook-runnable" data-title="rust,editable,ignore,mdbook-runnable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 迭代器可以被收集到 vector 中</span></span>
<span class="line"><span>    let collected_iterator: Vec&lt;i32&gt; = (0..10).collect();</span></span>
<span class="line"><span>    println!(&quot;Collected (0..10) into: {:?}&quot;, collected_iterator);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`vec!\` 宏可用来初始化一个 vector</span></span>
<span class="line"><span>    let mut xs = vec![1i32, 2, 3];</span></span>
<span class="line"><span>    println!(&quot;Initial vector: {:?}&quot;, xs);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 在 vector 的尾部插入一个新的元素</span></span>
<span class="line"><span>    println!(&quot;Push 4 into the vector&quot;);</span></span>
<span class="line"><span>    xs.push(4);</span></span>
<span class="line"><span>    println!(&quot;Vector: {:?}&quot;, xs);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！不可变 vector 不可增长</span></span>
<span class="line"><span>    collected_iterator.push(0);</span></span>
<span class="line"><span>    // 改正 ^ 将此行注释掉</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`len\` 方法获得一个 vector 的当前大小</span></span>
<span class="line"><span>    println!(&quot;Vector size: {}&quot;, xs.len());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 下标使用中括号表示（从 0 开始）</span></span>
<span class="line"><span>    println!(&quot;Second element: {}&quot;, xs[1]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`pop\` 移除 vector 的最后一个元素并将它返回</span></span>
<span class="line"><span>    println!(&quot;Pop last element: {:?}&quot;, xs.pop());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 超出下标范围将抛出一个 panic</span></span>
<span class="line"><span>    println!(&quot;Fourth element: {}&quot;, xs[3]);</span></span>
<span class="line"><span>    // 改正 ^ 注释掉此行</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 迭代一个 \`Vector\` 很容易</span></span>
<span class="line"><span>    println!(&quot;Contents of xs:&quot;);</span></span>
<span class="line"><span>    for x in xs.iter() {</span></span>
<span class="line"><span>        println!(&quot;&gt; {}&quot;, x);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 可以在迭代 \`Vector\` 的同时，使用独立变量（\`i\`）来记录迭代次数</span></span>
<span class="line"><span>    for (i, x) in xs.iter().enumerate() {</span></span>
<span class="line"><span>        println!(&quot;In position {} we have value {}&quot;, i, x);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 多亏了 \`iter_mut\`，可变的 \`Vector\` 在迭代的同时，其中每个值都能被修改</span></span>
<span class="line"><span>    for x in xs.iter_mut() {</span></span>
<span class="line"><span>        *x *= 3;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    println!(&quot;Updated vector: {:?}&quot;, xs);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多 <code>Vec</code> 方法可以在 <a href="https://rustwiki.org/zh-CN/std/vec/" target="_blank" rel="noopener noreferrer">std::vec</a> 模块中找到。</p>`,4)]))}const r=s(l,[["render",p],["__file","vec.html.vue"]]),d=JSON.parse('{"path":"/std/vec.html","title":"动态数组 vector","lang":"zh-CN","frontmatter":{"description":"动态数组 vector vector 是大小可变的数组。和 slice（切片）类似，它们的大小在编译时是未知的，但它们可以随时扩大或缩小。一个 vector 使用 3 个词来表示：一个指向数据的指针，vector 的长度，还有它的容量。此容量指明了要为这个 vector 保留多少内存。vector 的长度只要小于该容量，就可以随意增长；当需要超过这个阈...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std/vec.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"动态数组 vector"}],["meta",{"property":"og:description","content":"动态数组 vector vector 是大小可变的数组。和 slice（切片）类似，它们的大小在编译时是未知的，但它们可以随时扩大或缩小。一个 vector 使用 3 个词来表示：一个指向数据的指针，vector 的长度，还有它的容量。此容量指明了要为这个 vector 保留多少内存。vector 的长度只要小于该容量，就可以随意增长；当需要超过这个阈..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态数组 vector\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.44,"words":431},"filePathRelative":"std/vec.md","excerpt":"\\n<p>vector 是大小可变的数组。和 slice（切片）类似，它们的大小在编译时是未知的，但它们可以随时扩大或缩小。一个 vector 使用 3 个词来表示：一个指向数据的指针，vector 的长度，还有它的容量。此容量指明了要为这个 vector 保留多少内存。vector 的长度只要小于该容量，就可以随意增长；当需要超过这个阈值时，会给 vector 重新分配一段更大的容量。</p>\\n<div class=\\"language-rust,editable,ignore,mdbook-runnable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable,ignore,mdbook-runnable\\" data-title=\\"rust,editable,ignore,mdbook-runnable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 迭代器可以被收集到 vector 中</span></span>\\n<span class=\\"line\\"><span>    let collected_iterator: Vec&lt;i32&gt; = (0..10).collect();</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Collected (0..10) into: {:?}\\", collected_iterator);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `vec!` 宏可用来初始化一个 vector</span></span>\\n<span class=\\"line\\"><span>    let mut xs = vec![1i32, 2, 3];</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Initial vector: {:?}\\", xs);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 在 vector 的尾部插入一个新的元素</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Push 4 into the vector\\");</span></span>\\n<span class=\\"line\\"><span>    xs.push(4);</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Vector: {:?}\\", xs);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 报错！不可变 vector 不可增长</span></span>\\n<span class=\\"line\\"><span>    collected_iterator.push(0);</span></span>\\n<span class=\\"line\\"><span>    // 改正 ^ 将此行注释掉</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `len` 方法获得一个 vector 的当前大小</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Vector size: {}\\", xs.len());</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 下标使用中括号表示（从 0 开始）</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Second element: {}\\", xs[1]);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `pop` 移除 vector 的最后一个元素并将它返回</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Pop last element: {:?}\\", xs.pop());</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 超出下标范围将抛出一个 panic</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Fourth element: {}\\", xs[3]);</span></span>\\n<span class=\\"line\\"><span>    // 改正 ^ 注释掉此行</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 迭代一个 `Vector` 很容易</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Contents of xs:\\");</span></span>\\n<span class=\\"line\\"><span>    for x in xs.iter() {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"&gt; {}\\", x);</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 可以在迭代 `Vector` 的同时，使用独立变量（`i`）来记录迭代次数</span></span>\\n<span class=\\"line\\"><span>    for (i, x) in xs.iter().enumerate() {</span></span>\\n<span class=\\"line\\"><span>        println!(\\"In position {} we have value {}\\", i, x);</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 多亏了 `iter_mut`，可变的 `Vector` 在迭代的同时，其中每个值都能被修改</span></span>\\n<span class=\\"line\\"><span>    for x in xs.iter_mut() {</span></span>\\n<span class=\\"line\\"><span>        *x *= 3;</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Updated vector: {:?}\\", xs);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"testcase_list","link":"hello/print/print_display/testcase_list.html"}],"localMap":{"nodes":[{"id":"std/vec.md","value":{"title":"vec","path":"std/vec.md","outlink":[],"backlink":["SUMMARY.md","hello/print/print_display/testcase_list.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display/testcase_list.md","value":{"title":"testcase_list","path":"hello/print/print_display/testcase_list.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std/vec.md"},{"source":"hello/print/print_display/testcase_list.md","target":"std/vec.md"}]}}}');export{r as comp,d as data};
