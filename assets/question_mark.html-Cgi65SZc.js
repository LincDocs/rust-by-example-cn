import{_ as s,e,k as a,o as i}from"./app-CY03Lsxp.js";const l={};function p(t,n){return i(),e("div",null,n[0]||(n[0]=[a(`<h1 id="使用-解开-option" tabindex="-1"><a class="header-anchor" href="#使用-解开-option"><span>使用 <code>?</code> 解开 <code>Option</code></span></a></h1><p>你可以使用 <code>match</code> 语句来解开 <code>Option</code>，但使用 <code>?</code> 运算符通常会更容易。如果 <code>x</code> 是 <code>Option</code>，那么若 <code>x</code> 是 <code>Some</code> ，对<code>x?</code>表达式求值将返回底层值，否则无论函数是否正在执行都将终止且返回 <code>None</code>。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn next_birthday(current_age: Option&lt;u8&gt;) -&gt; Option&lt;String&gt; {</span></span>
<span class="line"><span>    // 如果 \`current_age\` 是 \`None\`，这将返回 \`None\`。</span></span>
<span class="line"><span>    // 如果 \`current_age\` 是 \`Some\`，内部的 \`u8\` 将赋值给 \`next_age\`。</span></span>
<span class="line"><span>    let next_age: u8 = current_age?;</span></span>
<span class="line"><span>    Some(format!(&quot;Next year I will be {}&quot;, next_age))</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以将多个 <code>?</code> 链接在一起，以使代码更具可读性。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct Person {</span></span>
<span class="line"><span>    job: Option&lt;Job&gt;,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#[derive(Clone, Copy)]</span></span>
<span class="line"><span>struct Job {</span></span>
<span class="line"><span>    phone_number: Option&lt;PhoneNumber&gt;,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#[derive(Clone, Copy)]</span></span>
<span class="line"><span>struct PhoneNumber {</span></span>
<span class="line"><span>    area_code: Option&lt;u8&gt;,</span></span>
<span class="line"><span>    number: u32,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl Person {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 获取此人的工作电话号码的区号（如果存在的话）。</span></span>
<span class="line"><span>    fn work_phone_area_code(&amp;self) -&gt; Option&lt;u8&gt; {</span></span>
<span class="line"><span>        // 没有\`？\`运算符的话，这将需要很多的嵌套的 \`match\` 语句。</span></span>
<span class="line"><span>        // 这将需要更多代码——尝试自己编写一下，看看哪个更容易。</span></span>
<span class="line"><span>        self.job?.phone_number?.area_code</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let p = Person {</span></span>
<span class="line"><span>        job: Some(Job {</span></span>
<span class="line"><span>            phone_number: Some(PhoneNumber {</span></span>
<span class="line"><span>                area_code: Some(61),</span></span>
<span class="line"><span>                number: 439222222,</span></span>
<span class="line"><span>            }),</span></span>
<span class="line"><span>        }),</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    assert_eq!(p.work_phone_area_code(), Some(61));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)]))}const c=s(l,[["render",p],["__file","question_mark.html.vue"]]),r=JSON.parse('{"path":"/error/option_unwrap/question_mark.html","title":"使用 ? 解开 Option","lang":"zh-CN","frontmatter":{"description":"使用 ? 解开 Option 你可以使用 match 语句来解开 Option，但使用 ? 运算符通常会更容易。如果 x 是 Option，那么若 x 是 Some ，对x?表达式求值将返回底层值，否则无论函数是否正在执行都将终止且返回 None。 你可以将多个 ? 链接在一起，以使代码更具可读性。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/error/option_unwrap/question_mark.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"使用 ? 解开 Option"}],["meta",{"property":"og:description","content":"使用 ? 解开 Option 你可以使用 match 语句来解开 Option，但使用 ? 运算符通常会更容易。如果 x 是 Option，那么若 x 是 Some ，对x?表达式求值将返回底层值，否则无论函数是否正在执行都将终止且返回 None。 你可以将多个 ? 链接在一起，以使代码更具可读性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 ? 解开 Option\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.87,"words":261},"filePathRelative":"error/option_unwrap/question_mark.md","excerpt":"\\n<p>你可以使用 <code>match</code> 语句来解开 <code>Option</code>，但使用 <code>?</code> 运算符通常会更容易。如果 <code>x</code> 是 <code>Option</code>，那么若 <code>x</code> 是 <code>Some</code> ，对<code>x?</code>表达式求值将返回底层值，否则无论函数是否正在执行都将终止且返回 <code>None</code>。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn next_birthday(current_age: Option&lt;u8&gt;) -&gt; Option&lt;String&gt; {</span></span>\\n<span class=\\"line\\"><span>    // 如果 `current_age` 是 `None`，这将返回 `None`。</span></span>\\n<span class=\\"line\\"><span>    // 如果 `current_age` 是 `Some`，内部的 `u8` 将赋值给 `next_age`。</span></span>\\n<span class=\\"line\\"><span>    let next_age: u8 = current_age?;</span></span>\\n<span class=\\"line\\"><span>    Some(format!(\\"Next year I will be {}\\", next_age))</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"error/option_unwrap/question_mark.md","value":{"title":"question_mark","path":"error/option_unwrap/question_mark.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"error/option_unwrap/question_mark.md"}]}}}');export{c as comp,r as data};
