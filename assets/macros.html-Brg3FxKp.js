import{_ as s,e as a,k as e,o as i}from"./app-CY03Lsxp.js";const l={};function t(r,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="使用-macro-rules-来创建宏" tabindex="-1"><a class="header-anchor" href="#使用-macro-rules-来创建宏"><span>使用 <code>macro_rules!</code> 来创建宏</span></a></h1><p>Rust 提供了一个强大的宏系统，可进行元编程（metaprogramming）。你已经在前面的章节中看到，宏看起来和函数很像，只不过名称末尾有一个感叹号 <code>!</code> 。宏并不产生函数调用，而是展开成源码，并和程序的其余部分一起被编译。Rust 又有一点和 C<br> 以及其他语言都不同，那就是 Rust 的宏会展开为抽象语法树（AST，abstract syntax<br> tree），而不是像字符串预处理那样直接替换成代码，这样就不会产生无法预料的优先权错误。</p><p>宏是通过 <code>macro_rules!</code> 宏来创建的。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 这是一个简单的宏，名为 \`say_hello\`。</span></span>
<span class="line"><span>macro_rules! say_hello {</span></span>
<span class="line"><span>    // \`()\` 表示此宏不接受任何参数。</span></span>
<span class="line"><span>    () =&gt; {</span></span>
<span class="line"><span>        // 此宏将会展开成这个代码块里面的内容。</span></span>
<span class="line"><span>        println!(&quot;Hello!&quot;);</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 这个调用将会展开成 \`println!(&quot;Hello!&quot;);\`</span></span>
<span class="line"><span>    say_hello!()</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么宏是有用的？</p><ol><li>不写重复代码（DRY，Don&#39;t repeat yourself.）。很多时候你需要在一些地方针对不同<br> 的类型实现类似的功能，这时常常可以使用宏来避免重复代码（稍后详述）。</li><li>领域专用语言（DSL，domain-specific language）。宏允许你为特定的目的创造特定的<br> 语法（稍后详述）。</li><li>可变接口（variadic interface）。有时你需要能够接受不定数目参数的接口，比如<br><code>println!</code>，根据格式化字符串的不同，它需要接受任意多的参数（稍后详述）。</li></ol>`,6)]))}const c=s(l,[["render",t],["__file","macros.html.vue"]]),d=JSON.parse('{"path":"/macros.html","title":"使用 macro_rules! 来创建宏","lang":"zh-CN","frontmatter":{"description":"使用 macro_rules! 来创建宏 Rust 提供了一个强大的宏系统，可进行元编程（metaprogramming）。你已经在前面的章节中看到，宏看起来和函数很像，只不过名称末尾有一个感叹号 ! 。宏并不产生函数调用，而是展开成源码，并和程序的其余部分一起被编译。Rust 又有一点和 C 以及其他语言都不同，那就是 Rust 的宏会展开为抽象语法...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/macros.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"使用 macro_rules! 来创建宏"}],["meta",{"property":"og:description","content":"使用 macro_rules! 来创建宏 Rust 提供了一个强大的宏系统，可进行元编程（metaprogramming）。你已经在前面的章节中看到，宏看起来和函数很像，只不过名称末尾有一个感叹号 ! 。宏并不产生函数调用，而是展开成源码，并和程序的其余部分一起被编译。Rust 又有一点和 C 以及其他语言都不同，那就是 Rust 的宏会展开为抽象语法..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 macro_rules! 来创建宏\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.29,"words":386},"filePathRelative":"macros.md","excerpt":"\\n<p>Rust 提供了一个强大的宏系统，可进行元编程（metaprogramming）。你已经在前面的章节中看到，宏看起来和函数很像，只不过名称末尾有一个感叹号 <code>!</code> 。宏并不产生函数调用，而是展开成源码，并和程序的其余部分一起被编译。Rust 又有一点和 C<br>\\n以及其他语言都不同，那就是 Rust 的宏会展开为抽象语法树（AST，abstract syntax<br>\\ntree），而不是像字符串预处理那样直接替换成代码，这样就不会产生无法预料的优先权错误。</p>\\n<p>宏是通过 <code>macro_rules!</code> 宏来创建的。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 这是一个简单的宏，名为 `say_hello`。</span></span>\\n<span class=\\"line\\"><span>macro_rules! say_hello {</span></span>\\n<span class=\\"line\\"><span>    // `()` 表示此宏不接受任何参数。</span></span>\\n<span class=\\"line\\"><span>    () =&gt; {</span></span>\\n<span class=\\"line\\"><span>        // 此宏将会展开成这个代码块里面的内容。</span></span>\\n<span class=\\"line\\"><span>        println!(\\"Hello!\\");</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 这个调用将会展开成 `println!(\\"Hello!\\");`</span></span>\\n<span class=\\"line\\"><span>    say_hello!()</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"hello","link":"hello.html"},{"title":"cfg","link":"attribute/cfg.html"},{"title":"print","link":"hello/print.html"},{"title":"unit_testing","link":"testing/unit_testing.html"},{"title":"print_display","link":"hello/print/print_display.html"}],"localMap":{"nodes":[{"id":"macros.md","value":{"title":"macros","path":"macros.md","outlink":[],"backlink":["SUMMARY.md","hello.md","attribute/cfg.md","hello/print.md","testing/unit_testing.md","hello/print/print_display.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"hello.md","value":{"title":"hello","path":"hello.md","outlink":[],"backlink":[]}},{"id":"attribute/cfg.md","value":{"title":"cfg","path":"attribute/cfg.md","outlink":[],"backlink":[]}},{"id":"hello/print.md","value":{"title":"print","path":"hello/print.md","outlink":[],"backlink":[]}},{"id":"testing/unit_testing.md","value":{"title":"unit_testing","path":"testing/unit_testing.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display.md","value":{"title":"print_display","path":"hello/print/print_display.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"macros.md"},{"source":"hello.md","target":"macros.md"},{"source":"attribute/cfg.md","target":"macros.md"},{"source":"hello/print.md","target":"macros.md"},{"source":"testing/unit_testing.md","target":"macros.md"},{"source":"hello/print/print_display.md","target":"macros.md"}]}}}');export{c as comp,d as data};
