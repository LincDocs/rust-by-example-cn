import{_ as l,e as p,k as t,f as d,g as i,i as s,h as e,r as c,o}from"./app-CY03Lsxp.js";const r={};function v(m,n){const a=c("RouteLink");return o(),p("div",null,[n[3]||(n[3]=t(`<h1 id="结构体的可见性" tabindex="-1"><a class="header-anchor" href="#结构体的可见性"><span>结构体的可见性</span></a></h1><p>结构体的字段也是一个可见性的层次。字段默认拥有私有的可见性，也可以加上 <code>pub</code> 修饰语来重载该行为。只有从结构体被定义的模块之外访问其字段时，这个可见性才会起作用，其意义是隐藏信息（即封装，encapsulation）。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mod my {</span></span>
<span class="line"><span>    // 一个公有的结构体，带有一个公有的字段（类型为泛型 \`T\`）</span></span>
<span class="line"><span>    pub struct OpenBox&lt;T&gt; {</span></span>
<span class="line"><span>        pub contents: T,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 一个公有的结构体，带有一个私有的字段（类型为泛型 \`T\`）    </span></span>
<span class="line"><span>    #[allow(dead_code)]</span></span>
<span class="line"><span>    pub struct ClosedBox&lt;T&gt; {</span></span>
<span class="line"><span>        contents: T,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    impl&lt;T&gt; ClosedBox&lt;T&gt; {</span></span>
<span class="line"><span>        // 一个公有的构造器方法</span></span>
<span class="line"><span>        pub fn new(contents: T) -&gt; ClosedBox&lt;T&gt; {</span></span>
<span class="line"><span>            ClosedBox {</span></span>
<span class="line"><span>                contents: contents,</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 带有公有字段的公有结构体，可以像平常一样构造</span></span>
<span class="line"><span>    let open_box = my::OpenBox { contents: &quot;public information&quot; };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 并且它们的字段可以正常访问到。</span></span>
<span class="line"><span>    println!(&quot;The open box contains: {}&quot;, open_box.contents);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 带有私有字段的公有结构体不能使用字段名来构造。</span></span>
<span class="line"><span>    // 报错！\`ClosedBox\` 含有私有字段。</span></span>
<span class="line"><span>    //let closed_box = my::ClosedBox { contents: &quot;classified information&quot; };</span></span>
<span class="line"><span>    // 试一试 ^ 取消此行注释</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 不过带有私有字段的结构体可以使用公有的构造器来创建。</span></span>
<span class="line"><span>    let _closed_box = my::ClosedBox::new(&quot;classified information&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 并且一个结构体中的私有字段不能访问到。</span></span>
<span class="line"><span>    // 报错！\`content\` 字段是私有的。</span></span>
<span class="line"><span>    //println!(&quot;The closed box contains: {}&quot;, _closed_box.contents);</span></span>
<span class="line"><span>    // 试一试 ^ 取消此行注释    </span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,4)),d("p",null,[i(a,{to:"/generics.html"},{default:e(()=>n[0]||(n[0]=[s("泛型")])),_:1}),n[2]||(n[2]=s(" 和 ")),i(a,{to:"/fn/methods.html"},{default:e(()=>n[1]||(n[1]=[s("方法")])),_:1})])])}const b=l(r,[["render",v],["__file","struct_visibility.html.vue"]]),h=JSON.parse('{"path":"/mod/struct_visibility.html","title":"结构体的可见性","lang":"zh-CN","frontmatter":{"description":"结构体的可见性 结构体的字段也是一个可见性的层次。字段默认拥有私有的可见性，也可以加上 pub 修饰语来重载该行为。只有从结构体被定义的模块之外访问其字段时，这个可见性才会起作用，其意义是隐藏信息（即封装，encapsulation）。 参见： 和","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/mod/struct_visibility.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"结构体的可见性"}],["meta",{"property":"og:description","content":"结构体的可见性 结构体的字段也是一个可见性的层次。字段默认拥有私有的可见性，也可以加上 pub 修饰语来重载该行为。只有从结构体被定义的模块之外访问其字段时，这个可见性才会起作用，其意义是隐藏信息（即封装，encapsulation）。 参见： 和"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构体的可见性\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.26,"words":377},"filePathRelative":"mod/struct_visibility.md","excerpt":"\\n<p>结构体的字段也是一个可见性的层次。字段默认拥有私有的可见性，也可以加上 <code>pub</code> 修饰语来重载该行为。只有从结构体被定义的模块之外访问其字段时，这个可见性才会起作用，其意义是隐藏信息（即封装，encapsulation）。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>mod my {</span></span>\\n<span class=\\"line\\"><span>    // 一个公有的结构体，带有一个公有的字段（类型为泛型 `T`）</span></span>\\n<span class=\\"line\\"><span>    pub struct OpenBox&lt;T&gt; {</span></span>\\n<span class=\\"line\\"><span>        pub contents: T,</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 一个公有的结构体，带有一个私有的字段（类型为泛型 `T`）    </span></span>\\n<span class=\\"line\\"><span>    #[allow(dead_code)]</span></span>\\n<span class=\\"line\\"><span>    pub struct ClosedBox&lt;T&gt; {</span></span>\\n<span class=\\"line\\"><span>        contents: T,</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    impl&lt;T&gt; ClosedBox&lt;T&gt; {</span></span>\\n<span class=\\"line\\"><span>        // 一个公有的构造器方法</span></span>\\n<span class=\\"line\\"><span>        pub fn new(contents: T) -&gt; ClosedBox&lt;T&gt; {</span></span>\\n<span class=\\"line\\"><span>            ClosedBox {</span></span>\\n<span class=\\"line\\"><span>                contents: contents,</span></span>\\n<span class=\\"line\\"><span>            }</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 带有公有字段的公有结构体，可以像平常一样构造</span></span>\\n<span class=\\"line\\"><span>    let open_box = my::OpenBox { contents: \\"public information\\" };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 并且它们的字段可以正常访问到。</span></span>\\n<span class=\\"line\\"><span>    println!(\\"The open box contains: {}\\", open_box.contents);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 带有私有字段的公有结构体不能使用字段名来构造。</span></span>\\n<span class=\\"line\\"><span>    // 报错！`ClosedBox` 含有私有字段。</span></span>\\n<span class=\\"line\\"><span>    //let closed_box = my::ClosedBox { contents: \\"classified information\\" };</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 取消此行注释</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 不过带有私有字段的结构体可以使用公有的构造器来创建。</span></span>\\n<span class=\\"line\\"><span>    let _closed_box = my::ClosedBox::new(\\"classified information\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 并且一个结构体中的私有字段不能访问到。</span></span>\\n<span class=\\"line\\"><span>    // 报错！`content` 字段是私有的。</span></span>\\n<span class=\\"line\\"><span>    //println!(\\"The closed box contains: {}\\", _closed_box.contents);</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 取消此行注释    </span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"generics","link":"generics.html"},{"title":"methods","link":"fn/methods.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"mod/struct_visibility.md","value":{"title":"struct_visibility","path":"mod/struct_visibility.md","outlink":["generics.md","fn/methods.md"],"backlink":["SUMMARY.md"]}},{"id":"generics.md","value":{"title":"generics","path":"generics.md","outlink":[],"backlink":[]}},{"id":"fn/methods.md","value":{"title":"methods","path":"fn/methods.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"mod/struct_visibility.md","target":"generics.md"},{"source":"mod/struct_visibility.md","target":"fn/methods.md"},{"source":"SUMMARY.md","target":"mod/struct_visibility.md"}]}}}');export{b as comp,h as data};
