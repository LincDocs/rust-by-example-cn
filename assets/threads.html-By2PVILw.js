import{_ as n,e as a,k as e,o as i}from"./app-CY03Lsxp.js";const l={};function p(d,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h1><p>Rust 通过 <code>spawn</code> 函数提供了创建本地操作系统（native OS）线程的机制，该函数的参数是一个通过值捕获变量的闭包（moving closure）。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::thread;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>static NTHREADS: i32 = 10;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 这是主（\`main\`）线程</span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 提供一个 vector 来存放所创建的子线程（children）。</span></span>
<span class="line"><span>    let mut children = vec![];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for i in 0..NTHREADS {</span></span>
<span class="line"><span>        // 启动（spin up）另一个线程</span></span>
<span class="line"><span>        children.push(thread::spawn(move || {</span></span>
<span class="line"><span>            println!(&quot;this is thread number {}&quot;, i)</span></span>
<span class="line"><span>        }));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for child in children {</span></span>
<span class="line"><span>        // 等待线程结束。返回一个结果。</span></span>
<span class="line"><span>        let _ = child.join();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些线程由操作系统调度（schedule）。</p>`,4)]))}const c=n(l,[["render",p],["__file","threads.html.vue"]]),r=JSON.parse('{"path":"/std_misc/threads.html","title":"线程","lang":"zh-CN","frontmatter":{"description":"线程 Rust 通过 spawn 函数提供了创建本地操作系统（native OS）线程的机制，该函数的参数是一个通过值捕获变量的闭包（moving closure）。 这些线程由操作系统调度（schedule）。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/std_misc/threads.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"线程"}],["meta",{"property":"og:description","content":"线程 Rust 通过 spawn 函数提供了创建本地操作系统（native OS）线程的机制，该函数的参数是一个通过值捕获变量的闭包（moving closure）。 这些线程由操作系统调度（schedule）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.47,"words":142},"filePathRelative":"std_misc/threads.md","excerpt":"\\n<p>Rust 通过 <code>spawn</code> 函数提供了创建本地操作系统（native OS）线程的机制，该函数的参数是一个通过值捕获变量的闭包（moving closure）。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::thread;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>static NTHREADS: i32 = 10;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 这是主（`main`）线程</span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 提供一个 vector 来存放所创建的子线程（children）。</span></span>\\n<span class=\\"line\\"><span>    let mut children = vec![];</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    for i in 0..NTHREADS {</span></span>\\n<span class=\\"line\\"><span>        // 启动（spin up）另一个线程</span></span>\\n<span class=\\"line\\"><span>        children.push(thread::spawn(move || {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"this is thread number {}\\", i)</span></span>\\n<span class=\\"line\\"><span>        }));</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    for child in children {</span></span>\\n<span class=\\"line\\"><span>        // 等待线程结束。返回一个结果。</span></span>\\n<span class=\\"line\\"><span>        let _ = child.join();</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std_misc/threads.md","value":{"title":"threads","path":"std_misc/threads.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std_misc/threads.md"}]}}}');export{c as comp,r as data};
