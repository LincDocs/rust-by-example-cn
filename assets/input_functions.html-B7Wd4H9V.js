import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function t(p,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="输入函数" tabindex="-1"><a class="header-anchor" href="#输入函数"><span>输入函数</span></a></h1><p>既然闭包可以作为参数，你很可能想知道函数是否也可以呢。确实可以！如果你声明一个接受闭包作为参数的函数，那么任何满足该闭包的 trait 约束的函数都可以作为其参数。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 定义一个函数，可以接受一个由 \`Fn\` 限定的泛型 \`F\` 参数并调用它。</span></span>
<span class="line"><span>fn call_me&lt;F: Fn()&gt;(f: F) {</span></span>
<span class="line"><span>    f()</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 定义一个满足 \`Fn\` 约束的封装函数（wrapper function）。</span></span>
<span class="line"><span>fn function() {</span></span>
<span class="line"><span>    println!(&quot;I&#39;m a function!&quot;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 定义一个满足 \`Fn\` 约束的闭包。</span></span>
<span class="line"><span>    let closure = || println!(&quot;I&#39;m a closure!&quot;);</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    call_me(closure);</span></span>
<span class="line"><span>    call_me(function);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多说一句，<code>Fn</code>、<code>FnMut</code> 和 <code>FnOnce</code> 这些 <code>trait</code> 明确了闭包如何从周围的作用域中捕获变量。</p><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3><p><a href="https://rustwiki.org/zh-CN/std/ops/trait.Fn.html" target="_blank" rel="noopener noreferrer"><code>Fn</code></a>, <a href="https://rustwiki.org/zh-CN/std/ops/trait.FnMut.html" target="_blank" rel="noopener noreferrer"><code>FnMut</code></a>, 和 <a href="https://rustwiki.org/zh-CN/std/ops/trait.FnOnce.html" target="_blank" rel="noopener noreferrer"><code>FnOnce</code></a></p>`,6)]))}const r=s(l,[["render",t],["__file","input_functions.html.vue"]]),d=JSON.parse('{"path":"/fn/closures/input_functions.html","title":"输入函数","lang":"zh-CN","frontmatter":{"description":"输入函数 既然闭包可以作为参数，你很可能想知道函数是否也可以呢。确实可以！如果你声明一个接受闭包作为参数的函数，那么任何满足该闭包的 trait 约束的函数都可以作为其参数。 多说一句，Fn、FnMut 和 FnOnce 这些 trait 明确了闭包如何从周围的作用域中捕获变量。 参见： Fn, FnMut, 和 FnOnce","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/fn/closures/input_functions.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"输入函数"}],["meta",{"property":"og:description","content":"输入函数 既然闭包可以作为参数，你很可能想知道函数是否也可以呢。确实可以！如果你声明一个接受闭包作为参数的函数，那么任何满足该闭包的 trait 约束的函数都可以作为其参数。 多说一句，Fn、FnMut 和 FnOnce 这些 trait 明确了闭包如何从周围的作用域中捕获变量。 参见： Fn, FnMut, 和 FnOnce"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"输入函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.71,"words":212},"filePathRelative":"fn/closures/input_functions.md","excerpt":"\\n<p>既然闭包可以作为参数，你很可能想知道函数是否也可以呢。确实可以！如果你声明一个接受闭包作为参数的函数，那么任何满足该闭包的 trait 约束的函数都可以作为其参数。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 定义一个函数，可以接受一个由 `Fn` 限定的泛型 `F` 参数并调用它。</span></span>\\n<span class=\\"line\\"><span>fn call_me&lt;F: Fn()&gt;(f: F) {</span></span>\\n<span class=\\"line\\"><span>    f()</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 定义一个满足 `Fn` 约束的封装函数（wrapper function）。</span></span>\\n<span class=\\"line\\"><span>fn function() {</span></span>\\n<span class=\\"line\\"><span>    println!(\\"I\'m a function!\\");</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 定义一个满足 `Fn` 约束的闭包。</span></span>\\n<span class=\\"line\\"><span>    let closure = || println!(\\"I\'m a closure!\\");</span></span>\\n<span class=\\"line\\"><span>    </span></span>\\n<span class=\\"line\\"><span>    call_me(closure);</span></span>\\n<span class=\\"line\\"><span>    call_me(function);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"fn/closures/input_functions.md","value":{"title":"input_functions","path":"fn/closures/input_functions.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"fn/closures/input_functions.md"}]}}}');export{r as comp,d as data};
