import{_ as e,e as n,k as a,o as i}from"./app-CVSWwIkE.js";const t={};function l(p,s){return i(),n("div",null,s[0]||(s[0]=[a(`<h1 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h1><p>我们知道测试是任何软件不可缺少的一部分！Rust 对单元和集成测试提供一流的支持（参见《Rust 程序设计语言》中的关于<a href="https://rustwiki.org/zh-CN/book/ch11-00-testing.html" target="_blank" rel="noopener noreferrer">测试的章节</a>）。</p><p>通过上面链接的关于测试章节，我们看到了如何编写单元测试和集成测试。在代码目录组织上，我们可以将单元测试放在需要测试的模块中，并将集成测试放在源码中 <code>tests/</code> 目录中：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>foo</span></span>
<span class="line"><span>├── Cargo.toml</span></span>
<span class="line"><span>├── src</span></span>
<span class="line"><span>│   └── main.rs</span></span>
<span class="line"><span>└── tests</span></span>
<span class="line"><span>    ├── my_test.rs</span></span>
<span class="line"><span>    └── my_other_test.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tests</code> 目录下的每个文件都是一个单独的集成测试。</p><p><code>cargo</code> 很自然地提供了一种便捷的方法来运行所有测试！</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你将会看到像这样的输出：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ cargo test</span></span>
<span class="line"><span>   Compiling blah v0.1.0 (file:///nobackup/blah)</span></span>
<span class="line"><span>    Finished dev [unoptimized + debuginfo] target(s) in 0.89 secs</span></span>
<span class="line"><span>     Running target/debug/deps/blah-d3b32b97275ec472</span></span>
<span class="line"><span></span></span>
<span class="line"><span>running 3 tests</span></span>
<span class="line"><span>test test_bar ... ok</span></span>
<span class="line"><span>test test_baz ... ok</span></span>
<span class="line"><span>test test_foo_bar ... ok</span></span>
<span class="line"><span>test test_foo ... ok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以运行如下测试，其中名称匹配一个模式：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test_foo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ cargo test test_foo</span></span>
<span class="line"><span>   Compiling blah v0.1.0 (file:///nobackup/blah)</span></span>
<span class="line"><span>    Finished dev [unoptimized + debuginfo] target(s) in 0.35 secs</span></span>
<span class="line"><span>     Running target/debug/deps/blah-d3b32b97275ec472</span></span>
<span class="line"><span></span></span>
<span class="line"><span>running 2 tests</span></span>
<span class="line"><span>test test_foo ... ok</span></span>
<span class="line"><span>test test_foo_bar ... ok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的一点是：<code>cargo</code> 可能同时进行多项测试，因此请确保它们不会相互竞争。例如，如果它们都输出到文件，则应该将它们写入不同的文件。</p>`,13)]))}const r=e(t,[["render",l],["__file","test.html.vue"]]),c=JSON.parse('{"path":"/cargo/test.html","title":"测试","lang":"zh-CN","frontmatter":{"description":"测试 我们知道测试是任何软件不可缺少的一部分！Rust 对单元和集成测试提供一流的支持（参见《Rust 程序设计语言》中的关于测试的章节）。 通过上面链接的关于测试章节，我们看到了如何编写单元测试和集成测试。在代码目录组织上，我们可以将单元测试放在需要测试的模块中，并将集成测试放在源码中 tests/ 目录中： tests 目录下的每个文件都是一个单独...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/cargo/test.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"测试"}],["meta",{"property":"og:description","content":"测试 我们知道测试是任何软件不可缺少的一部分！Rust 对单元和集成测试提供一流的支持（参见《Rust 程序设计语言》中的关于测试的章节）。 通过上面链接的关于测试章节，我们看到了如何编写单元测试和集成测试。在代码目录组织上，我们可以将单元测试放在需要测试的模块中，并将集成测试放在源码中 tests/ 目录中： tests 目录下的每个文件都是一个单独..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.26,"words":377},"filePathRelative":"cargo/test.md","excerpt":"\\n<p>我们知道测试是任何软件不可缺少的一部分！Rust 对单元和集成测试提供一流的支持（参见《Rust 程序设计语言》中的关于<a href=\\"https://rustwiki.org/zh-CN/book/ch11-00-testing.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">测试的章节</a>）。</p>\\n<p>通过上面链接的关于测试章节，我们看到了如何编写单元测试和集成测试。在代码目录组织上，我们可以将单元测试放在需要测试的模块中，并将集成测试放在源码中 <code>tests/</code> 目录中：</p>\\n<div class=\\"language-txt line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"txt\\" data-title=\\"txt\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>foo</span></span>\\n<span class=\\"line\\"><span>├── Cargo.toml</span></span>\\n<span class=\\"line\\"><span>├── src</span></span>\\n<span class=\\"line\\"><span>│   └── main.rs</span></span>\\n<span class=\\"line\\"><span>└── tests</span></span>\\n<span class=\\"line\\"><span>    ├── my_test.rs</span></span>\\n<span class=\\"line\\"><span>    └── my_other_test.rs</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/test.md","value":{"title":"test","path":"cargo/test.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/test.md"}]}}}');export{r as comp,c as data};
