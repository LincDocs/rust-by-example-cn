import{_ as i,e as a,k as s,o as t}from"./app-CVSWwIkE.js";const r={};function n(l,e){return t(),a("div",null,e[0]||(e[0]=[s(`<h1 id="构建脚本" tabindex="-1"><a class="header-anchor" href="#构建脚本"><span>构建脚本</span></a></h1><p>有时使用 <code>cargo</code> 正常构建还是不够的。也许你的 crate 在 cargo 成功编译之前需要一些先决条件，比如代码生成或者需要编译的一些本地代码。为了解决这个问题，我们构建了 cargo 可以运行的脚本。</p><p>要向包中添加构建脚本，可以在 <code>Cargo.toml</code> 中指定它，如下所示：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;build.rs&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟默认情况不同，这里 cargo 将在项目目录中优先查找 <code>build.rs</code> 文件。（本句采用意译，英文原文为：Otherwise Cargo will look for a <code>build.rs</code> file in the project directory by default.）</p><h2 id="怎么使用构建脚本" tabindex="-1"><a class="header-anchor" href="#怎么使用构建脚本"><span>怎么使用构建脚本</span></a></h2><p>构建脚本只是另一个 Rust 文件，此文件将在编译包中的任何其他内容之前，优先进行编译和调用。 因此，此文件可实现满足 crate 的先决条件。</p><p>cargo 通过<a href="https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts" target="_blank" rel="noopener noreferrer">此处指定</a>的可以使用的环境变量为脚本提供输入。（英文原文：Cargo provides the script with inputs via environment variables <a href="https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts" target="_blank" rel="noopener noreferrer">specified<br> here</a> that can be used.）</p><p>此脚本通过 stdout （标准输出）提供输出。打印的所有行都写入到 <code>target/debug/build/&lt;pkg&gt;/output</code>。另外，以 <code>cargo:</code> 为前缀的行将由 cargo 直接解析，因此可用于定义包编译的参数。</p><p>有关进一步的说明和示例，请阅读 <a href="https://doc.rust-lang.org/cargo/reference/build-scripts.html" target="_blank" rel="noopener noreferrer">cargo 规定说明文档</a>。</p>`,10)]))}const c=i(r,[["render",n],["__file","build_scripts.html.vue"]]),d=JSON.parse('{"path":"/cargo/build_scripts.html","title":"构建脚本","lang":"zh-CN","frontmatter":{"description":"构建脚本 有时使用 cargo 正常构建还是不够的。也许你的 crate 在 cargo 成功编译之前需要一些先决条件，比如代码生成或者需要编译的一些本地代码。为了解决这个问题，我们构建了 cargo 可以运行的脚本。 要向包中添加构建脚本，可以在 Cargo.toml 中指定它，如下所示： 跟默认情况不同，这里 cargo 将在项目目录中优先查找 b...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/cargo/build_scripts.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"构建脚本"}],["meta",{"property":"og:description","content":"构建脚本 有时使用 cargo 正常构建还是不够的。也许你的 crate 在 cargo 成功编译之前需要一些先决条件，比如代码生成或者需要编译的一些本地代码。为了解决这个问题，我们构建了 cargo 可以运行的脚本。 要向包中添加构建脚本，可以在 Cargo.toml 中指定它，如下所示： 跟默认情况不同，这里 cargo 将在项目目录中优先查找 b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"构建脚本\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.2,"words":361},"filePathRelative":"cargo/build_scripts.md","excerpt":"\\n<p>有时使用 <code>cargo</code> 正常构建还是不够的。也许你的 crate 在 cargo 成功编译之前需要一些先决条件，比如代码生成或者需要编译的一些本地代码。为了解决这个问题，我们构建了 cargo 可以运行的脚本。</p>\\n<p>要向包中添加构建脚本，可以在 <code>Cargo.toml</code> 中指定它，如下所示：</p>\\n<div class=\\"language-toml line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"toml\\" data-title=\\"toml\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">package</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:white;--shiki-dark:#FFFFFF\\">...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">build</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"build.rs\\"</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/build_scripts.md","value":{"title":"build_scripts","path":"cargo/build_scripts.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/build_scripts.md"}]}}}');export{c as comp,d as data};
