import{_ as t,e as l,f as e,k as i,i as n,g as r,h as p,r as o,o as u}from"./app-CY03Lsxp.js";const d={};function c(m,s){const a=o("RouteLink");return u(),l("div",null,[s[7]||(s[7]=e("h1",{id:"给-result-取别名",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#给-result-取别名"},[e("span",null,[n("给 "),e("code",null,"Result"),n(" 取别名")])])],-1)),e("p",null,[s[1]||(s[1]=n("当我们要重用某个 ")),s[2]||(s[2]=e("code",null,"Result",-1)),s[3]||(s[3]=n(" 类型时，该怎么办呢？回忆一下，Rust 允许我们创建")),r(a,{to:"/types/alias.html"},{default:p(()=>s[0]||(s[0]=[n("别名")])),_:1}),s[4]||(s[4]=n("。若某个 ")),s[5]||(s[5]=e("code",null,"Result",-1)),s[6]||(s[6]=n(" 有可能被重用，我们可以方便地给它取一个别名。"))]),s[8]||(s[8]=i(`<p>在模块的层面上创建别名特别有帮助。同一模块中的错误常常会有相同的 <code>Err</code> 类型，所以单个别名就能简便地定义<strong>所有</strong>相关的 <code>Result</code>。这太有用了，以至于标准库也提供了一个别名： <a href="https://rustwiki.org/zh-CN/std/io/type.Result.html" target="_blank" rel="noopener noreferrer"><code>io::Result</code></a>！</p><p>下面给出一个简短的示例来展示语法：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::num::ParseIntError;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 为带有错误类型 \`ParseIntError\` 的 \`Result\` 定义一个泛型别名。</span></span>
<span class="line"><span>type AliasedResult&lt;T&gt; = Result&lt;T, ParseIntError&gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用上面定义过的别名来表示上一节中的 \`Result&lt;i32,ParseIntError&gt;\` 类型。</span></span>
<span class="line"><span>fn multiply(first_number_str: &amp;str, second_number_str: &amp;str) -&gt; AliasedResult&lt;i32&gt; {</span></span>
<span class="line"><span>    first_number_str.parse::&lt;i32&gt;().and_then(|first_number| {</span></span>
<span class="line"><span>        second_number_str.parse::&lt;i32&gt;().map(|second_number| first_number * second_number)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 在这里使用别名又让我们节省了一些代码量。</span></span>
<span class="line"><span>fn print(result: AliasedResult&lt;i32&gt;) {</span></span>
<span class="line"><span>    match result {</span></span>
<span class="line"><span>        Ok(n)  =&gt; println!(&quot;n is {}&quot;, n),</span></span>
<span class="line"><span>        Err(e) =&gt; println!(&quot;Error: {}&quot;, e),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    print(multiply(&quot;10&quot;, &quot;2&quot;));</span></span>
<span class="line"><span>    print(multiply(&quot;t&quot;, &quot;2&quot;));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3><p><a href="https://rustwiki.org/zh-CN/std/io/type.Result.html" target="_blank" rel="noopener noreferrer"><code>io::Result</code></a></p>`,5))])}const v=t(d,[["render",c],["__file","result_alias.html.vue"]]),h=JSON.parse('{"path":"/error/result/result_alias.html","title":"给 Result 取别名","lang":"zh-CN","frontmatter":{"description":"给 Result 取别名 当我们要重用某个 Result 类型时，该怎么办呢？回忆一下，Rust 允许我们创建。若某个 Result 有可能被重用，我们可以方便地给它取一个别名。 在模块的层面上创建别名特别有帮助。同一模块中的错误常常会有相同的 Err 类型，所以单个别名就能简便地定义所有相关的 Result。这太有用了，以至于标准库也提供了一个别名：...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/error/result/result_alias.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"给 Result 取别名"}],["meta",{"property":"og:description","content":"给 Result 取别名 当我们要重用某个 Result 类型时，该怎么办呢？回忆一下，Rust 允许我们创建。若某个 Result 有可能被重用，我们可以方便地给它取一个别名。 在模块的层面上创建别名特别有帮助。同一模块中的错误常常会有相同的 Err 类型，所以单个别名就能简便地定义所有相关的 Result。这太有用了，以至于标准库也提供了一个别名：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"给 Result 取别名\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.94,"words":283},"filePathRelative":"error/result/result_alias.md","excerpt":"\\n<p>当我们要重用某个 <code>Result</code> 类型时，该怎么办呢？回忆一下，Rust 允许我们创建<a href=\\"/rust-by-example-cn/types/alias.html\\" target=\\"_blank\\">别名</a>。若某个 <code>Result</code> 有可能被重用，我们可以方便地给它取一个别名。</p>\\n<p>在模块的层面上创建别名特别有帮助。同一模块中的错误常常会有相同的 <code>Err</code> 类型，所以单个别名就能简便地定义<strong>所有</strong>相关的 <code>Result</code>。这太有用了，以至于标准库也提供了一个别名： <a href=\\"https://rustwiki.org/zh-CN/std/io/type.Result.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>io::Result</code></a>！</p>","autoDesc":true,"bioChainData":{"outlink":[{"title":"alias","link":"types/alias.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"error/result/result_alias.md","value":{"title":"result_alias","path":"error/result/result_alias.md","outlink":["types/alias.md"],"backlink":["SUMMARY.md"]}},{"id":"types/alias.md","value":{"title":"alias","path":"types/alias.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"error/result/result_alias.md","target":"types/alias.md"},{"source":"SUMMARY.md","target":"error/result/result_alias.md"}]}}}');export{v as comp,h as data};
