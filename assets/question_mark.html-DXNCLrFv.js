import{_ as s,e as a,k as e,o as i}from"./app-CY03Lsxp.js";const l={};function p(r,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span><code>?</code> 运算符</span></a></h1><p>把 result 用 match 连接起来会显得很难看；幸运的是，<code>?</code> 运算符可以把这种逻辑变得干净漂亮。<code>?</code> 运算符用在返回值为 <code>Result</code> 的表达式后面，它等同于这样一个匹配表达式：其中 <code>Err(err)</code> 分支展开成提前返回的 <code>return Err(err)</code>，而 <code>Ok(ok)</code> 分支展开成 <code>ok</code> 表达式。</p><div class="language-rust,editable,ignore,mdbook-runnable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore,mdbook-runnable" data-title="rust,editable,ignore,mdbook-runnable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mod checked {</span></span>
<span class="line"><span>    #[derive(Debug)]</span></span>
<span class="line"><span>    enum MathError {</span></span>
<span class="line"><span>        DivisionByZero,</span></span>
<span class="line"><span>        NegativeLogarithm,</span></span>
<span class="line"><span>        NegativeSquareRoot,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    type MathResult = Result&lt;f64, MathError&gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fn div(x: f64, y: f64) -&gt; MathResult {</span></span>
<span class="line"><span>        if y == 0.0 {</span></span>
<span class="line"><span>            Err(MathError::DivisionByZero)</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            Ok(x / y)</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fn sqrt(x: f64) -&gt; MathResult {</span></span>
<span class="line"><span>        if x &lt; 0.0 {</span></span>
<span class="line"><span>            Err(MathError::NegativeSquareRoot)</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            Ok(x.sqrt())</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fn ln(x: f64) -&gt; MathResult {</span></span>
<span class="line"><span>        if x &lt; 0.0 {</span></span>
<span class="line"><span>            Err(MathError::NegativeLogarithm)</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            Ok(x.ln())</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 中间函数</span></span>
<span class="line"><span>    fn op_(x: f64, y: f64) -&gt; MathResult {</span></span>
<span class="line"><span>        // 如果 \`div\` “失败” 了，那么返回 \`DivisionByZero\`</span></span>
<span class="line"><span>        let ratio = div(x, y)?;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 如果 \`ln\` “失败” 了，那么返回 \`NegativeLogarithm\`</span></span>
<span class="line"><span>        let ln = ln(ratio)?;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        sqrt(ln)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    pub fn op(x: f64, y: f64) {</span></span>
<span class="line"><span>        match op_(x, y) {</span></span>
<span class="line"><span>            Err(why) =&gt; panic!(&quot;{}&quot;,match why {</span></span>
<span class="line"><span>                MathError::NegativeLogarithm</span></span>
<span class="line"><span>                    =&gt; &quot;logarithm of negative number&quot;,</span></span>
<span class="line"><span>                MathError::DivisionByZero</span></span>
<span class="line"><span>                    =&gt; &quot;division by zero&quot;,</span></span>
<span class="line"><span>                MathError::NegativeSquareRoot</span></span>
<span class="line"><span>                    =&gt; &quot;square root of negative number&quot;,</span></span>
<span class="line"><span>            }),</span></span>
<span class="line"><span>            Ok(value) =&gt; println!(&quot;{}&quot;, value),</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    checked::op(1.0, 10.0);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记得查阅<a href="https://rustwiki.org/zh-CN/std/result/index.html" target="_blank" rel="noopener noreferrer">文档</a>，里面有很多匹配/组合 <code>Result</code> 的方法。</p>`,4)]))}const c=s(l,[["render",p],["__file","question_mark.html.vue"]]),t=JSON.parse('{"path":"/std/result/question_mark.html","title":"? 运算符","lang":"zh-CN","frontmatter":{"description":"? 运算符 把 result 用 match 连接起来会显得很难看；幸运的是，? 运算符可以把这种逻辑变得干净漂亮。? 运算符用在返回值为 Result 的表达式后面，它等同于这样一个匹配表达式：其中 Err(err) 分支展开成提前返回的 return Err(err)，而 Ok(ok) 分支展开成 ok 表达式。 记得查阅文档，里面有很多匹配/组合...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/std/result/question_mark.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"? 运算符"}],["meta",{"property":"og:description","content":"? 运算符 把 result 用 match 连接起来会显得很难看；幸运的是，? 运算符可以把这种逻辑变得干净漂亮。? 运算符用在返回值为 Result 的表达式后面，它等同于这样一个匹配表达式：其中 Err(err) 分支展开成提前返回的 return Err(err)，而 Ok(ok) 分支展开成 ok 表达式。 记得查阅文档，里面有很多匹配/组合..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"? 运算符\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.92,"words":276},"filePathRelative":"std/result/question_mark.md","excerpt":"\\n<p>把 result 用 match 连接起来会显得很难看；幸运的是，<code>?</code> 运算符可以把这种逻辑变得干净漂亮。<code>?</code> 运算符用在返回值为 <code>Result</code> 的表达式后面，它等同于这样一个匹配表达式：其中 <code>Err(err)</code> 分支展开成提前返回的 <code>return Err(err)</code>，而 <code>Ok(ok)</code> 分支展开成 <code>ok</code> 表达式。</p>\\n<div class=\\"language-rust,editable,ignore,mdbook-runnable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable,ignore,mdbook-runnable\\" data-title=\\"rust,editable,ignore,mdbook-runnable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>mod checked {</span></span>\\n<span class=\\"line\\"><span>    #[derive(Debug)]</span></span>\\n<span class=\\"line\\"><span>    enum MathError {</span></span>\\n<span class=\\"line\\"><span>        DivisionByZero,</span></span>\\n<span class=\\"line\\"><span>        NegativeLogarithm,</span></span>\\n<span class=\\"line\\"><span>        NegativeSquareRoot,</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    type MathResult = Result&lt;f64, MathError&gt;;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    fn div(x: f64, y: f64) -&gt; MathResult {</span></span>\\n<span class=\\"line\\"><span>        if y == 0.0 {</span></span>\\n<span class=\\"line\\"><span>            Err(MathError::DivisionByZero)</span></span>\\n<span class=\\"line\\"><span>        } else {</span></span>\\n<span class=\\"line\\"><span>            Ok(x / y)</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    fn sqrt(x: f64) -&gt; MathResult {</span></span>\\n<span class=\\"line\\"><span>        if x &lt; 0.0 {</span></span>\\n<span class=\\"line\\"><span>            Err(MathError::NegativeSquareRoot)</span></span>\\n<span class=\\"line\\"><span>        } else {</span></span>\\n<span class=\\"line\\"><span>            Ok(x.sqrt())</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    fn ln(x: f64) -&gt; MathResult {</span></span>\\n<span class=\\"line\\"><span>        if x &lt; 0.0 {</span></span>\\n<span class=\\"line\\"><span>            Err(MathError::NegativeLogarithm)</span></span>\\n<span class=\\"line\\"><span>        } else {</span></span>\\n<span class=\\"line\\"><span>            Ok(x.ln())</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 中间函数</span></span>\\n<span class=\\"line\\"><span>    fn op_(x: f64, y: f64) -&gt; MathResult {</span></span>\\n<span class=\\"line\\"><span>        // 如果 `div` “失败” 了，那么返回 `DivisionByZero`</span></span>\\n<span class=\\"line\\"><span>        let ratio = div(x, y)?;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 如果 `ln` “失败” 了，那么返回 `NegativeLogarithm`</span></span>\\n<span class=\\"line\\"><span>        let ln = ln(ratio)?;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        sqrt(ln)</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    pub fn op(x: f64, y: f64) {</span></span>\\n<span class=\\"line\\"><span>        match op_(x, y) {</span></span>\\n<span class=\\"line\\"><span>            Err(why) =&gt; panic!(\\"{}\\",match why {</span></span>\\n<span class=\\"line\\"><span>                MathError::NegativeLogarithm</span></span>\\n<span class=\\"line\\"><span>                    =&gt; \\"logarithm of negative number\\",</span></span>\\n<span class=\\"line\\"><span>                MathError::DivisionByZero</span></span>\\n<span class=\\"line\\"><span>                    =&gt; \\"division by zero\\",</span></span>\\n<span class=\\"line\\"><span>                MathError::NegativeSquareRoot</span></span>\\n<span class=\\"line\\"><span>                    =&gt; \\"square root of negative number\\",</span></span>\\n<span class=\\"line\\"><span>            }),</span></span>\\n<span class=\\"line\\"><span>            Ok(value) =&gt; println!(\\"{}\\", value),</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    checked::op(1.0, 10.0);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"testcase_list","link":"hello/print/print_display/testcase_list.html"}],"localMap":{"nodes":[{"id":"std/result/question_mark.md","value":{"title":"question_mark","path":"std/result/question_mark.md","outlink":[],"backlink":["SUMMARY.md","hello/print/print_display/testcase_list.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display/testcase_list.md","value":{"title":"testcase_list","path":"hello/print/print_display/testcase_list.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std/result/question_mark.md"},{"source":"hello/print/print_display/testcase_list.md","target":"std/result/question_mark.md"}]}}}');export{c as comp,t as data};
