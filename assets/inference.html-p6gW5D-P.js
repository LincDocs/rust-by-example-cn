import{_ as n,e as s,k as a,o as i}from"./app-CVSWwIkE.js";const l={};function t(p,e){return i(),s("div",null,e[0]||(e[0]=[a('<h1 id="类型推断" tabindex="-1"><a class="header-anchor" href="#类型推断"><span>类型推断</span></a></h1><p>Rust 的类型推断引擎是很聪明的，它不只是在初始化时看看<a href="https://en.wikipedia.org/wiki/Value_%28computer_science%29#lrvalue" target="_blank" rel="noopener noreferrer">右值</a>（r-value）的类型而已，它还会考察变量之后会怎样使用，借此推断类型。这是一个类型推导的进阶例子：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>\n<span class="line"><span>    // 因为有类型说明，编译器知道 `elem` 的类型是 u8。</span></span>\n<span class="line"><span>    let elem = 5u8;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 创建一个空向量（vector，即不定长的，可以增长的数组）。</span></span>\n<span class="line"><span>    let mut vec = Vec::new();</span></span>\n<span class="line"><span>    // 现在编译器还不知道 `vec` 的具体类型，只知道它是某种东西构成的向量（`Vec&lt;_&gt;`）</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // 在向量中插入 `elem`。</span></span>\n<span class="line"><span>    vec.push(elem);</span></span>\n<span class="line"><span>    // 啊哈！现在编译器知道 `vec` 是 u8 的向量了（`Vec&lt;u8&gt;`）。</span></span>\n<span class="line"><span>    // 试一试 ^ 注释掉 `vec.push(elem)` 这一行。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    println!(&quot;{:?}&quot;, vec);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有必要写类型说明，编译器和程序员皆大欢喜！</p>',4)]))}const c=n(l,[["render",t],["__file","inference.html.vue"]]),d=JSON.parse('{"path":"/types/inference.html","title":"类型推断","lang":"zh-CN","frontmatter":{"description":"类型推断 Rust 的类型推断引擎是很聪明的，它不只是在初始化时看看右值（r-value）的类型而已，它还会考察变量之后会怎样使用，借此推断类型。这是一个类型推导的进阶例子： 没有必要写类型说明，编译器和程序员皆大欢喜！","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/types/inference.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"类型推断"}],["meta",{"property":"og:description","content":"类型推断 Rust 的类型推断引擎是很聪明的，它不只是在初始化时看看右值（r-value）的类型而已，它还会考察变量之后会怎样使用，借此推断类型。这是一个类型推导的进阶例子： 没有必要写类型说明，编译器和程序员皆大欢喜！"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类型推断\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.75,"words":224},"filePathRelative":"types/inference.md","excerpt":"\\n<p>Rust 的类型推断引擎是很聪明的，它不只是在初始化时看看<a href=\\"https://en.wikipedia.org/wiki/Value_%28computer_science%29#lrvalue\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">右值</a>（r-value）的类型而已，它还会考察变量之后会怎样使用，借此推断类型。这是一个类型推导的进阶例子：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 因为有类型说明，编译器知道 `elem` 的类型是 u8。</span></span>\\n<span class=\\"line\\"><span>    let elem = 5u8;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 创建一个空向量（vector，即不定长的，可以增长的数组）。</span></span>\\n<span class=\\"line\\"><span>    let mut vec = Vec::new();</span></span>\\n<span class=\\"line\\"><span>    // 现在编译器还不知道 `vec` 的具体类型，只知道它是某种东西构成的向量（`Vec&lt;_&gt;`）</span></span>\\n<span class=\\"line\\"><span>    </span></span>\\n<span class=\\"line\\"><span>    // 在向量中插入 `elem`。</span></span>\\n<span class=\\"line\\"><span>    vec.push(elem);</span></span>\\n<span class=\\"line\\"><span>    // 啊哈！现在编译器知道 `vec` 是 u8 的向量了（`Vec&lt;u8&gt;`）。</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 注释掉 `vec.push(elem)` 这一行。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"{:?}\\", vec);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"primitives","link":"primitives.html"},{"title":"types","link":"types.html"}],"localMap":{"nodes":[{"id":"types/inference.md","value":{"title":"inference","path":"types/inference.md","outlink":[],"backlink":["SUMMARY.md","primitives.md","types.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"primitives.md","value":{"title":"primitives","path":"primitives.md","outlink":[],"backlink":[]}},{"id":"types.md","value":{"title":"types","path":"types.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"types/inference.md"},{"source":"primitives.md","target":"types/inference.md"},{"source":"types.md","target":"types/inference.md"}]}}}');export{c as comp,d as data};
