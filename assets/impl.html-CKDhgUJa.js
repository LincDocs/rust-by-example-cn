import{_ as e,e as p,k as h,f as a,g as n,i as l,h as t,r as k,o as d}from"./app-CVSWwIkE.js";const r={};function c(m,s){const i=k("RouteLink");return d(),p("div",null,[s[5]||(s[5]=h(`<h1 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h1><p>和函数类似，<code>impl</code> 块要想实现泛型，也需要很仔细。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 具体类型 \`S\`</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GenericVal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 泛型类型 \`GenericVal\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// GenericVal 的 \`impl\`，此处我们显式地指定了类型参数：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> GenericVal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {} </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 指定 \`f32\` 类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> GenericVal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {} </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 指定为上面定义的 \`S\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// \`&lt;T&gt;\` 必须在类型之前写出来，以使类型 \`T\` 代表泛型。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">GenericVal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct Val {</span></span>
<span class="line"><span>    val: f64</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct GenVal&lt;T&gt;{</span></span>
<span class="line"><span>    gen_val: T</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Val 的 \`impl\`</span></span>
<span class="line"><span>impl Val {</span></span>
<span class="line"><span>    fn value(&amp;self) -&gt; &amp;f64 { &amp;self.val }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// GenVal 的 \`impl\`，指定 \`T\` 是泛型类型</span></span>
<span class="line"><span>impl &lt;T&gt; GenVal&lt;T&gt; {</span></span>
<span class="line"><span>    fn value(&amp;self) -&gt; &amp;T { &amp;self.gen_val }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let x = Val { val: 3.0 };</span></span>
<span class="line"><span>    let y = GenVal { gen_val: 3i32 };</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    println!(&quot;{}, {}&quot;, x.value(), y.value());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,5)),a("p",null,[n(i,{to:"/scope/lifetime/fn.html"},{default:t(()=>s[0]||(s[0]=[l("返回引用的函数")])),_:1}),s[3]||(s[3]=l(", ")),n(i,{to:"/fn/methods.html"},{default:t(()=>s[1]||(s[1]=[a("code",null,"impl",-1)])),_:1}),s[4]||(s[4]=l(", 和 ")),n(i,{to:"/custom_types/structs.html"},{default:t(()=>s[2]||(s[2]=[a("code",null,"struct",-1)])),_:1})])])}const g=e(r,[["render",c],["__file","impl.html.vue"]]),u=JSON.parse('{"path":"/generics/impl.html","title":"实现","lang":"zh-CN","frontmatter":{"description":"实现 和函数类似，impl 块要想实现泛型，也需要很仔细。 参见： , , 和","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/generics/impl.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"实现"}],["meta",{"property":"og:description","content":"实现 和函数类似，impl 块要想实现泛型，也需要很仔细。 参见： , , 和"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实现\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.63,"words":190},"filePathRelative":"generics/impl.md","excerpt":"\\n<p>和函数类似，<code>impl</code> 块要想实现泛型，也需要很仔细。</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust\\" data-title=\\"rust\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> S</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 具体类型 `S`</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> GenericVal</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">T</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;(</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">T</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,); </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 泛型类型 `GenericVal`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// GenericVal 的 `impl`，此处我们显式地指定了类型参数：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">impl</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\"> GenericVal</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">f32</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt; {} </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 指定 `f32` 类型</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">impl</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\"> GenericVal</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">S</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt; {} </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 指定为上面定义的 `S`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// `&lt;T&gt;` 必须在类型之前写出来，以使类型 `T` 代表泛型。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">impl</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> &lt;</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">T</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt; </span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">GenericVal</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">T</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt; {}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"fn","link":"scope/lifetime/fn.html"},{"title":"methods","link":"fn/methods.html"},{"title":"structs","link":"custom_types/structs.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"generics/impl.md","value":{"title":"impl","path":"generics/impl.md","outlink":["scope/lifetime/fn.md","fn/methods.md","custom_types/structs.md"],"backlink":["SUMMARY.md"]}},{"id":"scope/lifetime/fn.md","value":{"title":"fn","path":"scope/lifetime/fn.md","outlink":[],"backlink":[]}},{"id":"fn/methods.md","value":{"title":"methods","path":"fn/methods.md","outlink":[],"backlink":[]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"generics/impl.md","target":"scope/lifetime/fn.md"},{"source":"generics/impl.md","target":"fn/methods.md"},{"source":"generics/impl.md","target":"custom_types/structs.md"},{"source":"SUMMARY.md","target":"generics/impl.md"}]}}}');export{g as comp,u as data};
