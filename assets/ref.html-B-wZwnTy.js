import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(t,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="ref-模式" tabindex="-1"><a class="header-anchor" href="#ref-模式"><span><code>ref</code> 模式</span></a></h1><p>在通过 <code>let</code> 绑定来进行模式匹配或解构时，<code>ref</code> 关键字可用来创建结构体/元组的字段的引用。下面的例子展示了几个实例，可看到 <code>ref</code> 的作用：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#[derive(Clone, Copy)]</span></span>
<span class="line"><span>struct Point { x: i32, y: i32 }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let c = &#39;Q&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 赋值语句中左边的 \`ref\` 关键字等价于右边的 \`&amp;\` 符号。</span></span>
<span class="line"><span>    let ref ref_c1 = c;</span></span>
<span class="line"><span>    let ref_c2 = &amp;c;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;ref_c1 equals ref_c2: {}&quot;, *ref_c1 == *ref_c2);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let point = Point { x: 0, y: 0 };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 在解构一个结构体时 \`ref\` 同样有效。</span></span>
<span class="line"><span>    let _copy_of_x = {</span></span>
<span class="line"><span>        // \`ref_to_x\` 是一个指向 \`point\` 的 \`x\` 字段的引用。</span></span>
<span class="line"><span>        let Point { x: ref ref_to_x, y: _ } = point;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 返回一个 \`point\` 的 \`x\` 字段的拷贝。</span></span>
<span class="line"><span>        *ref_to_x</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`point\` 的可变拷贝</span></span>
<span class="line"><span>    let mut mutable_point = point;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        // \`ref\` 可以与 \`mut\` 结合以创建可变引用。</span></span>
<span class="line"><span>        let Point { x: _, y: ref mut mut_ref_to_y } = mutable_point;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 通过可变引用来改变 \`mutable_point\` 的字段 \`y\`。</span></span>
<span class="line"><span>        *mut_ref_to_y = 1;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;point is ({}, {})&quot;, point.x, point.y);</span></span>
<span class="line"><span>    println!(&quot;mutable_point is ({}, {})&quot;, mutable_point.x, mutable_point.y);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 包含一个指针的可变元组</span></span>
<span class="line"><span>    let mut mutable_tuple = (Box::new(5u32), 3u32);</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        // 解构 \`mutable_tuple\` 来改变 \`last\` 的值。</span></span>
<span class="line"><span>        let (_, ref mut last) = mutable_tuple;</span></span>
<span class="line"><span>        *last = 2u32;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    println!(&quot;tuple is {:?}&quot;, mutable_tuple);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const r=s(l,[["render",p],["__file","ref.html.vue"]]),d=JSON.parse('{"path":"/scope/borrow/ref.html","title":"ref 模式","lang":"zh-CN","frontmatter":{"description":"ref 模式 在通过 let 绑定来进行模式匹配或解构时，ref 关键字可用来创建结构体/元组的字段的引用。下面的例子展示了几个实例，可看到 ref 的作用：","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/scope/borrow/ref.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"ref 模式"}],["meta",{"property":"og:description","content":"ref 模式 在通过 let 绑定来进行模式匹配或解构时，ref 关键字可用来创建结构体/元组的字段的引用。下面的例子展示了几个实例，可看到 ref 的作用："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ref 模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.91,"words":274},"filePathRelative":"scope/borrow/ref.md","excerpt":"\\n<p>在通过 <code>let</code> 绑定来进行模式匹配或解构时，<code>ref</code> 关键字可用来创建结构体/元组的字段的引用。下面的例子展示了几个实例，可看到 <code>ref</code> 的作用：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>#[derive(Clone, Copy)]</span></span>\\n<span class=\\"line\\"><span>struct Point { x: i32, y: i32 }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let c = \'Q\';</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 赋值语句中左边的 `ref` 关键字等价于右边的 `&amp;` 符号。</span></span>\\n<span class=\\"line\\"><span>    let ref ref_c1 = c;</span></span>\\n<span class=\\"line\\"><span>    let ref_c2 = &amp;c;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"ref_c1 equals ref_c2: {}\\", *ref_c1 == *ref_c2);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let point = Point { x: 0, y: 0 };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 在解构一个结构体时 `ref` 同样有效。</span></span>\\n<span class=\\"line\\"><span>    let _copy_of_x = {</span></span>\\n<span class=\\"line\\"><span>        // `ref_to_x` 是一个指向 `point` 的 `x` 字段的引用。</span></span>\\n<span class=\\"line\\"><span>        let Point { x: ref ref_to_x, y: _ } = point;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 返回一个 `point` 的 `x` 字段的拷贝。</span></span>\\n<span class=\\"line\\"><span>        *ref_to_x</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `point` 的可变拷贝</span></span>\\n<span class=\\"line\\"><span>    let mut mutable_point = point;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    {</span></span>\\n<span class=\\"line\\"><span>        // `ref` 可以与 `mut` 结合以创建可变引用。</span></span>\\n<span class=\\"line\\"><span>        let Point { x: _, y: ref mut mut_ref_to_y } = mutable_point;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 通过可变引用来改变 `mutable_point` 的字段 `y`。</span></span>\\n<span class=\\"line\\"><span>        *mut_ref_to_y = 1;</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"point is ({}, {})\\", point.x, point.y);</span></span>\\n<span class=\\"line\\"><span>    println!(\\"mutable_point is ({}, {})\\", mutable_point.x, mutable_point.y);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 包含一个指针的可变元组</span></span>\\n<span class=\\"line\\"><span>    let mut mutable_tuple = (Box::new(5u32), 3u32);</span></span>\\n<span class=\\"line\\"><span>    </span></span>\\n<span class=\\"line\\"><span>    {</span></span>\\n<span class=\\"line\\"><span>        // 解构 `mutable_tuple` 来改变 `last` 的值。</span></span>\\n<span class=\\"line\\"><span>        let (_, ref mut last) = mutable_tuple;</span></span>\\n<span class=\\"line\\"><span>        *last = 2u32;</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>    </span></span>\\n<span class=\\"line\\"><span>    println!(\\"tuple is {:?}\\", mutable_tuple);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"testcase_units","link":"generics/phantom/testcase_units.html"},{"title":"destructure_pointers","link":"flow_control/match/destructuring/destructure_pointers.html"},{"title":"destructure_structures","link":"flow_control/match/destructuring/destructure_structures.html"},{"title":"testcase_list","link":"hello/print/print_display/testcase_list.html"}],"localMap":{"nodes":[{"id":"scope/borrow/ref.md","value":{"title":"ref","path":"scope/borrow/ref.md","outlink":[],"backlink":["SUMMARY.md","generics/phantom/testcase_units.md","flow_control/match/destructuring/destructure_pointers.md","flow_control/match/destructuring/destructure_structures.md","hello/print/print_display/testcase_list.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"generics/phantom/testcase_units.md","value":{"title":"testcase_units","path":"generics/phantom/testcase_units.md","outlink":[],"backlink":[]}},{"id":"flow_control/match/destructuring/destructure_pointers.md","value":{"title":"destructure_pointers","path":"flow_control/match/destructuring/destructure_pointers.md","outlink":[],"backlink":[]}},{"id":"flow_control/match/destructuring/destructure_structures.md","value":{"title":"destructure_structures","path":"flow_control/match/destructuring/destructure_structures.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display/testcase_list.md","value":{"title":"testcase_list","path":"hello/print/print_display/testcase_list.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"scope/borrow/ref.md"},{"source":"generics/phantom/testcase_units.md","target":"scope/borrow/ref.md"},{"source":"flow_control/match/destructuring/destructure_pointers.md","target":"scope/borrow/ref.md"},{"source":"flow_control/match/destructuring/destructure_structures.md","target":"scope/borrow/ref.md"},{"source":"hello/print/print_display/testcase_list.md","target":"scope/borrow/ref.md"}]}}}');export{r as comp,d as data};
