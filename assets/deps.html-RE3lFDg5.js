import{_ as s,e as a,k as e,o as n}from"./app-CY03Lsxp.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖"><span>依赖</span></a></h1><p>大多数程序都会依赖于某些库。如果你曾经手动管理过库依赖，那么你就知道这会带来的极大的痛苦。幸运的是，Rust 的生态链标配 <code>cargo</code> 工具！<code>cargo</code> 可以管理项目的依赖关系。</p><p>下面创建一个新的 Rust 项目：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 二进制可执行文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 或者库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --lib</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> foo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于本章的其余部分，我们选定创建的都是二进制可执行文件而不是库，但所有的概念都是相同的。</p><p>完成上述命令后，将看到如下内容：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>foo</span></span>
<span class="line"><span>├── Cargo.toml</span></span>
<span class="line"><span>└── src</span></span>
<span class="line"><span>    └── main.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>main.rs</code> 是新项目的入口源文件——这里没什么新东西。 <code>Cargo.toml</code> 是本项目（<code>foo</code>）的 <code>cargo</code> 的配置文件。 浏览 <code>Cargo.toml</code> 文件，将看到类似以下的的内容：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;foo&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">authors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mark&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>package</code> 下面的 <code>name</code> 字段表明项目的名称。 如果您发布 crate（后面将做更多介绍），那么 <code>crates.io</code> 将使用此字段标明的名称。 这也是编译时输出的二进制可执行文件的名称。</p><p><code>version</code> 字段是使用<a href="https://semver.org/" target="_blank" rel="noopener noreferrer">语义版本控制</a>（Semantic<br> Versioning）的 crate 版本号。</p><p><code>authors</code> 字段表明发布 crate 时的作者列表。</p><p><code>dependencies</code> 这部分可以让你为项目添加依赖。</p><p>举个例子，假设我们希望程序有一个很棒的命令行界面（command-line interface，CLI））。 你可以在 <a href="https://crates.io" target="_blank" rel="noopener noreferrer">crates.io</a>（官方的 Rust 包注册服务）上找到很多很棒的 Rust 包。其中一个受欢迎的包是 <a href="https://crates.io/crates/clap" target="_blank" rel="noopener noreferrer">clap</a>（译注：一个命令行参数的解析器）。在撰写本文时，[clap] 最新发布的版本为 <code>2.27.1</code>。要在程序中添加依赖，我们可以很简单地在 <code>Cargo.toml</code> 文件中的 <code>dependencies</code> 项后面将以下内容添加进来 ：<code>clap = &quot;2.27.1&quot;</code>。当然，在 <code>main.rs</code> 文件中写上 <code>extern crate clap</code>，就和平常一样。 就是这样！你就可以在程序中开始使用 <code>clap</code> 了。</p><p><code>cargo</code> 还支持<a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html" target="_blank" rel="noopener noreferrer">其他类型的依赖</a>。 下面是一个简单的示例：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;foo&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">authors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mark&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2.27.1&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 来自 crates.io</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://github.com/rust-lang-nursery/rand&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 来自网上的仓库</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;../bar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 来自本地文件系统的路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cargo</code> 不仅仅是一个包依赖管理器。<code>Cargo.toml</code> 的所有可用配置选项都列在 <a href="https://doc.rust-lang.org/cargo/reference/manifest.html" target="_blank" rel="noopener noreferrer">格式规范</a>中。</p><p>要构建我们的项目，我们可以在项目目录中的任何位置（包括子目录！）执行 <code>cargo build</code>。我们也可以执行 <code>cargo run</code> 来构建和运行。请注意，这些命令将处理所有依赖，在需要时下载 crate，并构建所有内容，包括 crate。（请注意，它只重新构建尚未构建的内容，这和 <code>make</code> 类似）。</p><p>瞧！这里的所有都和 <code>cargo</code> 有关！</p>`,19)]))}const p=s(t,[["render",l],["__file","deps.html.vue"]]),d=JSON.parse('{"path":"/cargo/deps.html","title":"依赖","lang":"zh-CN","frontmatter":{"description":"依赖 大多数程序都会依赖于某些库。如果你曾经手动管理过库依赖，那么你就知道这会带来的极大的痛苦。幸运的是，Rust 的生态链标配 cargo 工具！cargo 可以管理项目的依赖关系。 下面创建一个新的 Rust 项目： 对于本章的其余部分，我们选定创建的都是二进制可执行文件而不是库，但所有的概念都是相同的。 完成上述命令后，将看到如下内容： main...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/cargo/deps.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"依赖"}],["meta",{"property":"og:description","content":"依赖 大多数程序都会依赖于某些库。如果你曾经手动管理过库依赖，那么你就知道这会带来的极大的痛苦。幸运的是，Rust 的生态链标配 cargo 工具！cargo 可以管理项目的依赖关系。 下面创建一个新的 Rust 项目： 对于本章的其余部分，我们选定创建的都是二进制可执行文件而不是库，但所有的概念都是相同的。 完成上述命令后，将看到如下内容： main..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.37,"words":712},"filePathRelative":"cargo/deps.md","excerpt":"\\n<p>大多数程序都会依赖于某些库。如果你曾经手动管理过库依赖，那么你就知道这会带来的极大的痛苦。幸运的是，Rust 的生态链标配 <code>cargo</code> 工具！<code>cargo</code> 可以管理项目的依赖关系。</p>\\n<p>下面创建一个新的 Rust 项目：</p>\\n<div class=\\"language-sh line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sh\\" data-title=\\"sh\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 二进制可执行文件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">cargo</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> new</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> foo</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 或者库</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">cargo</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> new</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> --lib</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> foo</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/deps.md","value":{"title":"deps","path":"cargo/deps.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/deps.md"}]}}}');export{p as comp,d as data};
