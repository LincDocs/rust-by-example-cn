import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(d,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数"><span>高阶函数</span></a></h1><p>Rust 提供了高阶函数（Higher Order Function, HOF），指那些输入一个或多个函数，并且/或者产生一个更有用的函数的函数。HOF 和惰性迭代器（lazy iterator）给 Rust 带来了函数式（functional）编程的风格。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn is_odd(n: u32) -&gt; bool {</span></span>
<span class="line"><span>    n % 2 == 1</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    println!(&quot;Find the sum of all the squared odd numbers under 1000&quot;);</span></span>
<span class="line"><span>    let upper = 1000;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 命令式（imperative）的写法</span></span>
<span class="line"><span>    // 声明累加器变量</span></span>
<span class="line"><span>    let mut acc = 0;</span></span>
<span class="line"><span>    // 迭代：0，1, 2, ... 到无穷大</span></span>
<span class="line"><span>    for n in 0.. {</span></span>
<span class="line"><span>        // 数字的平方</span></span>
<span class="line"><span>        let n_squared = n * n;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if n_squared &gt;= upper {</span></span>
<span class="line"><span>            // 若大于上限则退出循环</span></span>
<span class="line"><span>            break;</span></span>
<span class="line"><span>        } else if is_odd(n_squared) {</span></span>
<span class="line"><span>            // 如果是奇数就计数</span></span>
<span class="line"><span>            acc += n_squared;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    println!(&quot;imperative style: {}&quot;, acc);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 函数式的写法</span></span>
<span class="line"><span>    let sum_of_squared_odd_numbers: u32 =</span></span>
<span class="line"><span>        (0..).map(|n| n * n)             // 所有自然数取平方</span></span>
<span class="line"><span>             .take_while(|&amp;n| n &lt; upper) // 取小于上限的</span></span>
<span class="line"><span>             .filter(|&amp;n| is_odd(n))     // 取奇数</span></span>
<span class="line"><span>             .fold(0, |sum, i| sum + i); // 最后加起来</span></span>
<span class="line"><span>    println!(&quot;functional style: {}&quot;, sum_of_squared_odd_numbers);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://rustwiki.org/zh-CN/core/option/enum.Option.html" target="_blank" rel="noopener noreferrer">Option</a> 和 <a href="https://rustwiki.org/zh-CN/core/iter/trait.Iterator.html" target="_blank" rel="noopener noreferrer">迭代器</a> 都实现了不少高阶函数。</p>`,4)]))}const t=s(l,[["render",p],["__file","hof.html.vue"]]),c=JSON.parse('{"path":"/fn/hof.html","title":"高阶函数","lang":"zh-CN","frontmatter":{"description":"高阶函数 Rust 提供了高阶函数（Higher Order Function, HOF），指那些输入一个或多个函数，并且/或者产生一个更有用的函数的函数。HOF 和惰性迭代器（lazy iterator）给 Rust 带来了函数式（functional）编程的风格。 Option 和 迭代器 都实现了不少高阶函数。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/fn/hof.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"高阶函数"}],["meta",{"property":"og:description","content":"高阶函数 Rust 提供了高阶函数（Higher Order Function, HOF），指那些输入一个或多个函数，并且/或者产生一个更有用的函数的函数。HOF 和惰性迭代器（lazy iterator）给 Rust 带来了函数式（functional）编程的风格。 Option 和 迭代器 都实现了不少高阶函数。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高阶函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.86,"words":259},"filePathRelative":"fn/hof.md","excerpt":"\\n<p>Rust 提供了高阶函数（Higher Order Function, HOF），指那些输入一个或多个函数，并且/或者产生一个更有用的函数的函数。HOF 和惰性迭代器（lazy iterator）给 Rust 带来了函数式（functional）编程的风格。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn is_odd(n: u32) -&gt; bool {</span></span>\\n<span class=\\"line\\"><span>    n % 2 == 1</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Find the sum of all the squared odd numbers under 1000\\");</span></span>\\n<span class=\\"line\\"><span>    let upper = 1000;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 命令式（imperative）的写法</span></span>\\n<span class=\\"line\\"><span>    // 声明累加器变量</span></span>\\n<span class=\\"line\\"><span>    let mut acc = 0;</span></span>\\n<span class=\\"line\\"><span>    // 迭代：0，1, 2, ... 到无穷大</span></span>\\n<span class=\\"line\\"><span>    for n in 0.. {</span></span>\\n<span class=\\"line\\"><span>        // 数字的平方</span></span>\\n<span class=\\"line\\"><span>        let n_squared = n * n;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        if n_squared &gt;= upper {</span></span>\\n<span class=\\"line\\"><span>            // 若大于上限则退出循环</span></span>\\n<span class=\\"line\\"><span>            break;</span></span>\\n<span class=\\"line\\"><span>        } else if is_odd(n_squared) {</span></span>\\n<span class=\\"line\\"><span>            // 如果是奇数就计数</span></span>\\n<span class=\\"line\\"><span>            acc += n_squared;</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>    println!(\\"imperative style: {}\\", acc);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 函数式的写法</span></span>\\n<span class=\\"line\\"><span>    let sum_of_squared_odd_numbers: u32 =</span></span>\\n<span class=\\"line\\"><span>        (0..).map(|n| n * n)             // 所有自然数取平方</span></span>\\n<span class=\\"line\\"><span>             .take_while(|&amp;n| n &lt; upper) // 取小于上限的</span></span>\\n<span class=\\"line\\"><span>             .filter(|&amp;n| is_odd(n))     // 取奇数</span></span>\\n<span class=\\"line\\"><span>             .fold(0, |sum, i| sum + i); // 最后加起来</span></span>\\n<span class=\\"line\\"><span>    println!(\\"functional style: {}\\", sum_of_squared_odd_numbers);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"fn/hof.md","value":{"title":"hof","path":"fn/hof.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"fn/hof.md"}]}}}');export{t as comp,c as data};
