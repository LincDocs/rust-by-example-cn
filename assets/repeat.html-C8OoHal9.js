import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(t,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="重复" tabindex="-1"><a class="header-anchor" href="#重复"><span>重复</span></a></h1><p>宏在参数列表中可以使用 <code>+</code> 来表示一个参数可能出现一次或多次，使用 <code>*</code> 来表示该参数可能出现零次或多次。</p><p>在下面例子中，把模式这样： <code>$(...),+</code> 包围起来，就可以匹配一个或多个用逗号隔开的表达式。另外注意到，宏定义的最后一个分支可以不用分号作为结束。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// \`min!\` 将求出任意数量的参数的最小值。</span></span>
<span class="line"><span>macro_rules! find_min {</span></span>
<span class="line"><span>    // 基本情形：</span></span>
<span class="line"><span>    ($x:expr) =&gt; ($x);</span></span>
<span class="line"><span>    // \`$x\` 后面跟着至少一个 \`$y,\`</span></span>
<span class="line"><span>    ($x:expr, $($y:expr),+) =&gt; (</span></span>
<span class="line"><span>        // 对 \`$x\` 后面的 \`$y\` 们调用 \`find_min!\` </span></span>
<span class="line"><span>        std::cmp::min($x, find_min!($($y),+))</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    println!(&quot;{}&quot;, find_min!(1u32));</span></span>
<span class="line"><span>    println!(&quot;{}&quot;, find_min!(1u32 + 2 , 2u32));</span></span>
<span class="line"><span>    println!(&quot;{}&quot;, find_min!(5u32, 2u32 * 3, 4u32));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const c=s(l,[["render",p],["__file","repeat.html.vue"]]),r=JSON.parse('{"path":"/macros/repeat.html","title":"重复","lang":"zh-CN","frontmatter":{"description":"重复 宏在参数列表中可以使用 + 来表示一个参数可能出现一次或多次，使用 * 来表示该参数可能出现零次或多次。 在下面例子中，把模式这样： $(...),+ 包围起来，就可以匹配一个或多个用逗号隔开的表达式。另外注意到，宏定义的最后一个分支可以不用分号作为结束。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/macros/repeat.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"重复"}],["meta",{"property":"og:description","content":"重复 宏在参数列表中可以使用 + 来表示一个参数可能出现一次或多次，使用 * 来表示该参数可能出现零次或多次。 在下面例子中，把模式这样： $(...),+ 包围起来，就可以匹配一个或多个用逗号隔开的表达式。另外注意到，宏定义的最后一个分支可以不用分号作为结束。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"重复\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.61,"words":182},"filePathRelative":"macros/repeat.md","excerpt":"\\n<p>宏在参数列表中可以使用 <code>+</code> 来表示一个参数可能出现一次或多次，使用 <code>*</code> 来表示该参数可能出现零次或多次。</p>\\n<p>在下面例子中，把模式这样： <code>$(...),+</code> 包围起来，就可以匹配一个或多个用逗号隔开的表达式。另外注意到，宏定义的最后一个分支可以不用分号作为结束。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// `min!` 将求出任意数量的参数的最小值。</span></span>\\n<span class=\\"line\\"><span>macro_rules! find_min {</span></span>\\n<span class=\\"line\\"><span>    // 基本情形：</span></span>\\n<span class=\\"line\\"><span>    ($x:expr) =&gt; ($x);</span></span>\\n<span class=\\"line\\"><span>    // `$x` 后面跟着至少一个 `$y,`</span></span>\\n<span class=\\"line\\"><span>    ($x:expr, $($y:expr),+) =&gt; (</span></span>\\n<span class=\\"line\\"><span>        // 对 `$x` 后面的 `$y` 们调用 `find_min!` </span></span>\\n<span class=\\"line\\"><span>        std::cmp::min($x, find_min!($($y),+))</span></span>\\n<span class=\\"line\\"><span>    )</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    println!(\\"{}\\", find_min!(1u32));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"{}\\", find_min!(1u32 + 2 , 2u32));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"{}\\", find_min!(5u32, 2u32 * 3, 4u32));</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"macros/repeat.md","value":{"title":"repeat","path":"macros/repeat.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"macros/repeat.md"}]}}}');export{c as comp,r as data};
