import{_ as n,e as a,k as e,o as i}from"./app-CY03Lsxp.js";const l={};function p(c,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="可变参数接口" tabindex="-1"><a class="header-anchor" href="#可变参数接口"><span>可变参数接口</span></a></h1><p>可变参数接口可以接受任意数目的参数。比如说 <code>println</code> 就可以，其参数的数目是由格式化字符串指定的。</p><p>我们可以把之前的 <code>calculate!</code> 宏改写成可变参数接口：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>macro_rules! calculate {</span></span>
<span class="line"><span>    // 单个 \`eval\` 的模式</span></span>
<span class="line"><span>    (eval $e:expr) =&gt; {</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            let val: usize = $e; // Force types to be integers</span></span>
<span class="line"><span>            println!(&quot;{} = {}&quot;, stringify!{$e}, val);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 递归地拆解多重的 \`eval\`</span></span>
<span class="line"><span>    (eval $e:expr, $(eval $es:expr),+) =&gt; {{
        calculate! { eval $e }
        calculate! { $(eval $es),+ }
    }};</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    calculate! { // 妈妈快看，可变参数的 \`calculate!\`！</span></span>
<span class="line"><span>        eval 1 + 2,</span></span>
<span class="line"><span>        eval 3 + 4,</span></span>
<span class="line"><span>        eval (2 * 3) + 1</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1 + 2 = 3</span></span>
<span class="line"><span>3 + 4 = 7</span></span>
<span class="line"><span>(2 * 3) + 1 = 7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)]))}const d=n(l,[["render",p],["__file","variadics.html.vue"]]),r=JSON.parse('{"path":"/macros/variadics.html","title":"可变参数接口","lang":"zh-CN","frontmatter":{"description":"可变参数接口 可变参数接口可以接受任意数目的参数。比如说 println 就可以，其参数的数目是由格式化字符串指定的。 我们可以把之前的 calculate! 宏改写成可变参数接口： 输出：","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/macros/variadics.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"可变参数接口"}],["meta",{"property":"og:description","content":"可变参数接口 可变参数接口可以接受任意数目的参数。比如说 println 就可以，其参数的数目是由格式化字符串指定的。 我们可以把之前的 calculate! 宏改写成可变参数接口： 输出："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"可变参数接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.51,"words":153},"filePathRelative":"macros/variadics.md","excerpt":"\\n<p>可变参数接口可以接受任意数目的参数。比如说 <code>println</code> 就可以，其参数的数目是由格式化字符串指定的。</p>\\n<p>我们可以把之前的 <code>calculate!</code> 宏改写成可变参数接口：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>macro_rules! calculate {</span></span>\\n<span class=\\"line\\"><span>    // 单个 `eval` 的模式</span></span>\\n<span class=\\"line\\"><span>    (eval $e:expr) =&gt; {</span></span>\\n<span class=\\"line\\"><span>        {</span></span>\\n<span class=\\"line\\"><span>            let val: usize = $e; // Force types to be integers</span></span>\\n<span class=\\"line\\"><span>            println!(\\"{} = {}\\", stringify!{$e}, val);</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 递归地拆解多重的 `eval`</span></span>\\n<span class=\\"line\\"><span>    (eval $e:expr, $(eval $es:expr),+) =&gt; {{\\n        calculate! { eval $e }\\n        calculate! { $(eval $es),+ }\\n    }};</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    calculate! { // 妈妈快看，可变参数的 `calculate!`！</span></span>\\n<span class=\\"line\\"><span>        eval 1 + 2,</span></span>\\n<span class=\\"line\\"><span>        eval 3 + 4,</span></span>\\n<span class=\\"line\\"><span>        eval (2 * 3) + 1</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"macros/variadics.md","value":{"title":"variadics","path":"macros/variadics.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"macros/variadics.md"}]}}}');export{d as comp,r as data};
