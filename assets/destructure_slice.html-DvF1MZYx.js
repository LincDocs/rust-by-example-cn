import{_ as p,e as r,k as t,f as i,g as e,i as s,h as l,r as d,o as c}from"./app-CVSWwIkE.js";const u={};function o(v,n){const a=d("RouteLink");return c(),r("div",null,[n[5]||(n[5]=t(`<h1 id="数组-切片" tabindex="-1"><a class="header-anchor" href="#数组-切片"><span>数组/切片</span></a></h1><p>像元组一样，数组和切片也可以这样解构:</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 尝试改变数组中的值，或者将其做成切片!</span></span>
<span class="line"><span>    let array = [1, -2, 6];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    match array {</span></span>
<span class="line"><span>        // 将第二个和第三个元素绑定到各自的变量</span></span>
<span class="line"><span>        [0, second, third] =&gt;</span></span>
<span class="line"><span>            println!(&quot;array[0] = 0, array[1] = {}, array[2] = {}&quot;, second, third),</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 单个值可以用 \`_\` 忽略</span></span>
<span class="line"><span>        [1, _, third] =&gt; println!(</span></span>
<span class="line"><span>            &quot;array[0] = 1, array[2] = {} and array[1] was ignored&quot;,</span></span>
<span class="line"><span>            third</span></span>
<span class="line"><span>        ),</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 你也可以绑定一些而忽略其余的</span></span>
<span class="line"><span>        [-1, second, ..] =&gt; println!(</span></span>
<span class="line"><span>            &quot;array[0] = -1, array[1] = {} and all the other ones were ignored&quot;,</span></span>
<span class="line"><span>            second</span></span>
<span class="line"><span>        ),</span></span>
<span class="line"><span>        // 下面的代码无法编译</span></span>
<span class="line"><span>        // [-1, second] =&gt; ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 或者将它们存储在另一个数组/切片中（类型取决于所匹配的值的类型）</span></span>
<span class="line"><span>        [3, second, tail @ ..] =&gt; println!(</span></span>
<span class="line"><span>            &quot;array[0] = 3, array[1] = {} and the other elements were {:?}&quot;,</span></span>
<span class="line"><span>            second, tail</span></span>
<span class="line"><span>        ),</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 结合这些模式，我们可以绑定第一个和最后一个值，并将其余的值存储在一个数组中</span></span>
<span class="line"><span>        [first, middle @ .., last] =&gt; println!(</span></span>
<span class="line"><span>            &quot;array[0] = {}, middle = {:?}, array[2] = {}&quot;,</span></span>
<span class="line"><span>            first, middle, last</span></span>
<span class="line"><span>        ),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,4)),i("p",null,[e(a,{to:"/primitives/array.html"},{default:l(()=>n[0]||(n[0]=[s("数组和切片")])),_:1}),n[2]||(n[2]=s(" 与 ")),n[3]||(n[3]=i("code",null,"@",-1)),n[4]||(n[4]=s(" 符号用法")),e(a,{to:"/flow_control/match/binding.html"},{default:l(()=>n[1]||(n[1]=[s("绑定")])),_:1})])])}const b=p(u,[["render",o],["__file","destructure_slice.html.vue"]]),h=JSON.parse('{"path":"/flow_control/match/destructuring/destructure_slice.html","title":"数组/切片","lang":"zh-CN","frontmatter":{"description":"数组/切片 像元组一样，数组和切片也可以这样解构: 参见： 与 @ 符号用法","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/flow_control/match/destructuring/destructure_slice.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"数组/切片"}],["meta",{"property":"og:description","content":"数组/切片 像元组一样，数组和切片也可以这样解构: 参见： 与 @ 符号用法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组/切片\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.9,"words":270},"filePathRelative":"flow_control/match/destructuring/destructure_slice.md","excerpt":"\\n<p>像元组一样，数组和切片也可以这样解构:</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 尝试改变数组中的值，或者将其做成切片!</span></span>\\n<span class=\\"line\\"><span>    let array = [1, -2, 6];</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    match array {</span></span>\\n<span class=\\"line\\"><span>        // 将第二个和第三个元素绑定到各自的变量</span></span>\\n<span class=\\"line\\"><span>        [0, second, third] =&gt;</span></span>\\n<span class=\\"line\\"><span>            println!(\\"array[0] = 0, array[1] = {}, array[2] = {}\\", second, third),</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 单个值可以用 `_` 忽略</span></span>\\n<span class=\\"line\\"><span>        [1, _, third] =&gt; println!(</span></span>\\n<span class=\\"line\\"><span>            \\"array[0] = 1, array[2] = {} and array[1] was ignored\\",</span></span>\\n<span class=\\"line\\"><span>            third</span></span>\\n<span class=\\"line\\"><span>        ),</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 你也可以绑定一些而忽略其余的</span></span>\\n<span class=\\"line\\"><span>        [-1, second, ..] =&gt; println!(</span></span>\\n<span class=\\"line\\"><span>            \\"array[0] = -1, array[1] = {} and all the other ones were ignored\\",</span></span>\\n<span class=\\"line\\"><span>            second</span></span>\\n<span class=\\"line\\"><span>        ),</span></span>\\n<span class=\\"line\\"><span>        // 下面的代码无法编译</span></span>\\n<span class=\\"line\\"><span>        // [-1, second] =&gt; ...</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 或者将它们存储在另一个数组/切片中（类型取决于所匹配的值的类型）</span></span>\\n<span class=\\"line\\"><span>        [3, second, tail @ ..] =&gt; println!(</span></span>\\n<span class=\\"line\\"><span>            \\"array[0] = 3, array[1] = {} and the other elements were {:?}\\",</span></span>\\n<span class=\\"line\\"><span>            second, tail</span></span>\\n<span class=\\"line\\"><span>        ),</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 结合这些模式，我们可以绑定第一个和最后一个值，并将其余的值存储在一个数组中</span></span>\\n<span class=\\"line\\"><span>        [first, middle @ .., last] =&gt; println!(</span></span>\\n<span class=\\"line\\"><span>            \\"array[0] = {}, middle = {:?}, array[2] = {}\\",</span></span>\\n<span class=\\"line\\"><span>            first, middle, last</span></span>\\n<span class=\\"line\\"><span>        ),</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"array","link":"primitives/array.html"},{"title":"binding","link":"flow_control/match/binding.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"flow_control/match/destructuring/destructure_slice.md","value":{"title":"destructure_slice","path":"flow_control/match/destructuring/destructure_slice.md","outlink":["primitives/array.md","flow_control/match/binding.md"],"backlink":["SUMMARY.md"]}},{"id":"primitives/array.md","value":{"title":"array","path":"primitives/array.md","outlink":[],"backlink":[]}},{"id":"flow_control/match/binding.md","value":{"title":"binding","path":"flow_control/match/binding.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"flow_control/match/destructuring/destructure_slice.md","target":"primitives/array.md"},{"source":"flow_control/match/destructuring/destructure_slice.md","target":"flow_control/match/binding.md"},{"source":"SUMMARY.md","target":"flow_control/match/destructuring/destructure_slice.md"}]}}}');export{b as comp,h as data};
