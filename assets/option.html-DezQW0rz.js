import{_ as s,e as i,k as a,o as e}from"./app-CY03Lsxp.js";const l={};function p(d,n){return e(),i("div",null,n[0]||(n[0]=[a(`<h1 id="选项-option" tabindex="-1"><a class="header-anchor" href="#选项-option"><span>选项 <code>Option</code></span></a></h1><p>有时候想要捕捉到程序某部分的失败信息，而不是调用 <code>panic!</code>；这可使用 <code>Option</code><br> 枚举类型来实现。</p><p><code>Option&lt;T&gt;</code> 有两个变量：</p><ul><li><code>None</code>，表明失败或缺少值</li><li><code>Some(value)</code>，元组结构体，封装了一个 <code>T</code> 类型的值 <code>value</code></li></ul><div class="language-rust,editable,ignore,mdbook-runnable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore,mdbook-runnable" data-title="rust,editable,ignore,mdbook-runnable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 不会 \`panic!\` 的整数除法。</span></span>
<span class="line"><span>fn checked_division(dividend: i32, divisor: i32) -&gt; Option&lt;i32&gt; {</span></span>
<span class="line"><span>    if divisor == 0 {</span></span>
<span class="line"><span>        // 失败表示成 \`None\` 取值</span></span>
<span class="line"><span>        None</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        // 结果 Result 被包装到 \`Some\` 取值中</span></span>
<span class="line"><span>        Some(dividend / divisor)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 此函数处理可能失败的除法</span></span>
<span class="line"><span>fn try_division(dividend: i32, divisor: i32) {</span></span>
<span class="line"><span>    // \`Option\` 值可以进行模式匹配，就和其他枚举类型一样</span></span>
<span class="line"><span>    match checked_division(dividend, divisor) {</span></span>
<span class="line"><span>        None =&gt; println!(&quot;{} / {} failed!&quot;, dividend, divisor),</span></span>
<span class="line"><span>        Some(quotient) =&gt; {</span></span>
<span class="line"><span>            println!(&quot;{} / {} = {}&quot;, dividend, divisor, quotient)</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    try_division(4, 2);</span></span>
<span class="line"><span>    try_division(1, 0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 绑定 \`None\` 到一个变量需要类型标注</span></span>
<span class="line"><span>    let none: Option&lt;i32&gt; = None;</span></span>
<span class="line"><span>    let _equivalent_none = None::&lt;i32&gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let optional_float = Some(0f32);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 解包 \`Some\` 将取出被包装的值。</span></span>
<span class="line"><span>    println!(&quot;{:?} unwraps to {:?}&quot;, optional_float, optional_float.unwrap());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 解包 \`None\` 将会引发 \`panic!\`。</span></span>
<span class="line"><span>    println!(&quot;{:?} unwraps to {:?}&quot;, none, none.unwrap());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)]))}const o=s(l,[["render",p],["__file","option.html.vue"]]),c=JSON.parse('{"path":"/std/option.html","title":"选项 Option","lang":"zh-CN","frontmatter":{"description":"选项 Option 有时候想要捕捉到程序某部分的失败信息，而不是调用 panic!；这可使用 Option 枚举类型来实现。 Option<T> 有两个变量： None，表明失败或缺少值 Some(value)，元组结构体，封装了一个 T 类型的值 value","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/std/option.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"选项 Option"}],["meta",{"property":"og:description","content":"选项 Option 有时候想要捕捉到程序某部分的失败信息，而不是调用 panic!；这可使用 Option 枚举类型来实现。 Option<T> 有两个变量： None，表明失败或缺少值 Some(value)，元组结构体，封装了一个 T 类型的值 value"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"选项 Option\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.83,"words":249},"filePathRelative":"std/option.md","excerpt":"\\n<p>有时候想要捕捉到程序某部分的失败信息，而不是调用 <code>panic!</code>；这可使用 <code>Option</code><br>\\n枚举类型来实现。</p>\\n<p><code>Option&lt;T&gt;</code> 有两个变量：</p>\\n<ul>\\n<li><code>None</code>，表明失败或缺少值</li>\\n<li><code>Some(value)</code>，元组结构体，封装了一个 <code>T</code> 类型的值 <code>value</code></li>\\n</ul>\\n<div class=\\"language-rust,editable,ignore,mdbook-runnable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable,ignore,mdbook-runnable\\" data-title=\\"rust,editable,ignore,mdbook-runnable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 不会 `panic!` 的整数除法。</span></span>\\n<span class=\\"line\\"><span>fn checked_division(dividend: i32, divisor: i32) -&gt; Option&lt;i32&gt; {</span></span>\\n<span class=\\"line\\"><span>    if divisor == 0 {</span></span>\\n<span class=\\"line\\"><span>        // 失败表示成 `None` 取值</span></span>\\n<span class=\\"line\\"><span>        None</span></span>\\n<span class=\\"line\\"><span>    } else {</span></span>\\n<span class=\\"line\\"><span>        // 结果 Result 被包装到 `Some` 取值中</span></span>\\n<span class=\\"line\\"><span>        Some(dividend / divisor)</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 此函数处理可能失败的除法</span></span>\\n<span class=\\"line\\"><span>fn try_division(dividend: i32, divisor: i32) {</span></span>\\n<span class=\\"line\\"><span>    // `Option` 值可以进行模式匹配，就和其他枚举类型一样</span></span>\\n<span class=\\"line\\"><span>    match checked_division(dividend, divisor) {</span></span>\\n<span class=\\"line\\"><span>        None =&gt; println!(\\"{} / {} failed!\\", dividend, divisor),</span></span>\\n<span class=\\"line\\"><span>        Some(quotient) =&gt; {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"{} / {} = {}\\", dividend, divisor, quotient)</span></span>\\n<span class=\\"line\\"><span>        },</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    try_division(4, 2);</span></span>\\n<span class=\\"line\\"><span>    try_division(1, 0);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 绑定 `None` 到一个变量需要类型标注</span></span>\\n<span class=\\"line\\"><span>    let none: Option&lt;i32&gt; = None;</span></span>\\n<span class=\\"line\\"><span>    let _equivalent_none = None::&lt;i32&gt;;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let optional_float = Some(0f32);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 解包 `Some` 将取出被包装的值。</span></span>\\n<span class=\\"line\\"><span>    println!(\\"{:?} unwraps to {:?}\\", optional_float, optional_float.unwrap());</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 解包 `None` 将会引发 `panic!`。</span></span>\\n<span class=\\"line\\"><span>    println!(\\"{:?} unwraps to {:?}\\", none, none.unwrap());</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"if_let","link":"flow_control/if_let.html"},{"title":"while_let","link":"flow_control/while_let.html"},{"title":"binding","link":"flow_control/match/binding.html"}],"localMap":{"nodes":[{"id":"std/option.md","value":{"title":"option","path":"std/option.md","outlink":[],"backlink":["SUMMARY.md","flow_control/if_let.md","flow_control/while_let.md","flow_control/match/binding.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"flow_control/if_let.md","value":{"title":"if_let","path":"flow_control/if_let.md","outlink":[],"backlink":[]}},{"id":"flow_control/while_let.md","value":{"title":"while_let","path":"flow_control/while_let.md","outlink":[],"backlink":[]}},{"id":"flow_control/match/binding.md","value":{"title":"binding","path":"flow_control/match/binding.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std/option.md"},{"source":"flow_control/if_let.md","target":"std/option.md"},{"source":"flow_control/while_let.md","target":"std/option.md"},{"source":"flow_control/match/binding.md","target":"std/option.md"}]}}}');export{o as comp,c as data};
