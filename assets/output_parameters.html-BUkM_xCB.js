import{_ as l,e as p,k as r,f as s,i as e,g as t,h as i,r as o,o as d}from"./app-CVSWwIkE.js";const u={};function c(m,n){const a=o("RouteLink");return d(),p("div",null,[n[8]||(n[8]=r(`<h1 id="作为输出参数" tabindex="-1"><a class="header-anchor" href="#作为输出参数"><span>作为输出参数</span></a></h1><p>闭包作为输入参数是可能的，所以返回闭包作为输出参数（output parameter）也应该是可能的。然而返回闭包类型会有问题，因为目前 Rust 只支持返回具体（非泛型）的类型。按照定义，匿名的闭包的类型是未知的，所以只有使用<code>impl Trait</code>才能返回一个闭包。</p><p>返回闭包的有效特征是：</p><ul><li><code>Fn</code></li><li><code>FnMut</code></li><li><code>FnOnce</code></li></ul><p>除此之外，还必须使用 <code>move</code> 关键字，它表明所有的捕获都是通过值进行的。这是必须的，因为在函数退出时，任何通过引用的捕获都被丢弃，在闭包中留下无效的引用。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn create_fn() -&gt; impl Fn() {</span></span>
<span class="line"><span>    let text = &quot;Fn&quot;.to_owned();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    move || println!(&quot;This is a: {}&quot;, text)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn create_fnmut() -&gt; impl FnMut() {</span></span>
<span class="line"><span>    let text = &quot;FnMut&quot;.to_owned();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    move || println!(&quot;This is a: {}&quot;, text)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn create_fnonce() -&gt; impl FnOnce() {</span></span>
<span class="line"><span>    let text = &quot;FnOnce&quot;.to_owned();</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    move || println!(&quot;This is a: {}&quot;, text)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let fn_plain = create_fn();</span></span>
<span class="line"><span>    let mut fn_mut = create_fnmut();</span></span>
<span class="line"><span>    let fn_once = create_fnonce();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fn_plain();</span></span>
<span class="line"><span>    fn_mut();</span></span>
<span class="line"><span>    fn_once();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,7)),s("p",null,[n[2]||(n[2]=s("a",{href:"https://rustwiki.org/zh-CN/std/ops/trait.Fn.html",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"Fn")],-1)),n[3]||(n[3]=e(", ")),n[4]||(n[4]=s("a",{href:"https://rustwiki.org/zh-CN/std/ops/trait.FnMut.html",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"FnMut")],-1)),n[5]||(n[5]=e(", ")),t(a,{to:"/generics.html"},{default:i(()=>n[0]||(n[0]=[e("泛型")])),_:1}),n[6]||(n[6]=e(" 和 ")),t(a,{to:"/trait/impl_trait.html"},{default:i(()=>n[1]||(n[1]=[e("impl Trait")])),_:1}),n[7]||(n[7]=e("."))])])}const b=l(u,[["render",c],["__file","output_parameters.html.vue"]]),h=JSON.parse('{"path":"/fn/closures/output_parameters.html","title":"作为输出参数","lang":"zh-CN","frontmatter":{"description":"作为输出参数 闭包作为输入参数是可能的，所以返回闭包作为输出参数（output parameter）也应该是可能的。然而返回闭包类型会有问题，因为目前 Rust 只支持返回具体（非泛型）的类型。按照定义，匿名的闭包的类型是未知的，所以只有使用impl Trait才能返回一个闭包。 返回闭包的有效特征是： Fn FnMut FnOnce 除此之外，还必须...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/fn/closures/output_parameters.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"作为输出参数"}],["meta",{"property":"og:description","content":"作为输出参数 闭包作为输入参数是可能的，所以返回闭包作为输出参数（output parameter）也应该是可能的。然而返回闭包类型会有问题，因为目前 Rust 只支持返回具体（非泛型）的类型。按照定义，匿名的闭包的类型是未知的，所以只有使用impl Trait才能返回一个闭包。 返回闭包的有效特征是： Fn FnMut FnOnce 除此之外，还必须..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"作为输出参数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.88,"words":265},"filePathRelative":"fn/closures/output_parameters.md","excerpt":"\\n<p>闭包作为输入参数是可能的，所以返回闭包作为输出参数（output parameter）也应该是可能的。然而返回闭包类型会有问题，因为目前 Rust 只支持返回具体（非泛型）的类型。按照定义，匿名的闭包的类型是未知的，所以只有使用<code>impl Trait</code>才能返回一个闭包。</p>\\n<p>返回闭包的有效特征是：</p>\\n<ul>\\n<li><code>Fn</code></li>\\n<li><code>FnMut</code></li>\\n<li><code>FnOnce</code></li>\\n</ul>\\n<p>除此之外，还必须使用 <code>move</code> 关键字，它表明所有的捕获都是通过值进行的。这是必须的，因为在函数退出时，任何通过引用的捕获都被丢弃，在闭包中留下无效的引用。</p>","autoDesc":true,"bioChainData":{"outlink":[{"title":"generics","link":"generics.html"},{"title":"impl_trait","link":"trait/impl_trait.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"fn/closures/output_parameters.md","value":{"title":"output_parameters","path":"fn/closures/output_parameters.md","outlink":["generics.md","trait/impl_trait.md"],"backlink":["SUMMARY.md"]}},{"id":"generics.md","value":{"title":"generics","path":"generics.md","outlink":[],"backlink":[]}},{"id":"trait/impl_trait.md","value":{"title":"impl_trait","path":"trait/impl_trait.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"fn/closures/output_parameters.md","target":"generics.md"},{"source":"fn/closures/output_parameters.md","target":"trait/impl_trait.md"},{"source":"SUMMARY.md","target":"fn/closures/output_parameters.md"}]}}}');export{b as comp,h as data};
