import{_ as n,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="dsl-领域专用语言" tabindex="-1"><a class="header-anchor" href="#dsl-领域专用语言"><span>DSL（领域专用语言）</span></a></h1><p>DSL 是 Rust 的宏中集成的微型 “语言”。这种语言是完全合法的，因为宏系统会把它转换成普通的 Rust 语法树，它只不过看起来像是另一种语言而已。这就允许你为一些特定功能创造一套简洁直观的语法（当然是有限制的）。</p><p>比如说我想要定义一套小的计算器 API，可以传给它表达式，它会把结果打印到控制台上。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>macro_rules! calculate {</span></span>
<span class="line"><span>    (eval $e:expr) =&gt; {</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            let val: usize = $e; // 强制类型为整型</span></span>
<span class="line"><span>            println!(&quot;{} = {}&quot;, stringify!{$e}, val);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    calculate! {</span></span>
<span class="line"><span>        eval 1 + 2 // 看到了吧，\`eval\` 可并不是 Rust 的关键字！</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    calculate! {</span></span>
<span class="line"><span>        eval (1 + 2) * (3 / 4)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1 + 2 = 3</span></span>
<span class="line"><span>(1 + 2) * (3 / 4) = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子非常简单，但是已经有很多利用宏开发的复杂接口了，比如<br><a href="https://crates.io/crates/lazy_static" target="_blank" rel="noopener noreferrer"><code>lazy_static</code></a> 和<br><a href="https://crates.io/crates/clap" target="_blank" rel="noopener noreferrer"><code>clap</code></a>。</p>`,7)]))}const d=n(l,[["render",p],["__file","dsl.html.vue"]]),r=JSON.parse('{"path":"/macros/dsl.html","title":"DSL（领域专用语言）","lang":"zh-CN","frontmatter":{"description":"DSL（领域专用语言） DSL 是 Rust 的宏中集成的微型 “语言”。这种语言是完全合法的，因为宏系统会把它转换成普通的 Rust 语法树，它只不过看起来像是另一种语言而已。这就允许你为一些特定功能创造一套简洁直观的语法（当然是有限制的）。 比如说我想要定义一套小的计算器 API，可以传给它表达式，它会把结果打印到控制台上。 输出: 这个例子非常简...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/macros/dsl.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"DSL（领域专用语言）"}],["meta",{"property":"og:description","content":"DSL（领域专用语言） DSL 是 Rust 的宏中集成的微型 “语言”。这种语言是完全合法的，因为宏系统会把它转换成普通的 Rust 语法树，它只不过看起来像是另一种语言而已。这就允许你为一些特定功能创造一套简洁直观的语法（当然是有限制的）。 比如说我想要定义一套小的计算器 API，可以传给它表达式，它会把结果打印到控制台上。 输出: 这个例子非常简..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DSL（领域专用语言）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.76,"words":228},"filePathRelative":"macros/dsl.md","excerpt":"\\n<p>DSL 是 Rust 的宏中集成的微型 “语言”。这种语言是完全合法的，因为宏系统会把它转换成普通的 Rust 语法树，它只不过看起来像是另一种语言而已。这就允许你为一些特定功能创造一套简洁直观的语法（当然是有限制的）。</p>\\n<p>比如说我想要定义一套小的计算器 API，可以传给它表达式，它会把结果打印到控制台上。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>macro_rules! calculate {</span></span>\\n<span class=\\"line\\"><span>    (eval $e:expr) =&gt; {</span></span>\\n<span class=\\"line\\"><span>        {</span></span>\\n<span class=\\"line\\"><span>            let val: usize = $e; // 强制类型为整型</span></span>\\n<span class=\\"line\\"><span>            println!(\\"{} = {}\\", stringify!{$e}, val);</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    calculate! {</span></span>\\n<span class=\\"line\\"><span>        eval 1 + 2 // 看到了吧，`eval` 可并不是 Rust 的关键字！</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    calculate! {</span></span>\\n<span class=\\"line\\"><span>        eval (1 + 2) * (3 / 4)</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"macros/dsl.md","value":{"title":"dsl","path":"macros/dsl.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"macros/dsl.md"}]}}}');export{d as comp,r as data};
