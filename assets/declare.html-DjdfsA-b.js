import{_ as s,e as a,k as i,o as e}from"./app-CVSWwIkE.js";const l={};function p(d,n){return e(),a("div",null,n[0]||(n[0]=[i(`<h1 id="变量先声明" tabindex="-1"><a class="header-anchor" href="#变量先声明"><span>变量先声明</span></a></h1><p>可以先声明（declare）变量绑定，后面才将它们初始化（initialize）。但是这种做法很少用，因为这样可能导致使用未初始化的变量。</p><div class="language-rust,editable,ignore,mdbook-runnable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore,mdbook-runnable" data-title="rust,editable,ignore,mdbook-runnable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 声明一个变量绑定</span></span>
<span class="line"><span>    let a_binding;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        let x = 2;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 初始化一个绑定</span></span>
<span class="line"><span>        a_binding = x * x;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;a binding: {}&quot;, a_binding);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let another_binding;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！使用了未初始化的绑定</span></span>
<span class="line"><span>    println!(&quot;another binding: {}&quot;, another_binding);</span></span>
<span class="line"><span>    // 改正 ^ 注释掉此行</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    another_binding = 1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;another binding: {}&quot;, another_binding);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器禁止使用未经初始化的变量，因为这会产生未定义行为（undefined behavior）。</p>`,4)]))}const t=s(l,[["render",p],["__file","declare.html.vue"]]),c=JSON.parse('{"path":"/variable_bindings/declare.html","title":"变量先声明","lang":"zh-CN","frontmatter":{"description":"变量先声明 可以先声明（declare）变量绑定，后面才将它们初始化（initialize）。但是这种做法很少用，因为这样可能导致使用未初始化的变量。 编译器禁止使用未经初始化的变量，因为这会产生未定义行为（undefined behavior）。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/variable_bindings/declare.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"变量先声明"}],["meta",{"property":"og:description","content":"变量先声明 可以先声明（declare）变量绑定，后面才将它们初始化（initialize）。但是这种做法很少用，因为这样可能导致使用未初始化的变量。 编译器禁止使用未经初始化的变量，因为这会产生未定义行为（undefined behavior）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"变量先声明\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.49,"words":148},"filePathRelative":"variable_bindings/declare.md","excerpt":"\\n<p>可以先声明（declare）变量绑定，后面才将它们初始化（initialize）。但是这种做法很少用，因为这样可能导致使用未初始化的变量。</p>\\n<div class=\\"language-rust,editable,ignore,mdbook-runnable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable,ignore,mdbook-runnable\\" data-title=\\"rust,editable,ignore,mdbook-runnable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 声明一个变量绑定</span></span>\\n<span class=\\"line\\"><span>    let a_binding;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    {</span></span>\\n<span class=\\"line\\"><span>        let x = 2;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // 初始化一个绑定</span></span>\\n<span class=\\"line\\"><span>        a_binding = x * x;</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"a binding: {}\\", a_binding);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let another_binding;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 报错！使用了未初始化的绑定</span></span>\\n<span class=\\"line\\"><span>    println!(\\"another binding: {}\\", another_binding);</span></span>\\n<span class=\\"line\\"><span>    // 改正 ^ 注释掉此行</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    another_binding = 1;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"another binding: {}\\", another_binding);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"variable_bindings/declare.md","value":{"title":"declare","path":"variable_bindings/declare.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"variable_bindings/declare.md"}]}}}');export{t as comp,c as data};
