import{_ as n,e as i,k as a,o as e}from"./app-CY03Lsxp.js";const l={};function p(d,s){return e(),i("div",null,s[0]||(s[0]=[a(`<h1 id="panic" tabindex="-1"><a class="header-anchor" href="#panic"><span><code>panic!</code></span></a></h1><p><code>panic!</code> 宏可用于产生一个 panic （恐慌），并开始回退（unwind）它的栈。在回退栈的同时，运行时将会释放该线程所<strong>拥有</strong>的所有资源，这是通过调用线程中所有对象的析构函数完成的。</p><p>因为我们正在处理的程序只有一个线程，<code>panic!</code> 将会引发程序报告 panic 消息并退出。</p><div class="language-rust,editable,ignore,mdbook-runnable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore,mdbook-runnable" data-title="rust,editable,ignore,mdbook-runnable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 整型除法（/）的重新实现</span></span>
<span class="line"><span>fn division(dividend: i32, divisor: i32) -&gt; i32 {</span></span>
<span class="line"><span>    if divisor == 0 {</span></span>
<span class="line"><span>        // 除以 0 会引发 panic</span></span>
<span class="line"><span>        panic!(&quot;division by zero&quot;);</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        dividend / divisor</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// \`main\` 任务</span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 堆分配的整数</span></span>
<span class="line"><span>    let _x = Box::new(0i32);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 此操作将会引发一个任务失败</span></span>
<span class="line"><span>    division(3, 0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;This point won&#39;t be reached!&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`_x\` 应当会在此处被销毁</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>panic!</code> 不会泄露内存：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic.rs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valgrind</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./panic</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Memcheck,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> memory</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> error</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> detector</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Copyright</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (C) 2002-2013, and GNU GPL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;d, by Julian Seward et al.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== Command: ./panic</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">thread &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;main&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39; panicked at &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">division by zero</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;, panic.rs:5</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== HEAP SUMMARY:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401==     in use at exit: 0 bytes in 0 blocks</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401==   total heap usage: 18 allocs, 18 frees, 1,648 bytes allocated</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== All heap blocks were freed -- no leaks are possible</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== For counts of detected and suppressed errors, rerun with: -v</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==4401== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)]))}const c=n(l,[["render",p],["__file","panic.html.vue"]]),r=JSON.parse('{"path":"/std/panic.html","title":"panic!","lang":"zh-CN","frontmatter":{"description":"panic! panic! 宏可用于产生一个 panic （恐慌），并开始回退（unwind）它的栈。在回退栈的同时，运行时将会释放该线程所拥有的所有资源，这是通过调用线程中所有对象的析构函数完成的。 因为我们正在处理的程序只有一个线程，panic! 将会引发程序报告 panic 消息并退出。 可以看到，panic! 不会泄露内存：","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/std/panic.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"panic!"}],["meta",{"property":"og:description","content":"panic! panic! 宏可用于产生一个 panic （恐慌），并开始回退（unwind）它的栈。在回退栈的同时，运行时将会释放该线程所拥有的所有资源，这是通过调用线程中所有对象的析构函数完成的。 因为我们正在处理的程序只有一个线程，panic! 将会引发程序报告 panic 消息并退出。 可以看到，panic! 不会泄露内存："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"panic!\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.06,"words":317},"filePathRelative":"std/panic.md","excerpt":"\\n<p><code>panic!</code> 宏可用于产生一个 panic （恐慌），并开始回退（unwind）它的栈。在回退栈的同时，运行时将会释放该线程所<strong>拥有</strong>的所有资源，这是通过调用线程中所有对象的析构函数完成的。</p>\\n<p>因为我们正在处理的程序只有一个线程，<code>panic!</code> 将会引发程序报告 panic 消息并退出。</p>\\n<div class=\\"language-rust,editable,ignore,mdbook-runnable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable,ignore,mdbook-runnable\\" data-title=\\"rust,editable,ignore,mdbook-runnable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 整型除法（/）的重新实现</span></span>\\n<span class=\\"line\\"><span>fn division(dividend: i32, divisor: i32) -&gt; i32 {</span></span>\\n<span class=\\"line\\"><span>    if divisor == 0 {</span></span>\\n<span class=\\"line\\"><span>        // 除以 0 会引发 panic</span></span>\\n<span class=\\"line\\"><span>        panic!(\\"division by zero\\");</span></span>\\n<span class=\\"line\\"><span>    } else {</span></span>\\n<span class=\\"line\\"><span>        dividend / divisor</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// `main` 任务</span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 堆分配的整数</span></span>\\n<span class=\\"line\\"><span>    let _x = Box::new(0i32);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 此操作将会引发一个任务失败</span></span>\\n<span class=\\"line\\"><span>    division(3, 0);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"This point won\'t be reached!\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `_x` 应当会在此处被销毁</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"unit_testing","link":"testing/unit_testing.html"}],"localMap":{"nodes":[{"id":"std/panic.md","value":{"title":"panic","path":"std/panic.md","outlink":[],"backlink":["SUMMARY.md","testing/unit_testing.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"testing/unit_testing.md","value":{"title":"unit_testing","path":"testing/unit_testing.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std/panic.md"},{"source":"testing/unit_testing.md","target":"std/panic.md"}]}}}');export{c as comp,r as data};
