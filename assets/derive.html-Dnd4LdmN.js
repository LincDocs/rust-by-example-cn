import{_ as t,e as i,f as n,k as r,i as a,g as l,h as p,r as d,o}from"./app-CVSWwIkE.js";const c={};function m(u,e){const s=d("RouteLink");return o(),i("div",null,[e[5]||(e[5]=n("h1",{id:"派生",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#派生"},[n("span",null,"派生")])],-1)),n("p",null,[e[1]||(e[1]=a("通过 ")),e[2]||(e[2]=n("code",null,"#[derive]",-1)),e[3]||(e[3]=a()),l(s,{to:"/attribute.html"},{default:p(()=>e[0]||(e[0]=[a("属性")])),_:1}),e[4]||(e[4]=a("，编译器能够提供某些 trait 的基本实现。如果需要更复杂的行为，这些 trait 也可以手动实现。"))]),e[6]||(e[6]=r(`<p>下面是可以自动派生的 trait：</p><ul><li>比较 trait:<br><a href="https://rustwiki.org/zh-CN/std/cmp/trait.Eq.html" target="_blank" rel="noopener noreferrer"><code>Eq</code></a>, <a href="https://rustwiki.org/zh-CN/std/cmp/trait.PartialEq.html" target="_blank" rel="noopener noreferrer"><code>PartialEq</code></a>, <a href="https://rustwiki.org/zh-CN/std/cmp/trait.Ord.html" target="_blank" rel="noopener noreferrer"><code>Ord</code></a>, <a href="https://rustwiki.org/zh-CN/std/cmp/trait.PartialOrd.html" target="_blank" rel="noopener noreferrer"><code>PartialOrd</code></a></li><li><a href="https://rustwiki.org/zh-CN/std/clone/trait.Clone.html" target="_blank" rel="noopener noreferrer"><code>Clone</code></a>, 用来从 <code>&amp;T</code> 创建副本 <code>T</code>。</li><li><a href="https://rustwiki.org/zh-CN/core/marker/trait.Copy.html" target="_blank" rel="noopener noreferrer"><code>Copy</code></a>，使类型具有 “复制语义”（copy semantics）而非 “移动语义”（move semantics）。</li><li><a href="https://rustwiki.org/zh-CN/std/hash/trait.Hash.html" target="_blank" rel="noopener noreferrer"><code>Hash</code></a>，从 <code>&amp;T</code> 计算哈希值（hash）。</li><li><a href="https://rustwiki.org/zh-CN/std/default/trait.Default.html" target="_blank" rel="noopener noreferrer"><code>Default</code></a>, 创建数据类型的一个空实例。</li><li><a href="https://rustwiki.org/zh-CN/std/fmt/trait.Debug.html" target="_blank" rel="noopener noreferrer"><code>Debug</code></a>，使用 <code>{:?}</code> formatter 来格式化一个值。</li></ul><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// \`Centimeters\`，可以比较的元组结构体</span></span>
<span class="line"><span>#[derive(PartialEq, PartialOrd)]</span></span>
<span class="line"><span>struct Centimeters(f64);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// \`Inches\`，可以打印的元组结构体</span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct Inches(i32);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl Inches {</span></span>
<span class="line"><span>    fn to_centimeters(&amp;self) -&gt; Centimeters {</span></span>
<span class="line"><span>        let &amp;Inches(inches) = self;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        Centimeters(inches as f64 * 2.54)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// \`Seconds\`，不带附加属性的元组结构体</span></span>
<span class="line"><span>struct Seconds(i32);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let _one_second = Seconds(1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错：\`Seconds\` 不能打印；它没有实现 \`Debug\` trait</span></span>
<span class="line"><span>    //println!(&quot;One second looks like: {:?}&quot;, _one_second);</span></span>
<span class="line"><span>    // 试一试 ^ 取消此行注释</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错：\`Seconds\`不能比较；它没有实现 \`PartialEq\` trait</span></span>
<span class="line"><span>    //let _this_is_true = (_one_second == _one_second);</span></span>
<span class="line"><span>    // 试一试 ^ 取消此行注释</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let foot = Inches(12);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;One foot equals {:?}&quot;, foot);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let meter = Centimeters(100.0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let cmp =</span></span>
<span class="line"><span>        if foot.to_centimeters() &lt; meter {</span></span>
<span class="line"><span>            &quot;smaller&quot;</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            &quot;bigger&quot;</span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;One foot is {} than one meter.&quot;, cmp);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见</span></a></h3><p><a href="https://rustwiki.org/zh-CN/reference/attributes.html#%E6%B4%BE%E7%94%9F" target="_blank" rel="noopener noreferrer"><code>derive</code></a></p>`,5))])}const v=t(c,[["render",m],["__file","derive.html.vue"]]),b=JSON.parse('{"path":"/trait/derive.html","title":"派生","lang":"zh-CN","frontmatter":{"description":"派生 通过 #[derive] ，编译器能够提供某些 trait 的基本实现。如果需要更复杂的行为，这些 trait 也可以手动实现。 下面是可以自动派生的 trait： 比较 trait: Eq, PartialEq, Ord, PartialOrd Clone, 用来从 &T 创建副本 T。 Copy，使类型具有 “复制语义”（copy seman...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/trait/derive.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"派生"}],["meta",{"property":"og:description","content":"派生 通过 #[derive] ，编译器能够提供某些 trait 的基本实现。如果需要更复杂的行为，这些 trait 也可以手动实现。 下面是可以自动派生的 trait： 比较 trait: Eq, PartialEq, Ord, PartialOrd Clone, 用来从 &T 创建副本 T。 Copy，使类型具有 “复制语义”（copy seman..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"派生\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.16,"words":349},"filePathRelative":"trait/derive.md","excerpt":"\\n<p>通过 <code>#[derive]</code> <a href=\\"/rust-by-example-cn-/attribute.html\\" target=\\"_blank\\">属性</a>，编译器能够提供某些 trait 的基本实现。如果需要更复杂的行为，这些 trait 也可以手动实现。</p>\\n<p>下面是可以自动派生的 trait：</p>\\n<ul>\\n<li>比较 trait:<br>\\n<a href=\\"https://rustwiki.org/zh-CN/std/cmp/trait.Eq.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Eq</code></a>, <a href=\\"https://rustwiki.org/zh-CN/std/cmp/trait.PartialEq.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>PartialEq</code></a>, <a href=\\"https://rustwiki.org/zh-CN/std/cmp/trait.Ord.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Ord</code></a>, <a href=\\"https://rustwiki.org/zh-CN/std/cmp/trait.PartialOrd.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>PartialOrd</code></a></li>\\n<li><a href=\\"https://rustwiki.org/zh-CN/std/clone/trait.Clone.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Clone</code></a>, 用来从 <code>&amp;T</code> 创建副本 <code>T</code>。</li>\\n<li><a href=\\"https://rustwiki.org/zh-CN/core/marker/trait.Copy.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Copy</code></a>，使类型具有 “复制语义”（copy semantics）而非 “移动语义”（move semantics）。</li>\\n<li><a href=\\"https://rustwiki.org/zh-CN/std/hash/trait.Hash.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Hash</code></a>，从 <code>&amp;T</code> 计算哈希值（hash）。</li>\\n<li><a href=\\"https://rustwiki.org/zh-CN/std/default/trait.Default.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Default</code></a>, 创建数据类型的一个空实例。</li>\\n<li><a href=\\"https://rustwiki.org/zh-CN/std/fmt/trait.Debug.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Debug</code></a>，使用 <code>{:?}</code> formatter 来格式化一个值。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[{"title":"attribute","link":"attribute.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"phantom","link":"generics/phantom.html"},{"title":"print_debug","link":"hello/print/print_debug.html"},{"title":"print_display","link":"hello/print/print_display.html"}],"localMap":{"nodes":[{"id":"trait/derive.md","value":{"title":"derive","path":"trait/derive.md","outlink":["attribute.md"],"backlink":["SUMMARY.md","generics/phantom.md","hello/print/print_debug.md","hello/print/print_display.md"]}},{"id":"attribute.md","value":{"title":"attribute","path":"attribute.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"generics/phantom.md","value":{"title":"phantom","path":"generics/phantom.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_debug.md","value":{"title":"print_debug","path":"hello/print/print_debug.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display.md","value":{"title":"print_display","path":"hello/print/print_display.md","outlink":[],"backlink":[]}}],"links":[{"source":"trait/derive.md","target":"attribute.md"},{"source":"SUMMARY.md","target":"trait/derive.md"},{"source":"generics/phantom.md","target":"trait/derive.md"},{"source":"hello/print/print_debug.md","target":"trait/derive.md"},{"source":"hello/print/print_display.md","target":"trait/derive.md"}]}}}');export{v as comp,b as data};
