import{_ as n,e as a,k as i,o as e}from"./app-CY03Lsxp.js";const l={};function p(c,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h1><p>方法（method）是依附于对象的函数。这些方法通过关键字 <code>self</code> 来访问对象中的数据和其他。方法在 <code>impl</code> 代码块中定义。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct Point {</span></span>
<span class="line"><span>    x: f64,</span></span>
<span class="line"><span>    y: f64,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 实现的代码块，\`Point\` 的所有方法都在这里给出</span></span>
<span class="line"><span>impl Point {</span></span>
<span class="line"><span>    // 这是一个静态方法（static method）</span></span>
<span class="line"><span>    // 静态方法不需要被实例调用</span></span>
<span class="line"><span>    // 这类方法一般用作构造器（constructor）</span></span>
<span class="line"><span>    fn origin() -&gt; Point {</span></span>
<span class="line"><span>        Point { x: 0.0, y: 0.0 }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 另外一个静态方法，需要两个参数：</span></span>
<span class="line"><span>    fn new(x: f64, y: f64) -&gt; Point {</span></span>
<span class="line"><span>        Point { x: x, y: y }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct Rectangle {</span></span>
<span class="line"><span>    p1: Point,</span></span>
<span class="line"><span>    p2: Point,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl Rectangle {</span></span>
<span class="line"><span>    // 这是一个实例方法（instance method）</span></span>
<span class="line"><span>    // \`&amp;self\` 是 \`self: &amp;Self\` 的语法糖（sugar），其中 \`Self\` 是方法调用者的</span></span>
<span class="line"><span>    // 类型。在这个例子中 \`Self\` = \`Rectangle\`</span></span>
<span class="line"><span>    fn area(&amp;self) -&gt; f64 {</span></span>
<span class="line"><span>        // \`self\` 通过点运算符来访问结构体字段</span></span>
<span class="line"><span>        let Point { x: x1, y: y1 } = self.p1;</span></span>
<span class="line"><span>        let Point { x: x2, y: y2 } = self.p2;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // \`abs\` 是一个 \`f64\` 类型的方法，返回调用者的绝对值</span></span>
<span class="line"><span>        ((x1 - x2) * (y1 - y2)).abs()</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fn perimeter(&amp;self) -&gt; f64 {</span></span>
<span class="line"><span>        let Point { x: x1, y: y1 } = self.p1;</span></span>
<span class="line"><span>        let Point { x: x2, y: y2 } = self.p2;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        2.0 * ((x1 - x2).abs() + (y1 - y2).abs())</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 这个方法要求调用者是可变的</span></span>
<span class="line"><span>    // \`&amp;mut self\` 为 \`self: &amp;mut Self\` 的语法糖</span></span>
<span class="line"><span>    fn translate(&amp;mut self, x: f64, y: f64) {</span></span>
<span class="line"><span>        self.p1.x += x;</span></span>
<span class="line"><span>        self.p2.x += x;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        self.p1.y += y;</span></span>
<span class="line"><span>        self.p2.y += y;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// \`Pair\` 拥有资源：两个堆分配的整型</span></span>
<span class="line"><span>struct Pair(Box&lt;i32&gt;, Box&lt;i32&gt;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl Pair {</span></span>
<span class="line"><span>    // 这个方法会 “消耗” 调用者的资源</span></span>
<span class="line"><span>    // \`self\` 为 \`self: Self\` 的语法糖</span></span>
<span class="line"><span>    fn destroy(self) {</span></span>
<span class="line"><span>        // 解构 \`self\`</span></span>
<span class="line"><span>        let Pair(first, second) = self;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        println!(&quot;Destroying Pair({}, {})&quot;, first, second);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // \`first\` 和 \`second\` 离开作用域后释放</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let rectangle = Rectangle {</span></span>
<span class="line"><span>        // 静态方法使用双冒号调用</span></span>
<span class="line"><span>        p1: Point::origin(),</span></span>
<span class="line"><span>        p2: Point::new(3.0, 4.0),</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 实例方法通过点运算符来调用</span></span>
<span class="line"><span>    // 注意第一个参数 \`&amp;self\` 是隐式传递的，亦即：</span></span>
<span class="line"><span>    // \`rectangle.perimeter()\` === \`Rectangle::perimeter(&amp;rectangle)\`</span></span>
<span class="line"><span>    println!(&quot;Rectangle perimeter: {}&quot;, rectangle.perimeter());</span></span>
<span class="line"><span>    println!(&quot;Rectangle area: {}&quot;, rectangle.area());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let mut square = Rectangle {</span></span>
<span class="line"><span>        p1: Point::origin(),</span></span>
<span class="line"><span>        p2: Point::new(1.0, 1.0),</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！ \`rectangle\` 是不可变的，但这方法需要一个可变对象</span></span>
<span class="line"><span>    //rectangle.translate(1.0, 0.0);</span></span>
<span class="line"><span>    // 试一试 ^ 去掉此行的注释</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 正常运行！可变对象可以调用可变方法</span></span>
<span class="line"><span>    square.translate(1.0, 1.0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let pair = Pair(Box::new(1), Box::new(2));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    pair.destroy();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错！前面的 \`destroy\` 调用 “消耗了” \`pair\`</span></span>
<span class="line"><span>    //pair.destroy();</span></span>
<span class="line"><span>    // 试一试 ^ 将此行注释去掉</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const t=n(l,[["render",p],["__file","methods.html.vue"]]),v=JSON.parse('{"path":"/fn/methods.html","title":"方法","lang":"zh-CN","frontmatter":{"description":"方法 方法（method）是依附于对象的函数。这些方法通过关键字 self 来访问对象中的数据和其他。方法在 impl 代码块中定义。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/fn/methods.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"方法"}],["meta",{"property":"og:description","content":"方法 方法（method）是依附于对象的函数。这些方法通过关键字 self 来访问对象中的数据和其他。方法在 impl 代码块中定义。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.89,"words":567},"filePathRelative":"fn/methods.md","excerpt":"\\n<p>方法（method）是依附于对象的函数。这些方法通过关键字 <code>self</code> 来访问对象中的数据和其他。方法在 <code>impl</code> 代码块中定义。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>struct Point {</span></span>\\n<span class=\\"line\\"><span>    x: f64,</span></span>\\n<span class=\\"line\\"><span>    y: f64,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 实现的代码块，`Point` 的所有方法都在这里给出</span></span>\\n<span class=\\"line\\"><span>impl Point {</span></span>\\n<span class=\\"line\\"><span>    // 这是一个静态方法（static method）</span></span>\\n<span class=\\"line\\"><span>    // 静态方法不需要被实例调用</span></span>\\n<span class=\\"line\\"><span>    // 这类方法一般用作构造器（constructor）</span></span>\\n<span class=\\"line\\"><span>    fn origin() -&gt; Point {</span></span>\\n<span class=\\"line\\"><span>        Point { x: 0.0, y: 0.0 }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 另外一个静态方法，需要两个参数：</span></span>\\n<span class=\\"line\\"><span>    fn new(x: f64, y: f64) -&gt; Point {</span></span>\\n<span class=\\"line\\"><span>        Point { x: x, y: y }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>struct Rectangle {</span></span>\\n<span class=\\"line\\"><span>    p1: Point,</span></span>\\n<span class=\\"line\\"><span>    p2: Point,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl Rectangle {</span></span>\\n<span class=\\"line\\"><span>    // 这是一个实例方法（instance method）</span></span>\\n<span class=\\"line\\"><span>    // `&amp;self` 是 `self: &amp;Self` 的语法糖（sugar），其中 `Self` 是方法调用者的</span></span>\\n<span class=\\"line\\"><span>    // 类型。在这个例子中 `Self` = `Rectangle`</span></span>\\n<span class=\\"line\\"><span>    fn area(&amp;self) -&gt; f64 {</span></span>\\n<span class=\\"line\\"><span>        // `self` 通过点运算符来访问结构体字段</span></span>\\n<span class=\\"line\\"><span>        let Point { x: x1, y: y1 } = self.p1;</span></span>\\n<span class=\\"line\\"><span>        let Point { x: x2, y: y2 } = self.p2;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // `abs` 是一个 `f64` 类型的方法，返回调用者的绝对值</span></span>\\n<span class=\\"line\\"><span>        ((x1 - x2) * (y1 - y2)).abs()</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    fn perimeter(&amp;self) -&gt; f64 {</span></span>\\n<span class=\\"line\\"><span>        let Point { x: x1, y: y1 } = self.p1;</span></span>\\n<span class=\\"line\\"><span>        let Point { x: x2, y: y2 } = self.p2;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        2.0 * ((x1 - x2).abs() + (y1 - y2).abs())</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 这个方法要求调用者是可变的</span></span>\\n<span class=\\"line\\"><span>    // `&amp;mut self` 为 `self: &amp;mut Self` 的语法糖</span></span>\\n<span class=\\"line\\"><span>    fn translate(&amp;mut self, x: f64, y: f64) {</span></span>\\n<span class=\\"line\\"><span>        self.p1.x += x;</span></span>\\n<span class=\\"line\\"><span>        self.p2.x += x;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        self.p1.y += y;</span></span>\\n<span class=\\"line\\"><span>        self.p2.y += y;</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// `Pair` 拥有资源：两个堆分配的整型</span></span>\\n<span class=\\"line\\"><span>struct Pair(Box&lt;i32&gt;, Box&lt;i32&gt;);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>impl Pair {</span></span>\\n<span class=\\"line\\"><span>    // 这个方法会 “消耗” 调用者的资源</span></span>\\n<span class=\\"line\\"><span>    // `self` 为 `self: Self` 的语法糖</span></span>\\n<span class=\\"line\\"><span>    fn destroy(self) {</span></span>\\n<span class=\\"line\\"><span>        // 解构 `self`</span></span>\\n<span class=\\"line\\"><span>        let Pair(first, second) = self;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        println!(\\"Destroying Pair({}, {})\\", first, second);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        // `first` 和 `second` 离开作用域后释放</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let rectangle = Rectangle {</span></span>\\n<span class=\\"line\\"><span>        // 静态方法使用双冒号调用</span></span>\\n<span class=\\"line\\"><span>        p1: Point::origin(),</span></span>\\n<span class=\\"line\\"><span>        p2: Point::new(3.0, 4.0),</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 实例方法通过点运算符来调用</span></span>\\n<span class=\\"line\\"><span>    // 注意第一个参数 `&amp;self` 是隐式传递的，亦即：</span></span>\\n<span class=\\"line\\"><span>    // `rectangle.perimeter()` === `Rectangle::perimeter(&amp;rectangle)`</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Rectangle perimeter: {}\\", rectangle.perimeter());</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Rectangle area: {}\\", rectangle.area());</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let mut square = Rectangle {</span></span>\\n<span class=\\"line\\"><span>        p1: Point::origin(),</span></span>\\n<span class=\\"line\\"><span>        p2: Point::new(1.0, 1.0),</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 报错！ `rectangle` 是不可变的，但这方法需要一个可变对象</span></span>\\n<span class=\\"line\\"><span>    //rectangle.translate(1.0, 0.0);</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 去掉此行的注释</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 正常运行！可变对象可以调用可变方法</span></span>\\n<span class=\\"line\\"><span>    square.translate(1.0, 1.0);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let pair = Pair(Box::new(1), Box::new(2));</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    pair.destroy();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 报错！前面的 `destroy` 调用 “消耗了” `pair`</span></span>\\n<span class=\\"line\\"><span>    //pair.destroy();</span></span>\\n<span class=\\"line\\"><span>    // 试一试 ^ 将此行注释去掉</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"impl","link":"generics/impl.html"},{"title":"struct_visibility","link":"mod/struct_visibility.html"},{"title":"testcase_linked_list","link":"custom_types/enum/testcase_linked_list.html"},{"title":"testcase_units","link":"generics/phantom/testcase_units.html"},{"title":"methods","link":"scope/lifetime/methods.html"}],"localMap":{"nodes":[{"id":"fn/methods.md","value":{"title":"methods","path":"fn/methods.md","outlink":[],"backlink":["SUMMARY.md","generics/impl.md","mod/struct_visibility.md","custom_types/enum/testcase_linked_list.md","generics/phantom/testcase_units.md","scope/lifetime/methods.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"generics/impl.md","value":{"title":"impl","path":"generics/impl.md","outlink":[],"backlink":[]}},{"id":"mod/struct_visibility.md","value":{"title":"struct_visibility","path":"mod/struct_visibility.md","outlink":[],"backlink":[]}},{"id":"custom_types/enum/testcase_linked_list.md","value":{"title":"testcase_linked_list","path":"custom_types/enum/testcase_linked_list.md","outlink":[],"backlink":[]}},{"id":"generics/phantom/testcase_units.md","value":{"title":"testcase_units","path":"generics/phantom/testcase_units.md","outlink":[],"backlink":[]}},{"id":"scope/lifetime/methods.md","value":{"title":"methods","path":"scope/lifetime/methods.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"fn/methods.md"},{"source":"generics/impl.md","target":"fn/methods.md"},{"source":"mod/struct_visibility.md","target":"fn/methods.md"},{"source":"custom_types/enum/testcase_linked_list.md","target":"fn/methods.md"},{"source":"generics/phantom/testcase_units.md","target":"fn/methods.md"},{"source":"scope/lifetime/methods.md","target":"fn/methods.md"}]}}}');export{t as comp,v as data};
