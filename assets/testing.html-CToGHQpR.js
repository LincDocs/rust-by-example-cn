import{_ as e,e as n,k as i,o as r}from"./app-CY03Lsxp.js";const a={};function l(o,t){return r(),n("div",null,t[0]||(t[0]=[i('<h1 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h1><p>Rust 是一门非常重视正确性的语言，这门语言本身就提供了对编写软件测试的支持。</p><p>测试有三种风格：</p><ul><li>[单元][unit]测试。</li><li>[文档][doc]测试。</li><li>[集成][integration]测试。</li></ul><p>Rust 也支持在测试中指定额外的依赖：</p><ul><li><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><h2 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见</span></a></h2><ul><li><a href="https://rustwiki.org/zh-CN/book/second-edition/ch11-00-testing.html" target="_blank" rel="noopener noreferrer">TRPL</a> 中关于测试的章节</li><li><a href="https://rust-lang-nursery.github.io/api-guidelines/documentation.html" target="_blank" rel="noopener noreferrer">API 指导原则</a>中关于文档测试的部分</li></ul></div></div></div></li></ul>',6)]))}const d=e(a,[["render",l],["__file","testing.html.vue"]]),p=JSON.parse('{"path":"/testing.html","title":"测试","lang":"zh-CN","frontmatter":{"description":"测试 Rust 是一门非常重视正确性的语言，这门语言本身就提供了对编写软件测试的支持。 测试有三种风格： [单元][unit]测试。 [文档][doc]测试。 [集成][integration]测试。 Rust 也支持在测试中指定额外的依赖： 参见 TRPL 中关于测试的章节 API 指导原则中关于文档测试的部分","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/testing.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"测试"}],["meta",{"property":"og:description","content":"测试 Rust 是一门非常重视正确性的语言，这门语言本身就提供了对编写软件测试的支持。 测试有三种风格： [单元][unit]测试。 [文档][doc]测试。 [集成][integration]测试。 Rust 也支持在测试中指定额外的依赖： 参见 TRPL 中关于测试的章节 API 指导原则中关于文档测试的部分"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.44,"words":133},"filePathRelative":"testing.md","excerpt":"\\n<p>Rust 是一门非常重视正确性的语言，这门语言本身就提供了对编写软件测试的支持。</p>\\n<p>测试有三种风格：</p>\\n<ul>\\n<li>[单元][unit]测试。</li>\\n<li>[文档][doc]测试。</li>\\n<li>[集成][integration]测试。</li>\\n</ul>\\n<p>Rust 也支持在测试中指定额外的依赖：</p>\\n<ul>\\n<li>\\n<div class=\\"ab-note drop-shadow\\"><div class=\\"markdown-rendered\\"><div><h2>参见</h2>\\n<ul>\\n<li><a href=\\"https://rustwiki.org/zh-CN/book/second-edition/ch11-00-testing.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">TRPL</a> 中关于测试的章节</li>\\n<li><a href=\\"https://rust-lang-nursery.github.io/api-guidelines/documentation.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">API 指导原则</a>中关于文档测试的部分</li>\\n</ul>\\n</div></div></div></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"testing.md","value":{"title":"testing","path":"testing.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"testing.md"}]}}}');export{d as comp,p as data};
