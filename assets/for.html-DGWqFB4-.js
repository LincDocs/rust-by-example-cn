import{_ as p,e as r,k as e,f as a,i as s,g as l,h as t,r as d,o}from"./app-CVSWwIkE.js";const c={};function u(m,n){const i=d("RouteLink");return o(),r("div",null,[n[15]||(n[15]=e(`<h1 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h1><h2 id="for-与区间" tabindex="-1"><a class="header-anchor" href="#for-与区间"><span>for 与区间</span></a></h2><p><code>for in</code> 结构可以遍历一个 <code>Iterator</code>（迭代器）。创建迭代器的一个最简单的方法是使用区间标记 <code>a..b</code>。这会生成从 <code>a</code>（包含此值） 到 <code>b</code>（不含此值）的，步长为 1 的一系列值。</p><p>让我们使用 <code>for</code> 代替 <code>while</code> 来写 FizzBuzz 程序。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // \`n\` 将在每次迭代中分别取 1, 2, ..., 100</span></span>
<span class="line"><span>    for n in 1..101 {</span></span>
<span class="line"><span>        if n % 15 == 0 {</span></span>
<span class="line"><span>            println!(&quot;fizzbuzz&quot;);</span></span>
<span class="line"><span>        } else if n % 3 == 0 {</span></span>
<span class="line"><span>            println!(&quot;fizz&quot;);</span></span>
<span class="line"><span>        } else if n % 5 == 0 {</span></span>
<span class="line"><span>            println!(&quot;buzz&quot;);</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            println!(&quot;{}&quot;, n);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，可以使用<code>a..=b</code>表示两端都包含在内的范围。上面的代码可以写成：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // \`n\` 将在每次迭代中分别取 1, 2, ..., 100</span></span>
<span class="line"><span>    for n in 1..=100 {</span></span>
<span class="line"><span>        if n % 15 == 0 {</span></span>
<span class="line"><span>            println!(&quot;fizzbuzz&quot;);</span></span>
<span class="line"><span>        } else if n % 3 == 0 {</span></span>
<span class="line"><span>            println!(&quot;fizz&quot;);</span></span>
<span class="line"><span>        } else if n % 5 == 0 {</span></span>
<span class="line"><span>            println!(&quot;buzz&quot;);</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            println!(&quot;{}&quot;, n);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-与迭代器" tabindex="-1"><a class="header-anchor" href="#for-与迭代器"><span>for 与迭代器</span></a></h2>`,8)),a("p",null,[n[1]||(n[1]=a("code",null,"for in",-1)),n[2]||(n[2]=s(" 结构能以几种方式与 ")),n[3]||(n[3]=a("code",null,"Iterator",-1)),n[4]||(n[4]=s(" 互动。在 ")),l(i,{to:"/trait/iter.html"},{default:t(()=>n[0]||(n[0]=[s("迭代器")])),_:1}),n[5]||(n[5]=s(" trait 一节将会谈到，如果没有特别指定，")),n[6]||(n[6]=a("code",null,"for",-1)),n[7]||(n[7]=s(" 循环会对给出的集合应用 ")),n[8]||(n[8]=a("code",null,"into_iter",-1)),n[9]||(n[9]=s(" 函数，把它转换成一个迭代器。这并不是把集合变成迭代器的唯一方法，其他的方法有 ")),n[10]||(n[10]=a("code",null,"iter",-1)),n[11]||(n[11]=s(" 和")),n[12]||(n[12]=a("code",null,"iter_mut",-1)),n[13]||(n[13]=s(" 函数。"))]),n[16]||(n[16]=e(`<p>这三个函数会以不同的方式返回集合中的数据。</p><ul><li><code>iter</code> - 在每次迭代中借用集合中的一个元素。这样集合本身不会被改变，循环之后仍可以使用。</li></ul><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let names = vec![&quot;Bob&quot;, &quot;Frank&quot;, &quot;Ferris&quot;];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for name in names.iter() {</span></span>
<span class="line"><span>        match name {</span></span>
<span class="line"><span>            &amp;&quot;Ferris&quot; =&gt; println!(&quot;There is a rustacean among us!&quot;),</span></span>
<span class="line"><span>            _ =&gt; println!(&quot;Hello {}&quot;, name),</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>译注：Ferris 是 Rust 的<a href="https://www.rustacean.net/" target="_blank" rel="noopener noreferrer">非官方吉祥物</a>。</p><ul><li><code>into_iter</code> - 会消耗集合。在每次迭代中，集合中的数据本身会被提供。一旦集合被消耗了，之后就无法再使用了，因为它已经在循环中被 “移除”（move）了。</li></ul><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let names = vec![&quot;Bob&quot;, &quot;Frank&quot;, &quot;Ferris&quot;];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for name in names.into_iter() {</span></span>
<span class="line"><span>        match name {</span></span>
<span class="line"><span>            &quot;Ferris&quot; =&gt; println!(&quot;There is a rustacean among us!&quot;),</span></span>
<span class="line"><span>            _ =&gt; println!(&quot;Hello {}&quot;, name),</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>iter_mut</code> - 可变地（mutably）借用集合中的每个元素，从而允许集合被就地修改。</li></ul><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let mut names = vec![&quot;Bob&quot;, &quot;Frank&quot;, &quot;Ferris&quot;];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for name in names.iter_mut() {</span></span>
<span class="line"><span>        *name = match name {</span></span>
<span class="line"><span>            &amp;mut &quot;Ferris&quot; =&gt; &quot;There is a rustacean among us!&quot;,</span></span>
<span class="line"><span>            _ =&gt; &quot;Hello&quot;,</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    println!(&quot;names: {:?}&quot;, names);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这些代码中，注意 <code>match</code> 的分支中所写的类型不同，这是不同迭代方式的关键区别。因为类型不同，能够执行的操作当然也不同。</p><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,10)),a("p",null,[l(i,{to:"/trait/iter.html"},{default:t(()=>n[14]||(n[14]=[s("Iterator")])),_:1})])])}const b=p(c,[["render",u],["__file","for.html.vue"]]),h=JSON.parse('{"path":"/flow_control/for.html","title":"for 循环","lang":"zh-CN","frontmatter":{"description":"for 循环 for 与区间 for in 结构可以遍历一个 Iterator（迭代器）。创建迭代器的一个最简单的方法是使用区间标记 a..b。这会生成从 a（包含此值） 到 b（不含此值）的，步长为 1 的一系列值。 让我们使用 for 代替 while 来写 FizzBuzz 程序。 或者，可以使用a..=b表示两端都包含在内的范围。上面的代码可以...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/flow_control/for.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"for 循环"}],["meta",{"property":"og:description","content":"for 循环 for 与区间 for in 结构可以遍历一个 Iterator（迭代器）。创建迭代器的一个最简单的方法是使用区间标记 a..b。这会生成从 a（包含此值） 到 b（不含此值）的，步长为 1 的一系列值。 让我们使用 for 代替 while 来写 FizzBuzz 程序。 或者，可以使用a..=b表示两端都包含在内的范围。上面的代码可以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"for 循环\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.99,"words":597},"filePathRelative":"flow_control/for.md","excerpt":"\\n<h2>for 与区间</h2>\\n<p><code>for in</code> 结构可以遍历一个 <code>Iterator</code>（迭代器）。创建迭代器的一个最简单的方法是使用区间标记 <code>a..b</code>。这会生成从 <code>a</code>（包含此值） 到 <code>b</code>（不含此值）的，步长为 1 的一系列值。</p>\\n<p>让我们使用 <code>for</code> 代替 <code>while</code> 来写 FizzBuzz 程序。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // `n` 将在每次迭代中分别取 1, 2, ..., 100</span></span>\\n<span class=\\"line\\"><span>    for n in 1..101 {</span></span>\\n<span class=\\"line\\"><span>        if n % 15 == 0 {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"fizzbuzz\\");</span></span>\\n<span class=\\"line\\"><span>        } else if n % 3 == 0 {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"fizz\\");</span></span>\\n<span class=\\"line\\"><span>        } else if n % 5 == 0 {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"buzz\\");</span></span>\\n<span class=\\"line\\"><span>        } else {</span></span>\\n<span class=\\"line\\"><span>            println!(\\"{}\\", n);</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"iter","link":"trait/iter.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"testcase_list","link":"hello/print/print_display/testcase_list.html"}],"localMap":{"nodes":[{"id":"flow_control/for.md","value":{"title":"for","path":"flow_control/for.md","outlink":["trait/iter.md"],"backlink":["SUMMARY.md","hello/print/print_display/testcase_list.md"]}},{"id":"trait/iter.md","value":{"title":"iter","path":"trait/iter.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"hello/print/print_display/testcase_list.md","value":{"title":"testcase_list","path":"hello/print/print_display/testcase_list.md","outlink":[],"backlink":[]}}],"links":[{"source":"flow_control/for.md","target":"trait/iter.md"},{"source":"SUMMARY.md","target":"flow_control/for.md"},{"source":"hello/print/print_display/testcase_list.md","target":"flow_control/for.md"}]}}}');export{b as comp,h as data};
