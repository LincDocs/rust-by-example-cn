import{_ as s,e as n,k as a,o as i}from"./app-CY03Lsxp.js";const t={};function d(l,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="开发依赖" tabindex="-1"><a class="header-anchor" href="#开发依赖"><span>开发依赖</span></a></h1><p>有时仅在测试中才需要一些依赖（比如基准测试相关的）。这种依赖要写在 <code>Cargo.toml</code><br> 的 <code>[dev-dependencies]</code> 部分。这些依赖不会传播给其他依赖于这个包的包。</p><p>比如说使用 <code>pretty_assertions</code>，这是扩展了标准的 <code>assert!</code> 宏的一个 crate。</p><p>文件 <code>Cargo.toml</code>:</p><div class="language-ignore line-numbers-mode" data-highlighter="shiki" data-ext="ignore" data-title="ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 这里省略了标准的 crate 数据</span></span>
<span class="line"><span>[dev-dependencies]</span></span>
<span class="line"><span>pretty_assertions = &quot;1&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件 <code>src/lib.rs</code>:</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pub fn add(a: i32, b: i32) -&gt; i32 {</span></span>
<span class="line"><span>    a + b</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#[cfg(test)]</span></span>
<span class="line"><span>mod tests {</span></span>
<span class="line"><span>    use super::*;</span></span>
<span class="line"><span>    use pretty_assertions::assert_eq; // 仅用于测试, 不能在非测试代码中使用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    #[test]</span></span>
<span class="line"><span>    fn test_add() {</span></span>
<span class="line"><span>        assert_eq!(add(2, 3), 5);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见</span></a></h2><p><a href="https://doc.crates.io/specifying-dependencies.html" target="_blank" rel="noopener noreferrer">Cargo</a> 文档中关于指定依赖的部分。</p>`,9)]))}const p=s(t,[["render",d],["__file","dev_dependencies.html.vue"]]),c=JSON.parse('{"path":"/testing/dev_dependencies.html","title":"开发依赖","lang":"zh-CN","frontmatter":{"description":"开发依赖 有时仅在测试中才需要一些依赖（比如基准测试相关的）。这种依赖要写在 Cargo.toml 的 [dev-dependencies] 部分。这些依赖不会传播给其他依赖于这个包的包。 比如说使用 pretty_assertions，这是扩展了标准的 assert! 宏的一个 crate。 文件 Cargo.toml: 文件 src/lib.rs:...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/testing/dev_dependencies.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"开发依赖"}],["meta",{"property":"og:description","content":"开发依赖 有时仅在测试中才需要一些依赖（比如基准测试相关的）。这种依赖要写在 Cargo.toml 的 [dev-dependencies] 部分。这些依赖不会传播给其他依赖于这个包的包。 比如说使用 pretty_assertions，这是扩展了标准的 assert! 宏的一个 crate。 文件 Cargo.toml: 文件 src/lib.rs:..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开发依赖\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.56,"words":167},"filePathRelative":"testing/dev_dependencies.md","excerpt":"\\n<p>有时仅在测试中才需要一些依赖（比如基准测试相关的）。这种依赖要写在 <code>Cargo.toml</code><br>\\n的 <code>[dev-dependencies]</code> 部分。这些依赖不会传播给其他依赖于这个包的包。</p>\\n<p>比如说使用 <code>pretty_assertions</code>，这是扩展了标准的 <code>assert!</code> 宏的一个 crate。</p>\\n<p>文件 <code>Cargo.toml</code>:</p>\\n<div class=\\"language-ignore line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"ignore\\" data-title=\\"ignore\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span># 这里省略了标准的 crate 数据</span></span>\\n<span class=\\"line\\"><span>[dev-dependencies]</span></span>\\n<span class=\\"line\\"><span>pretty_assertions = \\"1\\"</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"testing/dev_dependencies.md","value":{"title":"dev_dependencies","path":"testing/dev_dependencies.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"testing/dev_dependencies.md"}]}}}');export{p as comp,c as data};
