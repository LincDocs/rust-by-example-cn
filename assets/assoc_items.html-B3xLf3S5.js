import{_ as e,e as r,k as a,o}from"./app-CVSWwIkE.js";const i={};function s(n,t){return o(),r("div",null,t[0]||(t[0]=[a('<h1 id="关联项" tabindex="-1"><a class="header-anchor" href="#关联项"><span>关联项</span></a></h1><p>“关联项”（associated item）指与多种类型的<a href="https://rustwiki.org/zh-CN/reference/items.html" target="_blank" rel="noopener noreferrer">项</a>有关的一组规则。它是 <code>trait</code><br> 泛型的扩展，允许在 <code>trait</code> 内部定义新的项。</p><p>一个这样的项就叫做一个关联类型。当 <code>trait</code> 对于实现了它的容器类型是泛型的，关联项就提供了简单的使用方法。</p><blockquote><p>译注：“关联项”这个说法实际上只在 RFC 里出现了，官方的《The Rust Programming<br> Language》第一版和第二版都只有“关联类型”的说法。如果觉得这里的说法很别扭的话<br> 不要理会就是了。TRPL 对关联类型的定义是：“一种将类型占位符与 trait 联系起来的<br> 做法，这样 trait 中的方法签名中就可以使用这些占位符类型。trait 的实现会指定在<br> 该实现中那些占位符对应什么具体类型。”等看完这一节再回头看这个定义就很明白了。</p></blockquote><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3><p><a href="https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md" target="_blank" rel="noopener noreferrer">RFC</a></p>',6)]))}const p=e(i,[["render",s],["__file","assoc_items.html.vue"]]),l=JSON.parse('{"path":"/generics/assoc_items.html","title":"关联项","lang":"zh-CN","frontmatter":{"description":"关联项 “关联项”（associated item）指与多种类型的项有关的一组规则。它是 trait 泛型的扩展，允许在 trait 内部定义新的项。 一个这样的项就叫做一个关联类型。当 trait 对于实现了它的容器类型是泛型的，关联项就提供了简单的使用方法。 译注：“关联项”这个说法实际上只在 RFC 里出现了，官方的《The Rust Progr...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/generics/assoc_items.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"关联项"}],["meta",{"property":"og:description","content":"关联项 “关联项”（associated item）指与多种类型的项有关的一组规则。它是 trait 泛型的扩展，允许在 trait 内部定义新的项。 一个这样的项就叫做一个关联类型。当 trait 对于实现了它的容器类型是泛型的，关联项就提供了简单的使用方法。 译注：“关联项”这个说法实际上只在 RFC 里出现了，官方的《The Rust Progr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关联项\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.87,"words":260},"filePathRelative":"generics/assoc_items.md","excerpt":"\\n<p>“关联项”（associated item）指与多种类型的<a href=\\"https://rustwiki.org/zh-CN/reference/items.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">项</a>有关的一组规则。它是 <code>trait</code><br>\\n泛型的扩展，允许在 <code>trait</code> 内部定义新的项。</p>\\n<p>一个这样的项就叫做一个关联类型。当 <code>trait</code> 对于实现了它的容器类型是泛型的，关联项就提供了简单的使用方法。</p>\\n<blockquote>\\n<p>译注：“关联项”这个说法实际上只在 RFC 里出现了，官方的《The Rust Programming<br>\\nLanguage》第一版和第二版都只有“关联类型”的说法。如果觉得这里的说法很别扭的话<br>\\n不要理会就是了。TRPL 对关联类型的定义是：“一种将类型占位符与 trait 联系起来的<br>\\n做法，这样 trait 中的方法签名中就可以使用这些占位符类型。trait 的实现会指定在<br>\\n该实现中那些占位符对应什么具体类型。”等看完这一节再回头看这个定义就很明白了。</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"generics/assoc_items.md","value":{"title":"assoc_items","path":"generics/assoc_items.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"generics/assoc_items.md"}]}}}');export{p as comp,l as data};
