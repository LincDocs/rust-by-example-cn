import{_ as n,e as a,k as i,o as e}from"./app-CVSWwIkE.js";const l={};function p(t,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="打开文件-open" tabindex="-1"><a class="header-anchor" href="#打开文件-open"><span>打开文件 <code>open</code></span></a></h1><p><code>open</code> 静态方法能够以只读模式（read-only mode）打开一个文件。</p><p><code>File</code> 拥有资源，即文件描述符（file descriptor），它会在自身被 <code>drop</code> 时关闭文件。</p><div class="language-rust,editable,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore" data-title="rust,editable,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::fs::File;</span></span>
<span class="line"><span>use std::io::prelude::*;</span></span>
<span class="line"><span>use std::path::Path;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 创建指向所需的文件的路径</span></span>
<span class="line"><span>    let path = Path::new(&quot;hello.txt&quot;);</span></span>
<span class="line"><span>    let display = path.display();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 以只读方式打开路径，返回 \`io::Result&lt;File&gt;\`</span></span>
<span class="line"><span>    let mut file = match File::open(&amp;path) {</span></span>
<span class="line"><span>        // \`io::Error\` 的 \`description\` 方法返回一个描述错误的字符串。</span></span>
<span class="line"><span>        Err(why) =&gt; panic!(&quot;couldn&#39;t open {}: {:?}&quot;, display, why),</span></span>
<span class="line"><span>        Ok(file) =&gt; file,</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 读取文件内容到一个字符串，返回 \`io::Result&lt;usize&gt;\`</span></span>
<span class="line"><span>    let mut s = String::new();</span></span>
<span class="line"><span>    match file.read_to_string(&amp;mut s) {</span></span>
<span class="line"><span>        Err(why) =&gt; panic!(&quot;couldn&#39;t read {}: {:?}&quot;, display, why),</span></span>
<span class="line"><span>        Ok(_) =&gt; print!(&quot;{} contains:\\n{}&quot;, display, s),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`file\` 离开作用域，并且 \`hello.txt\` 文件将被关闭。</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是所希望的成功的输出：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello World!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">hello.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> open.rs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./open</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hello.txt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> contains:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Hello</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> World!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（我们鼓励您在不同的失败条件下测试前面的例子：hello.txt 不存在，或 hello.txt 不可读，等等。）</p>`,7)]))}const c=n(l,[["render",p],["__file","open.html.vue"]]),r=JSON.parse('{"path":"/std_misc/file/open.html","title":"打开文件 open","lang":"zh-CN","frontmatter":{"description":"打开文件 open open 静态方法能够以只读模式（read-only mode）打开一个文件。 File 拥有资源，即文件描述符（file descriptor），它会在自身被 drop 时关闭文件。 下面是所希望的成功的输出： （我们鼓励您在不同的失败条件下测试前面的例子：hello.txt 不存在，或 hello.txt 不可读，等等。）","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std_misc/file/open.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"打开文件 open"}],["meta",{"property":"og:description","content":"打开文件 open open 静态方法能够以只读模式（read-only mode）打开一个文件。 File 拥有资源，即文件描述符（file descriptor），它会在自身被 drop 时关闭文件。 下面是所希望的成功的输出： （我们鼓励您在不同的失败条件下测试前面的例子：hello.txt 不存在，或 hello.txt 不可读，等等。）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"打开文件 open\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.85,"words":255},"filePathRelative":"std_misc/file/open.md","excerpt":"\\n<p><code>open</code> 静态方法能够以只读模式（read-only mode）打开一个文件。</p>\\n<p><code>File</code> 拥有资源，即文件描述符（file descriptor），它会在自身被 <code>drop</code> 时关闭文件。</p>\\n<div class=\\"language-rust,editable,ignore line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable,ignore\\" data-title=\\"rust,editable,ignore\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::fs::File;</span></span>\\n<span class=\\"line\\"><span>use std::io::prelude::*;</span></span>\\n<span class=\\"line\\"><span>use std::path::Path;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 创建指向所需的文件的路径</span></span>\\n<span class=\\"line\\"><span>    let path = Path::new(\\"hello.txt\\");</span></span>\\n<span class=\\"line\\"><span>    let display = path.display();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 以只读方式打开路径，返回 `io::Result&lt;File&gt;`</span></span>\\n<span class=\\"line\\"><span>    let mut file = match File::open(&amp;path) {</span></span>\\n<span class=\\"line\\"><span>        // `io::Error` 的 `description` 方法返回一个描述错误的字符串。</span></span>\\n<span class=\\"line\\"><span>        Err(why) =&gt; panic!(\\"couldn\'t open {}: {:?}\\", display, why),</span></span>\\n<span class=\\"line\\"><span>        Ok(file) =&gt; file,</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 读取文件内容到一个字符串，返回 `io::Result&lt;usize&gt;`</span></span>\\n<span class=\\"line\\"><span>    let mut s = String::new();</span></span>\\n<span class=\\"line\\"><span>    match file.read_to_string(&amp;mut s) {</span></span>\\n<span class=\\"line\\"><span>        Err(why) =&gt; panic!(\\"couldn\'t read {}: {:?}\\", display, why),</span></span>\\n<span class=\\"line\\"><span>        Ok(_) =&gt; print!(\\"{} contains:\\\\n{}\\", display, s),</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `file` 离开作用域，并且 `hello.txt` 文件将被关闭。</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std_misc/file/open.md","value":{"title":"open","path":"std_misc/file/open.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std_misc/file/open.md"}]}}}');export{c as comp,r as data};
