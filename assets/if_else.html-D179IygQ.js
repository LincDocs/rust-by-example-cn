import{_ as s,e as a,k as e,o as i}from"./app-CVSWwIkE.js";const l={};function p(d,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else"><span><code>if/else</code></span></a></h1><p><code>if</code>-<code>else</code> 分支判断和其他语言类似。不同的是，Rust 语言中的布尔判断条件不必使用小括号包裹，且每个条件后面都跟着一个代码块。<code>if</code>-<code>else</code> 条件选择是一个表达式，并且所有分支都必须返回相同的类型。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let n = 5;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if n &lt; 0 {</span></span>
<span class="line"><span>        print!(&quot;{} is negative&quot;, n);</span></span>
<span class="line"><span>    } else if n &gt; 0 {</span></span>
<span class="line"><span>        print!(&quot;{} is positive&quot;, n);</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        print!(&quot;{} is zero&quot;, n);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let big_n =</span></span>
<span class="line"><span>        if n &lt; 10 &amp;&amp; n &gt; -10 {</span></span>
<span class="line"><span>            println!(&quot;, and is a small number, increase ten-fold&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            // 这个表达式返回一个 \`i32\` 类型。</span></span>
<span class="line"><span>            10 * n</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            println!(&quot;, and is a big number, half the number&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            // 这个表达式也必须返回一个 \`i32\` 类型。</span></span>
<span class="line"><span>            n / 2</span></span>
<span class="line"><span>            // 试一试 ^ 试着加上一个分号来结束这条表达式。</span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>    //   ^ 不要忘记在这里加上一个分号！所有的 \`let\` 绑定都需要它。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;{} -&gt; {}&quot;, n, big_n);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const c=s(l,[["render",p],["__file","if_else.html.vue"]]),r=JSON.parse('{"path":"/flow_control/if_else.html","title":"if/else","lang":"zh-CN","frontmatter":{"description":"if/else if-else 分支判断和其他语言类似。不同的是，Rust 语言中的布尔判断条件不必使用小括号包裹，且每个条件后面都跟着一个代码块。if-else 条件选择是一个表达式，并且所有分支都必须返回相同的类型。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/flow_control/if_else.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"if/else"}],["meta",{"property":"og:description","content":"if/else if-else 分支判断和其他语言类似。不同的是，Rust 语言中的布尔判断条件不必使用小括号包裹，且每个条件后面都跟着一个代码块。if-else 条件选择是一个表达式，并且所有分支都必须返回相同的类型。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"if/else\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.72,"words":215},"filePathRelative":"flow_control/if_else.md","excerpt":"\\n<p><code>if</code>-<code>else</code> 分支判断和其他语言类似。不同的是，Rust 语言中的布尔判断条件不必使用小括号包裹，且每个条件后面都跟着一个代码块。<code>if</code>-<code>else</code> 条件选择是一个表达式，并且所有分支都必须返回相同的类型。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    let n = 5;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    if n &lt; 0 {</span></span>\\n<span class=\\"line\\"><span>        print!(\\"{} is negative\\", n);</span></span>\\n<span class=\\"line\\"><span>    } else if n &gt; 0 {</span></span>\\n<span class=\\"line\\"><span>        print!(\\"{} is positive\\", n);</span></span>\\n<span class=\\"line\\"><span>    } else {</span></span>\\n<span class=\\"line\\"><span>        print!(\\"{} is zero\\", n);</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    let big_n =</span></span>\\n<span class=\\"line\\"><span>        if n &lt; 10 &amp;&amp; n &gt; -10 {</span></span>\\n<span class=\\"line\\"><span>            println!(\\", and is a small number, increase ten-fold\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>            // 这个表达式返回一个 `i32` 类型。</span></span>\\n<span class=\\"line\\"><span>            10 * n</span></span>\\n<span class=\\"line\\"><span>        } else {</span></span>\\n<span class=\\"line\\"><span>            println!(\\", and is a big number, half the number\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>            // 这个表达式也必须返回一个 `i32` 类型。</span></span>\\n<span class=\\"line\\"><span>            n / 2</span></span>\\n<span class=\\"line\\"><span>            // 试一试 ^ 试着加上一个分号来结束这条表达式。</span></span>\\n<span class=\\"line\\"><span>        };</span></span>\\n<span class=\\"line\\"><span>    //   ^ 不要忘记在这里加上一个分号！所有的 `let` 绑定都需要它。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    println!(\\"{} -&gt; {}\\", n, big_n);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"flow_control/if_else.md","value":{"title":"if_else","path":"flow_control/if_else.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"flow_control/if_else.md"}]}}}');export{c as comp,r as data};
