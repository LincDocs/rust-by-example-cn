import{_ as l,e as r,k as d,f as e,g as n,i as a,h as i,r as p,o}from"./app-CVSWwIkE.js";const c={};function u(m,s){const t=p("RouteLink");return o(),r("div",null,[s[12]||(s[12]=d(`<h1 id="测试实例-list" tabindex="-1"><a class="header-anchor" href="#测试实例-list"><span>测试实例：List</span></a></h1><p>对一个结构体实现 <code>fmt::Display</code>，其中的元素需要一个接一个地处理到，这可能会很麻烦。问题在于每个 <code>write!</code> 都要生成一个 <code>fmt::Result</code>。正确的实现需要处理<strong>所有</strong>的 Result。Rust 专门为解决这个问题提供了 <code>?</code> 操作符。</p><p>在 <code>write!</code> 上使用 <code>?</code> 会像是这样：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 对 \`write!\` 进行尝试（try），观察是否出错。若发生错误，返回相应的错误。</span></span>
<span class="line"><span>// 否则（没有出错）继续执行后面的语句。</span></span>
<span class="line"><span>write!(f, &quot;{}&quot;, value)?;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，你也可以使用 <code>try!</code> 宏，它和 <code>?</code> 是一样的。这种写法比较罗嗦，故不再推荐，<br> 但在老一些的 Rust 代码中仍会看到。使用 <code>try!</code> 看起来像这样：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try!(write!(f, &quot;{}&quot;, value));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>有了 <code>?</code>，对一个 <code>Vec</code> 实现 <code>fmt::Display</code> 就很简单了：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::fmt; // 导入 \`fmt\` 模块。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 定义一个包含单个 \`Vec\` 的结构体 \`List\`。</span></span>
<span class="line"><span>struct List(Vec&lt;i32&gt;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl fmt::Display for List {</span></span>
<span class="line"><span>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {</span></span>
<span class="line"><span>        // 使用元组的下标获取值，并创建一个 \`vec\` 的引用。</span></span>
<span class="line"><span>        let vec = &amp;self.0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        write!(f, &quot;[&quot;)?;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 使用 \`v\` 对 \`vec\` 进行迭代，并用 \`count\` 记录迭代次数。</span></span>
<span class="line"><span>        for (count, v) in vec.iter().enumerate() {</span></span>
<span class="line"><span>            // 对每个元素（第一个元素除外）加上逗号。</span></span>
<span class="line"><span>            // 使用 \`?\` 或 \`try!\` 来返回错误。</span></span>
<span class="line"><span>            if count != 0 { write!(f, &quot;, &quot;)?; }</span></span>
<span class="line"><span>            write!(f, &quot;{}&quot;, v)?;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 加上配对中括号，并返回一个 fmt::Result 值。</span></span>
<span class="line"><span>        write!(f, &quot;]&quot;)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let v = List(vec![1, 2, 3]);</span></span>
<span class="line"><span>    println!(&quot;{}&quot;, v);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动手试一试" tabindex="-1"><a class="header-anchor" href="#动手试一试"><span>动手试一试：</span></a></h3><p>更改程序使 vector 里面每个元素的下标也能够打印出来。新的结果如下：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[0: 1, 1: 2, 2: 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,12)),e("p",null,[n(t,{to:"/flow_control/for.html"},{default:i(()=>s[0]||(s[0]=[e("code",null,"for",-1)])),_:1}),s[6]||(s[6]=a(", ")),n(t,{to:"/scope/borrow/ref.html"},{default:i(()=>s[1]||(s[1]=[e("code",null,"ref",-1)])),_:1}),s[7]||(s[7]=a(", ")),n(t,{to:"/std/result.html"},{default:i(()=>s[2]||(s[2]=[e("code",null,"Result",-1)])),_:1}),s[8]||(s[8]=a(", ")),n(t,{to:"/custom_types/structs.html"},{default:i(()=>s[3]||(s[3]=[e("code",null,"struct",-1)])),_:1}),s[9]||(s[9]=a(",")),s[10]||(s[10]=e("br",null,null,-1)),n(t,{to:"/std/result/question_mark.html"},{default:i(()=>s[4]||(s[4]=[e("code",null,"?",-1)])),_:1}),s[11]||(s[11]=a(", 和 ")),n(t,{to:"/std/vec.html"},{default:i(()=>s[5]||(s[5]=[e("code",null,"vec!",-1)])),_:1})])])}const h=l(c,[["render",u],["__file","testcase_list.html.vue"]]),b=JSON.parse('{"path":"/hello/print/print_display/testcase_list.html","title":"测试实例：List","lang":"zh-CN","frontmatter":{"description":"测试实例：List 对一个结构体实现 fmt::Display，其中的元素需要一个接一个地处理到，这可能会很麻烦。问题在于每个 write! 都要生成一个 fmt::Result。正确的实现需要处理所有的 Result。Rust 专门为解决这个问题提供了 ? 操作符。 在 write! 上使用 ? 会像是这样： 另外，你也可以使用 try! 宏，它和 ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/hello/print/print_display/testcase_list.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"测试实例：List"}],["meta",{"property":"og:description","content":"测试实例：List 对一个结构体实现 fmt::Display，其中的元素需要一个接一个地处理到，这可能会很麻烦。问题在于每个 write! 都要生成一个 fmt::Result。正确的实现需要处理所有的 Result。Rust 专门为解决这个问题提供了 ? 操作符。 在 write! 上使用 ? 会像是这样： 另外，你也可以使用 try! 宏，它和 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"测试实例：List\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.46,"words":437},"filePathRelative":"hello/print/print_display/testcase_list.md","excerpt":"\\n<p>对一个结构体实现 <code>fmt::Display</code>，其中的元素需要一个接一个地处理到，这可能会很麻烦。问题在于每个 <code>write!</code> 都要生成一个 <code>fmt::Result</code>。正确的实现需要处理<strong>所有</strong>的 Result。Rust 专门为解决这个问题提供了 <code>?</code> 操作符。</p>\\n<p>在 <code>write!</code> 上使用 <code>?</code> 会像是这样：</p>\\n<div class=\\"language-rust,ignore line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,ignore\\" data-title=\\"rust,ignore\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 对 `write!` 进行尝试（try），观察是否出错。若发生错误，返回相应的错误。</span></span>\\n<span class=\\"line\\"><span>// 否则（没有出错）继续执行后面的语句。</span></span>\\n<span class=\\"line\\"><span>write!(f, \\"{}\\", value)?;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"for","link":"flow_control/for.html"},{"title":"ref","link":"scope/borrow/ref.html"},{"title":"result","link":"std/result.html"},{"title":"structs","link":"custom_types/structs.html"},{"title":"question_mark","link":"std/result/question_mark.html"},{"title":"vec","link":"std/vec.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"hello/print/print_display/testcase_list.md","value":{"title":"testcase_list","path":"hello/print/print_display/testcase_list.md","outlink":["flow_control/for.md","scope/borrow/ref.md","std/result.md","custom_types/structs.md","std/result/question_mark.md","std/vec.md"],"backlink":["SUMMARY.md"]}},{"id":"flow_control/for.md","value":{"title":"for","path":"flow_control/for.md","outlink":[],"backlink":[]}},{"id":"scope/borrow/ref.md","value":{"title":"ref","path":"scope/borrow/ref.md","outlink":[],"backlink":[]}},{"id":"std/result.md","value":{"title":"result","path":"std/result.md","outlink":[],"backlink":[]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"std/result/question_mark.md","value":{"title":"question_mark","path":"std/result/question_mark.md","outlink":[],"backlink":[]}},{"id":"std/vec.md","value":{"title":"vec","path":"std/vec.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"hello/print/print_display/testcase_list.md","target":"flow_control/for.md"},{"source":"hello/print/print_display/testcase_list.md","target":"scope/borrow/ref.md"},{"source":"hello/print/print_display/testcase_list.md","target":"std/result.md"},{"source":"hello/print/print_display/testcase_list.md","target":"custom_types/structs.md"},{"source":"hello/print/print_display/testcase_list.md","target":"std/result/question_mark.md"},{"source":"hello/print/print_display/testcase_list.md","target":"std/vec.md"},{"source":"SUMMARY.md","target":"hello/print/print_display/testcase_list.md"}]}}}');export{h as comp,b as data};
