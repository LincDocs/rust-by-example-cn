import{_ as t,e as l,k as d,f as p,g as i,i as n,h as a,r as o,o as c}from"./app-CY03Lsxp.js";const r={};function m(u,e){const s=o("RouteLink");return c(),l("div",null,[e[5]||(e[5]=d('<h1 id="约束" tabindex="-1"><a class="header-anchor" href="#约束"><span>约束</span></a></h1><p>就如泛型类型能够被约束一样，生命周期（它们本身就是泛型）也可以使用约束。<code>:</code> 字符的意义在这里稍微有些不同，不过 <code>+</code> 是相同的。注意下面的说明：</p><ol><li><code>T: &#39;a</code>：在 <code>T</code> 中的<strong>所有</strong>引用都必须比生命周期 <code>&#39;a</code> 活得更长。</li><li><code>T: Trait + &#39;a</code>：<code>T</code> 类型必须实现 <code>Trait</code> trait，并且在 <code>T</code> 中的<strong>所有</strong>引用都必须比 <code>&#39;a</code> 活得更长。</li></ol><p>下面例子展示了上述语法的实际应用：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::fmt::Debug; // 用于约束的 trait。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>#[derive(Debug)]</span></span>\n<span class="line"><span>struct Ref&lt;&#39;a, T: &#39;a&gt;(&amp;&#39;a T);</span></span>\n<span class="line"><span>// `Ref` 包含一个指向泛型类型 `T` 的引用，其中 `T` 拥有一个未知的生命周期</span></span>\n<span class="line"><span>// `&#39;a`。`T` 拥有生命周期限制， `T` 中的任何*引用*都必须比 `&#39;a` 活得更长。另外</span></span>\n<span class="line"><span>// `Ref` 的生命周期也不能超出 `&#39;a`。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 一个泛型函数，使用 `Debug` trait 来打印内容。</span></span>\n<span class="line"><span>fn print&lt;T&gt;(t: T) where</span></span>\n<span class="line"><span>    T: Debug {</span></span>\n<span class="line"><span>    println!(&quot;`print`: t is {:?}&quot;, t);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 这里接受一个指向 `T` 的引用，其中 `T` 实现了 `Debug` trait，并且在 `T` 中的</span></span>\n<span class="line"><span>// 所有*引用*都必须比 `&#39;a&#39;` 存活时间更长。另外，`&#39;a` 也要比函数活得更长。</span></span>\n<span class="line"><span>fn print_ref&lt;&#39;a, T&gt;(t: &amp;&#39;a T) where</span></span>\n<span class="line"><span>    T: Debug + &#39;a {</span></span>\n<span class="line"><span>    println!(&quot;`print_ref`: t is {:?}&quot;, t);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>fn main() {</span></span>\n<span class="line"><span>    let x = 7;</span></span>\n<span class="line"><span>    let ref_x = Ref(&amp;x);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    print_ref(&amp;ref_x);</span></span>\n<span class="line"><span>    print(ref_x);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>',6)),p("p",null,[i(s,{to:"/generics.html"},{default:a(()=>e[0]||(e[0]=[n("泛型")])),_:1}),e[3]||(e[3]=n(", ")),i(s,{to:"/generics/bounds.html"},{default:a(()=>e[1]||(e[1]=[n("泛型中的约束")])),_:1}),e[4]||(e[4]=n(", 以及 ")),i(s,{to:"/generics/multi_bounds.html"},{default:a(()=>e[2]||(e[2]=[n("泛型中的多重约束")])),_:1})])])}const v=t(r,[["render",m],["__file","lifetime_bounds.html.vue"]]),g=JSON.parse(`{"path":"/scope/lifetime/lifetime_bounds.html","title":"约束","lang":"zh-CN","frontmatter":{"description":"约束 就如泛型类型能够被约束一样，生命周期（它们本身就是泛型）也可以使用约束。: 字符的意义在这里稍微有些不同，不过 + 是相同的。注意下面的说明： T: 'a：在 T 中的所有引用都必须比生命周期 'a 活得更长。 T: Trait + 'a：T 类型必须实现 Trait trait，并且在 T 中的所有引用都必须比 'a 活得更长。 下面例子展示了...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/scope/lifetime/lifetime_bounds.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"约束"}],["meta",{"property":"og:description","content":"约束 就如泛型类型能够被约束一样，生命周期（它们本身就是泛型）也可以使用约束。: 字符的意义在这里稍微有些不同，不过 + 是相同的。注意下面的说明： T: 'a：在 T 中的所有引用都必须比生命周期 'a 活得更长。 T: Trait + 'a：T 类型必须实现 Trait trait，并且在 T 中的所有引用都必须比 'a 活得更长。 下面例子展示了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"约束\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.23,"words":369},"filePathRelative":"scope/lifetime/lifetime_bounds.md","excerpt":"\\n<p>就如泛型类型能够被约束一样，生命周期（它们本身就是泛型）也可以使用约束。<code>:</code> 字符的意义在这里稍微有些不同，不过 <code>+</code> 是相同的。注意下面的说明：</p>\\n<ol>\\n<li><code>T: 'a</code>：在 <code>T</code> 中的<strong>所有</strong>引用都必须比生命周期 <code>'a</code> 活得更长。</li>\\n<li><code>T: Trait + 'a</code>：<code>T</code> 类型必须实现 <code>Trait</code> trait，并且在 <code>T</code> 中的<strong>所有</strong>引用都必须比 <code>'a</code> 活得更长。</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[{"title":"generics","link":"generics.html"},{"title":"bounds","link":"generics/bounds.html"},{"title":"multi_bounds","link":"generics/multi_bounds.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"scope/lifetime/lifetime_bounds.md","value":{"title":"lifetime_bounds","path":"scope/lifetime/lifetime_bounds.md","outlink":["generics.md","generics/bounds.md","generics/multi_bounds.md"],"backlink":["SUMMARY.md"]}},{"id":"generics.md","value":{"title":"generics","path":"generics.md","outlink":[],"backlink":[]}},{"id":"generics/bounds.md","value":{"title":"bounds","path":"generics/bounds.md","outlink":[],"backlink":[]}},{"id":"generics/multi_bounds.md","value":{"title":"multi_bounds","path":"generics/multi_bounds.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"scope/lifetime/lifetime_bounds.md","target":"generics.md"},{"source":"scope/lifetime/lifetime_bounds.md","target":"generics/bounds.md"},{"source":"scope/lifetime/lifetime_bounds.md","target":"generics/multi_bounds.md"},{"source":"SUMMARY.md","target":"scope/lifetime/lifetime_bounds.md"}]}}}`);export{v as comp,g as data};
