import{_ as s,e as a,k as e,o as i}from"./app-CY03Lsxp.js";const l={};function p(c,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="指示符" tabindex="-1"><a class="header-anchor" href="#指示符"><span>指示符</span></a></h1><p>宏的参数使用一个美元符号 <code>$</code> 作为前缀，并使用一个<strong>指示符</strong>（designator）来注明类型：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>macro_rules! create_function {</span></span>
<span class="line"><span>    // 此宏接受一个 \`ident\` 指示符表示的参数，并创建一个名为 \`$func_name\` 的函数。</span></span>
<span class="line"><span>    // \`ident\` 指示符用于变量名或函数名</span></span>
<span class="line"><span>    ($func_name:ident) =&gt; {</span></span>
<span class="line"><span>        fn $func_name() {</span></span>
<span class="line"><span>            // \`stringify!\` 宏把 \`ident\` 转换成字符串。</span></span>
<span class="line"><span>            println!(&quot;You called {:?}()&quot;,</span></span>
<span class="line"><span>                     stringify!($func_name))</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 借助上述宏来创建名为 \`foo\` 和 \`bar\` 的函数。</span></span>
<span class="line"><span>create_function!(foo);</span></span>
<span class="line"><span>create_function!(bar);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>macro_rules! print_result {</span></span>
<span class="line"><span>    // 此宏接受一个 \`expr\` 类型的表达式，并将它作为字符串，连同其结果一起</span></span>
<span class="line"><span>    // 打印出来。</span></span>
<span class="line"><span>    // \`expr\` 指示符表示表达式。</span></span>
<span class="line"><span>    ($expression:expr) =&gt; {</span></span>
<span class="line"><span>        // \`stringify!\` 把表达式*原样*转换成一个字符串。</span></span>
<span class="line"><span>        println!(&quot;{:?} = {:?}&quot;,</span></span>
<span class="line"><span>                 stringify!($expression),</span></span>
<span class="line"><span>                 $expression)</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    foo();</span></span>
<span class="line"><span>    bar();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    print_result!(1u32 + 1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 回想一下，代码块也是表达式！</span></span>
<span class="line"><span>    print_result!({</span></span>
<span class="line"><span>        let x = 1u32;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        x * x + 2 * x - 1</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里列出全部指示符：</p><ul><li><code>block</code></li><li><code>expr</code> 用于表达式</li><li><code>ident</code> 用于变量名或函数名</li><li><code>item</code></li><li><code>literal</code> 用于字面常量</li><li><code>pat</code> (<strong>模式</strong> <em>pattern</em>)</li><li><code>path</code></li><li><code>stmt</code> (<strong>语句</strong> <em>statement</em>)</li><li><code>tt</code> (<strong>标记树</strong> <em>token tree</em>)</li><li><code>ty</code> (<strong>类型</strong> <em>type</em>)</li><li><code>vis</code> (<em>可见性描述符</em>)</li></ul><p>完整列表详见 <a href="https://doc.rust-lang.org/reference/macros-by-example.html" target="_blank" rel="noopener noreferrer">Rust Reference</a>。</p>`,6)]))}const t=s(l,[["render",p],["__file","designators.html.vue"]]),r=JSON.parse('{"path":"/macros/designators.html","title":"指示符","lang":"zh-CN","frontmatter":{"description":"指示符 宏的参数使用一个美元符号 $ 作为前缀，并使用一个指示符（designator）来注明类型： 这里列出全部指示符： block expr 用于表达式 ident 用于变量名或函数名 item literal 用于字面常量 pat (模式 pattern) path stmt (语句 statement) tt (标记树 token tree) ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/macros/designators.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"指示符"}],["meta",{"property":"og:description","content":"指示符 宏的参数使用一个美元符号 $ 作为前缀，并使用一个指示符（designator）来注明类型： 这里列出全部指示符： block expr 用于表达式 ident 用于变量名或函数名 item literal 用于字面常量 pat (模式 pattern) path stmt (语句 statement) tt (标记树 token tree) ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"指示符\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.97,"words":291},"filePathRelative":"macros/designators.md","excerpt":"\\n<p>宏的参数使用一个美元符号 <code>$</code> 作为前缀，并使用一个<strong>指示符</strong>（designator）来注明类型：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>macro_rules! create_function {</span></span>\\n<span class=\\"line\\"><span>    // 此宏接受一个 `ident` 指示符表示的参数，并创建一个名为 `$func_name` 的函数。</span></span>\\n<span class=\\"line\\"><span>    // `ident` 指示符用于变量名或函数名</span></span>\\n<span class=\\"line\\"><span>    ($func_name:ident) =&gt; {</span></span>\\n<span class=\\"line\\"><span>        fn $func_name() {</span></span>\\n<span class=\\"line\\"><span>            // `stringify!` 宏把 `ident` 转换成字符串。</span></span>\\n<span class=\\"line\\"><span>            println!(\\"You called {:?}()\\",</span></span>\\n<span class=\\"line\\"><span>                     stringify!($func_name))</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 借助上述宏来创建名为 `foo` 和 `bar` 的函数。</span></span>\\n<span class=\\"line\\"><span>create_function!(foo);</span></span>\\n<span class=\\"line\\"><span>create_function!(bar);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>macro_rules! print_result {</span></span>\\n<span class=\\"line\\"><span>    // 此宏接受一个 `expr` 类型的表达式，并将它作为字符串，连同其结果一起</span></span>\\n<span class=\\"line\\"><span>    // 打印出来。</span></span>\\n<span class=\\"line\\"><span>    // `expr` 指示符表示表达式。</span></span>\\n<span class=\\"line\\"><span>    ($expression:expr) =&gt; {</span></span>\\n<span class=\\"line\\"><span>        // `stringify!` 把表达式*原样*转换成一个字符串。</span></span>\\n<span class=\\"line\\"><span>        println!(\\"{:?} = {:?}\\",</span></span>\\n<span class=\\"line\\"><span>                 stringify!($expression),</span></span>\\n<span class=\\"line\\"><span>                 $expression)</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    foo();</span></span>\\n<span class=\\"line\\"><span>    bar();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    print_result!(1u32 + 1);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 回想一下，代码块也是表达式！</span></span>\\n<span class=\\"line\\"><span>    print_result!({</span></span>\\n<span class=\\"line\\"><span>        let x = 1u32;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        x * x + 2 * x - 1</span></span>\\n<span class=\\"line\\"><span>    });</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"macros/designators.md","value":{"title":"designators","path":"macros/designators.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"macros/designators.md"}]}}}');export{t as comp,r as data};
