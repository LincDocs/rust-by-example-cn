import{_ as l,e as p,k as r,f as e,i as n,g as a,h as t,r as d,o as c}from"./app-CVSWwIkE.js";const u={};function o(m,s){const i=d("RouteLink");return c(),p("div",null,[s[7]||(s[7]=r(`<h1 id="调试-debug" tabindex="-1"><a class="header-anchor" href="#调试-debug"><span>调试（Debug）</span></a></h1><p>所有的类型，若想用 <code>std::fmt</code> 的格式化打印，都要求实现至少一个可打印的 <code>traits</code>。仅有一些类型提供了自动实现，比如 <code>std</code> 库中的类型。所有其他类型都<strong>必须</strong>手动实现。</p><p><code>fmt::Debug</code> 这个 <code>trait</code> 使这项工作变得相当简单。所有类型都能派生（<code>derive</code>，即自动创建）<code>fmt::Debug</code> 的实现。但是 <code>fmt::Display</code> 需要手动实现。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这个结构体不能使用 \`fmt::Display\` 或 \`fmt::Debug\` 来进行打印。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UnPrintable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// \`derive\` 属性会自动创建所需的实现，使这个 \`struct\` 能使用 \`fmt::Debug\` 打印。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[derive(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Debug</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DebugPrintable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有 <code>std</code> 库类型都天生可以使用 <code>{:?}</code> 来打印：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 推导 \`Structure\` 的 \`fmt::Debug\` 实现。</span></span>
<span class="line"><span>// \`Structure\` 是一个包含单个 \`i32\` 的结构体。</span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct Structure(i32);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 将 \`Structure\` 放到结构体 \`Deep\` 中。然后使 \`Deep\` 也能够打印。</span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct Deep(Structure);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 使用 \`{:?}\` 打印和使用 \`{}\` 类似。</span></span>
<span class="line"><span>    println!(&quot;{:?} months in a year.&quot;, 12);</span></span>
<span class="line"><span>    println!(&quot;{1:?} {0:?} is the {actor:?} name.&quot;,</span></span>
<span class="line"><span>             &quot;Slater&quot;,</span></span>
<span class="line"><span>             &quot;Christian&quot;,</span></span>
<span class="line"><span>             actor=&quot;actor&#39;s&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`Structure\` 也可以打印！</span></span>
<span class="line"><span>    println!(&quot;Now {:?} will print!&quot;, Structure(3));</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // 使用 \`derive\` 的一个问题是不能控制输出的形式。</span></span>
<span class="line"><span>    // 假如我只想展示一个 \`7\` 怎么办？</span></span>
<span class="line"><span>    println!(&quot;Now {:?} will print!&quot;, Deep(Structure(7)));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以 <code>fmt::Debug</code> 确实使这些内容可以打印，但是牺牲了一些美感。Rust 也通过 <code>{:#?}</code> 提供了 “美化打印” 的功能：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct Person&lt;&#39;a&gt; {</span></span>
<span class="line"><span>    name: &amp;&#39;a str,</span></span>
<span class="line"><span>    age: u8</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let name = &quot;Peter&quot;;</span></span>
<span class="line"><span>    let age = 27;</span></span>
<span class="line"><span>    let peter = Person { name, age };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 美化打印</span></span>
<span class="line"><span>    println!(&quot;{:#?}&quot;, peter);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以通过手动实现 <code>fmt::Display</code> 来控制显示效果。</p><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,10)),e("p",null,[s[2]||(s[2]=e("a",{href:"https://rustwiki.org/zh-CN/reference/attributes.html",target:"_blank",rel:"noopener noreferrer"},"attributes",-1)),s[3]||(s[3]=n(", ")),a(i,{to:"/trait/derive.html"},{default:t(()=>s[0]||(s[0]=[e("code",null,"derive",-1)])),_:1}),s[4]||(s[4]=n(", ")),s[5]||(s[5]=e("a",{href:"https://rustwiki.org/zh-CN/std/fmt/",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"std::fmt")],-1)),s[6]||(s[6]=n(" 和 ")),a(i,{to:"/custom_types/structs.html"},{default:t(()=>s[1]||(s[1]=[e("code",null,"struct",-1)])),_:1})])])}const v=l(u,[["render",o],["__file","print_debug.html.vue"]]),b=JSON.parse('{"path":"/hello/print/print_debug.html","title":"调试（Debug）","lang":"zh-CN","frontmatter":{"description":"调试（Debug） 所有的类型，若想用 std::fmt 的格式化打印，都要求实现至少一个可打印的 traits。仅有一些类型提供了自动实现，比如 std 库中的类型。所有其他类型都必须手动实现。 fmt::Debug 这个 trait 使这项工作变得相当简单。所有类型都能派生（derive，即自动创建）fmt::Debug 的实现。但是 fmt::D...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/hello/print/print_debug.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"调试（Debug）"}],["meta",{"property":"og:description","content":"调试（Debug） 所有的类型，若想用 std::fmt 的格式化打印，都要求实现至少一个可打印的 traits。仅有一些类型提供了自动实现，比如 std 库中的类型。所有其他类型都必须手动实现。 fmt::Debug 这个 trait 使这项工作变得相当简单。所有类型都能派生（derive，即自动创建）fmt::Debug 的实现。但是 fmt::D..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"调试（Debug）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.44,"words":431},"filePathRelative":"hello/print/print_debug.md","excerpt":"\\n<p>所有的类型，若想用 <code>std::fmt</code> 的格式化打印，都要求实现至少一个可打印的 <code>traits</code>。仅有一些类型提供了自动实现，比如 <code>std</code> 库中的类型。所有其他类型都<strong>必须</strong>手动实现。</p>\\n<p><code>fmt::Debug</code> 这个 <code>trait</code> 使这项工作变得相当简单。所有类型都能派生（<code>derive</code>，即自动创建）<code>fmt::Debug</code> 的实现。但是 <code>fmt::Display</code> 需要手动实现。</p>","autoDesc":true,"bioChainData":{"outlink":[{"title":"derive","link":"trait/derive.html"},{"title":"structs","link":"custom_types/structs.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"hello/print/print_debug.md","value":{"title":"print_debug","path":"hello/print/print_debug.md","outlink":["trait/derive.md","custom_types/structs.md"],"backlink":["SUMMARY.md"]}},{"id":"trait/derive.md","value":{"title":"derive","path":"trait/derive.md","outlink":[],"backlink":[]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"hello/print/print_debug.md","target":"trait/derive.md"},{"source":"hello/print/print_debug.md","target":"custom_types/structs.md"},{"source":"SUMMARY.md","target":"hello/print/print_debug.md"}]}}}');export{v as comp,b as data};
