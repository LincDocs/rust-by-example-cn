import{_ as a,e as s,k as n,o as t}from"./app-CVSWwIkE.js";const i={};function p(d,e){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="路径" tabindex="-1"><a class="header-anchor" href="#路径"><span>路径</span></a></h1><p><code>Path</code> 结构体代表了底层文件系统的文件路径。<code>Path</code> 分为两种：<code>posix::Path</code>，针对类 UNIX 系统；以及 <code>windows::Path</code>，针对 Windows。prelude 会选择并输出符合平台类型的 <code>Path</code> 种类。</p><blockquote><p>译注：prelude 是 Rust 自动地在每个程序中导入的一些通用的东西，这样我们就不必每写<br> 一个程序就手动导入一番。</p></blockquote><p><code>Path</code> 可从 <code>OsStr</code> 类型创建，并且它提供数种方法，用于获取路径指向的文件/目录的信息。</p><p>注意 <code>Path</code> 在内部并不是用 UTF-8 字符串表示的，而是存储为若干字节（<code>Vec&lt;u8&gt;</code>）的 vector。因此，将 <code>Path</code> 转化成 <code>&amp;str</code> 并非零开销的（free），且可能失败（因此它返回一个 <code>Option</code>）。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::path::Path;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 从 \`&amp;&#39;static str\` 创建一个 \`Path\`</span></span>
<span class="line"><span>    let path = Path::new(&quot;.&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`display\` 方法返回一个可显示（showable）的结构体</span></span>
<span class="line"><span>    let display = path.display();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`join\` 使用操作系统特定的分隔符来合并路径到一个字节容器，并返回新的路径</span></span>
<span class="line"><span>    let new_path = path.join(&quot;a&quot;).join(&quot;b&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 将路径转换成一个字符串切片</span></span>
<span class="line"><span>    match new_path.to_str() {</span></span>
<span class="line"><span>        None =&gt; panic!(&quot;new path is not a valid UTF-8 sequence&quot;),</span></span>
<span class="line"><span>        Some(s) =&gt; println!(&quot;new path is {}&quot;, s),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记得看看其他的 <code>Path</code> 方法（<code>posix::Path</code> 或 <code>windows::Path</code> 的），还有 <code>Metadata</code> 结构体类型。</p><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见</span></a></h3><p><a href="https://rustwiki.org/zh-CN/std/ffi/struct.OsStr.html" target="_blank" rel="noopener noreferrer">OsStr</a> 和 <a href="https://rustwiki.org/zh-CN/std/fs/struct.Metadata.html" target="_blank" rel="noopener noreferrer">Metadata</a>。</p>`,9)]))}const o=a(i,[["render",p],["__file","path.html.vue"]]),c=JSON.parse('{"path":"/std_misc/path.html","title":"路径","lang":"zh-CN","frontmatter":{"description":"路径 Path 结构体代表了底层文件系统的文件路径。Path 分为两种：posix::Path，针对类 UNIX 系统；以及 windows::Path，针对 Windows。prelude 会选择并输出符合平台类型的 Path 种类。 译注：prelude 是 Rust 自动地在每个程序中导入的一些通用的东西，这样我们就不必每写 一个程序就手动导入一...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std_misc/path.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"路径"}],["meta",{"property":"og:description","content":"路径 Path 结构体代表了底层文件系统的文件路径。Path 分为两种：posix::Path，针对类 UNIX 系统；以及 windows::Path，针对 Windows。prelude 会选择并输出符合平台类型的 Path 种类。 译注：prelude 是 Rust 自动地在每个程序中导入的一些通用的东西，这样我们就不必每写 一个程序就手动导入一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"路径\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.16,"words":347},"filePathRelative":"std_misc/path.md","excerpt":"\\n<p><code>Path</code> 结构体代表了底层文件系统的文件路径。<code>Path</code> 分为两种：<code>posix::Path</code>，针对类 UNIX 系统；以及 <code>windows::Path</code>，针对 Windows。prelude 会选择并输出符合平台类型的 <code>Path</code> 种类。</p>\\n<blockquote>\\n<p>译注：prelude 是 Rust 自动地在每个程序中导入的一些通用的东西，这样我们就不必每写<br>\\n一个程序就手动导入一番。</p>\\n</blockquote>\\n<p><code>Path</code> 可从 <code>OsStr</code> 类型创建，并且它提供数种方法，用于获取路径指向的文件/目录的信息。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std_misc/path.md","value":{"title":"path","path":"std_misc/path.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std_misc/path.md"}]}}}');export{o as comp,c as data};
