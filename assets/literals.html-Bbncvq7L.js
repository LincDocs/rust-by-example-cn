import{_ as p,e as d,k as t,f as e,i as n,g as i,h as l,r as o,o as r}from"./app-CY03Lsxp.js";const m={};function c(u,s){const a=o("RouteLink");return r(),d("div",null,[s[13]||(s[13]=t(`<h1 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量"><span>字面量</span></a></h1><p>对数值字面量，只要把类型作为后缀加上去，就完成了类型说明。比如指定字面量 <code>42</code> 的类型是 <code>i32</code>，只需要写 <code>42i32</code>。</p><p>无后缀的数值字面量，其类型取决于怎样使用它们。如果没有限制，编译器会对整数使用 <code>i32</code>，对浮点数使用 <code>f64</code>。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 带后缀的字面量，其类型在初始化时已经知道了。</span></span>
<span class="line"><span>    let x = 1u8;</span></span>
<span class="line"><span>    let y = 2u32;</span></span>
<span class="line"><span>    let z = 3f32;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 无后缀的字面量，其类型取决于如何使用它们。</span></span>
<span class="line"><span>    let i = 1;</span></span>
<span class="line"><span>    let f = 1.0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`size_of_val\` 返回一个变量所占的字节数</span></span>
<span class="line"><span>    println!(&quot;size of \`x\` in bytes: {}&quot;, std::mem::size_of_val(&amp;x));</span></span>
<span class="line"><span>    println!(&quot;size of \`y\` in bytes: {}&quot;, std::mem::size_of_val(&amp;y));</span></span>
<span class="line"><span>    println!(&quot;size of \`z\` in bytes: {}&quot;, std::mem::size_of_val(&amp;z));</span></span>
<span class="line"><span>    println!(&quot;size of \`i\` in bytes: {}&quot;, std::mem::size_of_val(&amp;i));</span></span>
<span class="line"><span>    println!(&quot;size of \`f\` in bytes: {}&quot;, std::mem::size_of_val(&amp;f));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码使用了一些还没有讨论过的概念。心急的读者可以看看下面的简短解释：</p>`,5)),e("ul",null,[e("li",null,[s[1]||(s[1]=e("code",null,"fun(&foo)",-1)),s[2]||(s[2]=n(" 用")),s[3]||(s[3]=e("strong",null,"传引用",-1)),s[4]||(s[4]=n("（pass by reference）的方式把变量传给函数，而非传值（pass by value，写法是 ")),s[5]||(s[5]=e("code",null,"fun(foo)",-1)),s[6]||(s[6]=n("）。更多细节请看")),i(a,{to:"/scope/borrow.html"},{default:l(()=>s[0]||(s[0]=[n("借用")])),_:1}),s[7]||(s[7]=n("。"))]),e("li",null,[s[10]||(s[10]=t("<code>std::mem::size_of_val</code> 是一个函数，这里使用其<strong>完整路径</strong>（full path）调用。代码可以分成一些叫做<strong>模块</strong>（module）的逻辑单元。在本例中，<code>size_of_val</code> 函数是在 <code>mem</code> 模块中定义的，而 <code>mem</code> 模块又是在 <code>std</code> <strong>crate</strong> 中定义的。更多细节请看",16)),i(a,{to:"/mod.html"},{default:l(()=>s[8]||(s[8]=[n("模块")])),_:1}),s[11]||(s[11]=n("和")),i(a,{to:"/crates.html"},{default:l(()=>s[9]||(s[9]=[n("crate")])),_:1}),s[12]||(s[12]=n("."))])])])}const b=p(m,[["render",c],["__file","literals.html.vue"]]),f=JSON.parse('{"path":"/types/literals.html","title":"字面量","lang":"zh-CN","frontmatter":{"description":"字面量 对数值字面量，只要把类型作为后缀加上去，就完成了类型说明。比如指定字面量 42 的类型是 i32，只需要写 42i32。 无后缀的数值字面量，其类型取决于怎样使用它们。如果没有限制，编译器会对整数使用 i32，对浮点数使用 f64。 上面的代码使用了一些还没有讨论过的概念。心急的读者可以看看下面的简短解释： fun(&foo) 用传引用（pas...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/types/literals.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"字面量"}],["meta",{"property":"og:description","content":"字面量 对数值字面量，只要把类型作为后缀加上去，就完成了类型说明。比如指定字面量 42 的类型是 i32，只需要写 42i32。 无后缀的数值字面量，其类型取决于怎样使用它们。如果没有限制，编译器会对整数使用 i32，对浮点数使用 f64。 上面的代码使用了一些还没有讨论过的概念。心急的读者可以看看下面的简短解释： fun(&foo) 用传引用（pas..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字面量\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.26,"words":377},"filePathRelative":"types/literals.md","excerpt":"\\n<p>对数值字面量，只要把类型作为后缀加上去，就完成了类型说明。比如指定字面量 <code>42</code> 的类型是 <code>i32</code>，只需要写 <code>42i32</code>。</p>\\n<p>无后缀的数值字面量，其类型取决于怎样使用它们。如果没有限制，编译器会对整数使用 <code>i32</code>，对浮点数使用 <code>f64</code>。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 带后缀的字面量，其类型在初始化时已经知道了。</span></span>\\n<span class=\\"line\\"><span>    let x = 1u8;</span></span>\\n<span class=\\"line\\"><span>    let y = 2u32;</span></span>\\n<span class=\\"line\\"><span>    let z = 3f32;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 无后缀的字面量，其类型取决于如何使用它们。</span></span>\\n<span class=\\"line\\"><span>    let i = 1;</span></span>\\n<span class=\\"line\\"><span>    let f = 1.0;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `size_of_val` 返回一个变量所占的字节数</span></span>\\n<span class=\\"line\\"><span>    println!(\\"size of `x` in bytes: {}\\", std::mem::size_of_val(&amp;x));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"size of `y` in bytes: {}\\", std::mem::size_of_val(&amp;y));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"size of `z` in bytes: {}\\", std::mem::size_of_val(&amp;z));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"size of `i` in bytes: {}\\", std::mem::size_of_val(&amp;i));</span></span>\\n<span class=\\"line\\"><span>    println!(\\"size of `f` in bytes: {}\\", std::mem::size_of_val(&amp;f));</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"borrow","link":"scope/borrow.html"},{"title":"mod","link":"mod.html"},{"title":"crates","link":"crates.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"types","link":"types.html"}],"localMap":{"nodes":[{"id":"types/literals.md","value":{"title":"literals","path":"types/literals.md","outlink":["scope/borrow.md","mod.md","crates.md"],"backlink":["SUMMARY.md","types.md"]}},{"id":"scope/borrow.md","value":{"title":"borrow","path":"scope/borrow.md","outlink":[],"backlink":[]}},{"id":"mod.md","value":{"title":"mod","path":"mod.md","outlink":[],"backlink":[]}},{"id":"crates.md","value":{"title":"crates","path":"crates.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"types.md","value":{"title":"types","path":"types.md","outlink":[],"backlink":[]}}],"links":[{"source":"types/literals.md","target":"scope/borrow.md"},{"source":"types/literals.md","target":"mod.md"},{"source":"types/literals.md","target":"crates.md"},{"source":"SUMMARY.md","target":"types/literals.md"},{"source":"types.md","target":"types/literals.md"}]}}}');export{b as comp,f as data};
