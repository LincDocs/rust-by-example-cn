import{_ as n,e as a,k as i,o as e}from"./app-CY03Lsxp.js";const l={};function p(d,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="dry-不写重复代码" tabindex="-1"><a class="header-anchor" href="#dry-不写重复代码"><span>DRY (不写重复代码)</span></a></h1><p>通过提取函数或测试集的公共部分，宏可以让你写出 DRY 的代码（DRY 是 Don&#39;t Repeat Yourself 的缩写，意思为 “不要写重复代码”）。这里给出一个例子，对 <code>Vec&lt;T&gt;</code> 实现并测试了关于 <code>+=</code>、<code>*=</code> 和 <code>-=</code> 等运算符。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::ops::{Add, Mul, Sub};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>macro_rules! assert_equal_len {</span></span>
<span class="line"><span>    // \`tt\`（token tree，标记树）指示符表示运算符和标记。</span></span>
<span class="line"><span>    ($a:ident, $b: ident, $func:ident, $op:tt) =&gt; {</span></span>
<span class="line"><span>        assert!($a.len() == $b.len(),</span></span>
<span class="line"><span>                &quot;{:?}: dimension mismatch: {:?} {:?} {:?}&quot;,</span></span>
<span class="line"><span>                stringify!($func),</span></span>
<span class="line"><span>                ($a.len(),),</span></span>
<span class="line"><span>                stringify!($op),</span></span>
<span class="line"><span>                ($b.len(),));</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>macro_rules! op {</span></span>
<span class="line"><span>    ($func:ident, $bound:ident, $op:tt, $method:ident) =&gt; {</span></span>
<span class="line"><span>        fn $func&lt;T: $bound&lt;T, Output=T&gt; + Copy&gt;(xs: &amp;mut Vec&lt;T&gt;, ys: &amp;Vec&lt;T&gt;) {</span></span>
<span class="line"><span>            assert_equal_len!(xs, ys, $func, $op);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            for (x, y) in xs.iter_mut().zip(ys.iter()) {</span></span>
<span class="line"><span>                *x = $bound::$method(*x, *y);</span></span>
<span class="line"><span>                // *x = x.$method(*y);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 实现 \`add_assign\`、\`mul_assign\` 和 \`sub_assign\` 等函数。</span></span>
<span class="line"><span>op!(add_assign, Add, +=, add);</span></span>
<span class="line"><span>op!(mul_assign, Mul, *=, mul);</span></span>
<span class="line"><span>op!(sub_assign, Sub, -=, sub);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mod test {</span></span>
<span class="line"><span>    use std::iter;</span></span>
<span class="line"><span>    macro_rules! test {</span></span>
<span class="line"><span>        ($func: ident, $x:expr, $y:expr, $z:expr) =&gt; {</span></span>
<span class="line"><span>            #[test]</span></span>
<span class="line"><span>            fn $func() {</span></span>
<span class="line"><span>                for size in 0usize..10 {</span></span>
<span class="line"><span>                    let mut x: Vec&lt;_&gt; = iter::repeat($x).take(size).collect();</span></span>
<span class="line"><span>                    let y: Vec&lt;_&gt; = iter::repeat($y).take(size).collect();</span></span>
<span class="line"><span>                    let z: Vec&lt;_&gt; = iter::repeat($z).take(size).collect();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    super::$func(&amp;mut x, &amp;y);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    assert_eq!(x, z);</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 测试 \`add_assign\`、\`mul_assign\` 和 \`sub_assign\`</span></span>
<span class="line"><span>    test!(add_assign, 1u32, 2u32, 3u32);</span></span>
<span class="line"><span>    test!(mul_assign, 2u32, 3u32, 6u32);</span></span>
<span class="line"><span>    test!(sub_assign, 3u32, 2u32, 1u32);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dry.rs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./dry</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">running</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test::mul_assign</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test::add_assign</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test::sub_assign</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> passed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> failed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ignored</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> measured</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const c=n(l,[["render",p],["__file","dry.html.vue"]]),r=JSON.parse('{"path":"/macros/dry.html","title":"DRY (不写重复代码)","lang":"zh-CN","frontmatter":{"description":"DRY (不写重复代码) 通过提取函数或测试集的公共部分，宏可以让你写出 DRY 的代码（DRY 是 Don\'t Repeat Yourself 的缩写，意思为 “不要写重复代码”）。这里给出一个例子，对 Vec<T> 实现并测试了关于 +=、*= 和 -= 等运算符。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/macros/dry.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"DRY (不写重复代码)"}],["meta",{"property":"og:description","content":"DRY (不写重复代码) 通过提取函数或测试集的公共部分，宏可以让你写出 DRY 的代码（DRY 是 Don\'t Repeat Yourself 的缩写，意思为 “不要写重复代码”）。这里给出一个例子，对 Vec<T> 实现并测试了关于 +=、*= 和 -= 等运算符。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DRY (不写重复代码)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.03,"words":309},"filePathRelative":"macros/dry.md","excerpt":"\\n<p>通过提取函数或测试集的公共部分，宏可以让你写出 DRY 的代码（DRY 是 Don\'t Repeat Yourself 的缩写，意思为 “不要写重复代码”）。这里给出一个例子，对 <code>Vec&lt;T&gt;</code> 实现并测试了关于 <code>+=</code>、<code>*=</code> 和 <code>-=</code> 等运算符。</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::ops::{Add, Mul, Sub};</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>macro_rules! assert_equal_len {</span></span>\\n<span class=\\"line\\"><span>    // `tt`（token tree，标记树）指示符表示运算符和标记。</span></span>\\n<span class=\\"line\\"><span>    ($a:ident, $b: ident, $func:ident, $op:tt) =&gt; {</span></span>\\n<span class=\\"line\\"><span>        assert!($a.len() == $b.len(),</span></span>\\n<span class=\\"line\\"><span>                \\"{:?}: dimension mismatch: {:?} {:?} {:?}\\",</span></span>\\n<span class=\\"line\\"><span>                stringify!($func),</span></span>\\n<span class=\\"line\\"><span>                ($a.len(),),</span></span>\\n<span class=\\"line\\"><span>                stringify!($op),</span></span>\\n<span class=\\"line\\"><span>                ($b.len(),));</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>macro_rules! op {</span></span>\\n<span class=\\"line\\"><span>    ($func:ident, $bound:ident, $op:tt, $method:ident) =&gt; {</span></span>\\n<span class=\\"line\\"><span>        fn $func&lt;T: $bound&lt;T, Output=T&gt; + Copy&gt;(xs: &amp;mut Vec&lt;T&gt;, ys: &amp;Vec&lt;T&gt;) {</span></span>\\n<span class=\\"line\\"><span>            assert_equal_len!(xs, ys, $func, $op);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>            for (x, y) in xs.iter_mut().zip(ys.iter()) {</span></span>\\n<span class=\\"line\\"><span>                *x = $bound::$method(*x, *y);</span></span>\\n<span class=\\"line\\"><span>                // *x = x.$method(*y);</span></span>\\n<span class=\\"line\\"><span>            }</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    };</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 实现 `add_assign`、`mul_assign` 和 `sub_assign` 等函数。</span></span>\\n<span class=\\"line\\"><span>op!(add_assign, Add, +=, add);</span></span>\\n<span class=\\"line\\"><span>op!(mul_assign, Mul, *=, mul);</span></span>\\n<span class=\\"line\\"><span>op!(sub_assign, Sub, -=, sub);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>mod test {</span></span>\\n<span class=\\"line\\"><span>    use std::iter;</span></span>\\n<span class=\\"line\\"><span>    macro_rules! test {</span></span>\\n<span class=\\"line\\"><span>        ($func: ident, $x:expr, $y:expr, $z:expr) =&gt; {</span></span>\\n<span class=\\"line\\"><span>            #[test]</span></span>\\n<span class=\\"line\\"><span>            fn $func() {</span></span>\\n<span class=\\"line\\"><span>                for size in 0usize..10 {</span></span>\\n<span class=\\"line\\"><span>                    let mut x: Vec&lt;_&gt; = iter::repeat($x).take(size).collect();</span></span>\\n<span class=\\"line\\"><span>                    let y: Vec&lt;_&gt; = iter::repeat($y).take(size).collect();</span></span>\\n<span class=\\"line\\"><span>                    let z: Vec&lt;_&gt; = iter::repeat($z).take(size).collect();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>                    super::$func(&amp;mut x, &amp;y);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>                    assert_eq!(x, z);</span></span>\\n<span class=\\"line\\"><span>                }</span></span>\\n<span class=\\"line\\"><span>            }</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // 测试 `add_assign`、`mul_assign` 和 `sub_assign`</span></span>\\n<span class=\\"line\\"><span>    test!(add_assign, 1u32, 2u32, 3u32);</span></span>\\n<span class=\\"line\\"><span>    test!(mul_assign, 2u32, 3u32, 6u32);</span></span>\\n<span class=\\"line\\"><span>    test!(sub_assign, 3u32, 2u32, 1u32);</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"macros/dry.md","value":{"title":"dry","path":"macros/dry.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"macros/dry.md"}]}}}');export{c as comp,r as data};
