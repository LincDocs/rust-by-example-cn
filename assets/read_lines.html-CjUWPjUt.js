import{_ as n,e as i,k as a,o as e}from"./app-CVSWwIkE.js";const l={};function p(t,s){return e(),i("div",null,s[0]||(s[0]=[a(`<h1 id="读取行" tabindex="-1"><a class="header-anchor" href="#读取行"><span>读取行</span></a></h1><p>方法 <code>lines()</code> 在文件的行上返回一个迭代器。</p><p><code>File::open</code> 需要一个泛型 <code>AsRef&lt;Path&gt;</code>。这正是 <code>read_lines()</code> 期望的输入。</p><div class="language-rust,no_run line-numbers-mode" data-highlighter="shiki" data-ext="rust,no_run" data-title="rust,no_run" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::fs::File;</span></span>
<span class="line"><span>use std::io::{self, BufRead};</span></span>
<span class="line"><span>use std::path::Path;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 在生成输出之前，文件 \`hosts\` 必须存在于当前路径中</span></span>
<span class="line"><span>    if let Ok(lines) = read_lines(&quot;./hosts&quot;) {</span></span>
<span class="line"><span>        // 使用迭代器，返回一个（可选）字符串</span></span>
<span class="line"><span>        for line in lines {</span></span>
<span class="line"><span>            if let Ok(ip) = line {</span></span>
<span class="line"><span>                println!(&quot;{}&quot;, ip);</span></span>
<span class="line"><span>            }      </span></span>
<span class="line"><span>        }   </span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 输出包裹在 Result 中以允许匹配错误，</span></span>
<span class="line"><span>// 将迭代器返回给文件行的读取器（Reader）。</span></span>
<span class="line"><span>fn read_lines&lt;P&gt;(filename: P) -&gt; io::Result&lt;io::Lines&lt;io::BufReader&lt;File&gt;&gt;&gt;</span></span>
<span class="line"><span>where P: AsRef&lt;Path&gt;, {</span></span>
<span class="line"><span>    let file = File::open(filename)?;</span></span>
<span class="line"><span>    Ok(io::BufReader::new(file).lines())</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行此程序将一行行将内容打印出来。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;127.0.0.1\\n192.168.0.1\\n&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">hosts</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> read_lines.rs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./read_lines</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">192.168.0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个过程比在内存中创建 <code>String</code> 更有效，特别是处理更大的文件。</p>`,7)]))}const r=n(l,[["render",p],["__file","read_lines.html.vue"]]),c=JSON.parse('{"path":"/std_misc/file/read_lines.html","title":"读取行","lang":"zh-CN","frontmatter":{"description":"读取行 方法 lines() 在文件的行上返回一个迭代器。 File::open 需要一个泛型 AsRef<Path>。这正是 read_lines() 期望的输入。 运行此程序将一行行将内容打印出来。 这个过程比在内存中创建 String 更有效，特别是处理更大的文件。","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/std_misc/file/read_lines.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"读取行"}],["meta",{"property":"og:description","content":"读取行 方法 lines() 在文件的行上返回一个迭代器。 File::open 需要一个泛型 AsRef<Path>。这正是 read_lines() 期望的输入。 运行此程序将一行行将内容打印出来。 这个过程比在内存中创建 String 更有效，特别是处理更大的文件。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"读取行\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.73,"words":219},"filePathRelative":"std_misc/file/read_lines.md","excerpt":"\\n<p>方法 <code>lines()</code> 在文件的行上返回一个迭代器。</p>\\n<p><code>File::open</code> 需要一个泛型 <code>AsRef&lt;Path&gt;</code>。这正是 <code>read_lines()</code> 期望的输入。</p>\\n<div class=\\"language-rust,no_run line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,no_run\\" data-title=\\"rust,no_run\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>use std::fs::File;</span></span>\\n<span class=\\"line\\"><span>use std::io::{self, BufRead};</span></span>\\n<span class=\\"line\\"><span>use std::path::Path;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 在生成输出之前，文件 `hosts` 必须存在于当前路径中</span></span>\\n<span class=\\"line\\"><span>    if let Ok(lines) = read_lines(\\"./hosts\\") {</span></span>\\n<span class=\\"line\\"><span>        // 使用迭代器，返回一个（可选）字符串</span></span>\\n<span class=\\"line\\"><span>        for line in lines {</span></span>\\n<span class=\\"line\\"><span>            if let Ok(ip) = line {</span></span>\\n<span class=\\"line\\"><span>                println!(\\"{}\\", ip);</span></span>\\n<span class=\\"line\\"><span>            }      </span></span>\\n<span class=\\"line\\"><span>        }   </span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 输出包裹在 Result 中以允许匹配错误，</span></span>\\n<span class=\\"line\\"><span>// 将迭代器返回给文件行的读取器（Reader）。</span></span>\\n<span class=\\"line\\"><span>fn read_lines&lt;P&gt;(filename: P) -&gt; io::Result&lt;io::Lines&lt;io::BufReader&lt;File&gt;&gt;&gt;</span></span>\\n<span class=\\"line\\"><span>where P: AsRef&lt;Path&gt;, {</span></span>\\n<span class=\\"line\\"><span>    let file = File::open(filename)?;</span></span>\\n<span class=\\"line\\"><span>    Ok(io::BufReader::new(file).lines())</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"std_misc/file/read_lines.md","value":{"title":"read_lines","path":"std_misc/file/read_lines.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"std_misc/file/read_lines.md"}]}}}');export{r as comp,c as data};
