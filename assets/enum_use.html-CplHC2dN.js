import{_ as l,e as p,k as t,f as n,g as e,i as d,h as i,r as c,o as u}from"./app-CY03Lsxp.js";const r={};function o(m,s){const a=c("RouteLink");return u(),p("div",null,[s[3]||(s[3]=t(`<h1 id="使用-use" tabindex="-1"><a class="header-anchor" href="#使用-use"><span>使用 use</span></a></h1><p>使用 <code>use</code> 声明的话，就可以不写出名称的完整路径了：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 该属性用于隐藏对未使用代码的警告。</span></span>
<span class="line"><span>#![allow(dead_code)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>enum Status {</span></span>
<span class="line"><span>    Rich,</span></span>
<span class="line"><span>    Poor,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>enum Work {</span></span>
<span class="line"><span>    Civilian,</span></span>
<span class="line"><span>    Soldier,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 显式地 \`use\` 各个名称使他们直接可用，而不需要指定它们来自 \`Status\`。</span></span>
<span class="line"><span>    use Status::{Poor, Rich};</span></span>
<span class="line"><span>    // 自动地 \`use\` \`Work\` 内部的各个名称。</span></span>
<span class="line"><span>    use Work::*;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`Poor\` 等价于 \`Status::Poor\`。</span></span>
<span class="line"><span>    let status = Poor;</span></span>
<span class="line"><span>    // \`Civilian\` 等价于 \`Work::Civilian\`。</span></span>
<span class="line"><span>    let work = Civilian;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    match status {</span></span>
<span class="line"><span>        // 注意这里没有用完整路径，因为上面显式地使用了 \`use\`。</span></span>
<span class="line"><span>        Rich =&gt; println!(&quot;The rich have lots of money!&quot;),</span></span>
<span class="line"><span>        Poor =&gt; println!(&quot;The poor have no money...&quot;),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    match work {</span></span>
<span class="line"><span>        // 再次注意到没有用完整路径。</span></span>
<span class="line"><span>        Civilian =&gt; println!(&quot;Civilians work!&quot;),</span></span>
<span class="line"><span>        Soldier  =&gt; println!(&quot;Soldiers fight!&quot;),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,4)),n("p",null,[e(a,{to:"/flow_control/match.html"},{default:i(()=>s[0]||(s[0]=[n("code",null,"match",-1)])),_:1}),s[2]||(s[2]=d(" 和 ")),e(a,{to:"/mod/use.html"},{default:i(()=>s[1]||(s[1]=[n("code",null,"use",-1)])),_:1})])])}const b=l(r,[["render",o],["__file","enum_use.html.vue"]]),h=JSON.parse('{"path":"/custom_types/enum/enum_use.html","title":"使用 use","lang":"zh-CN","frontmatter":{"description":"使用 use 使用 use 声明的话，就可以不写出名称的完整路径了： 参见： 和","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/custom_types/enum/enum_use.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"使用 use"}],["meta",{"property":"og:description","content":"使用 use 使用 use 声明的话，就可以不写出名称的完整路径了： 参见： 和"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 use\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.65,"words":195},"filePathRelative":"custom_types/enum/enum_use.md","excerpt":"\\n<p>使用 <code>use</code> 声明的话，就可以不写出名称的完整路径了：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 该属性用于隐藏对未使用代码的警告。</span></span>\\n<span class=\\"line\\"><span>#![allow(dead_code)]</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>enum Status {</span></span>\\n<span class=\\"line\\"><span>    Rich,</span></span>\\n<span class=\\"line\\"><span>    Poor,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>enum Work {</span></span>\\n<span class=\\"line\\"><span>    Civilian,</span></span>\\n<span class=\\"line\\"><span>    Soldier,</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    // 显式地 `use` 各个名称使他们直接可用，而不需要指定它们来自 `Status`。</span></span>\\n<span class=\\"line\\"><span>    use Status::{Poor, Rich};</span></span>\\n<span class=\\"line\\"><span>    // 自动地 `use` `Work` 内部的各个名称。</span></span>\\n<span class=\\"line\\"><span>    use Work::*;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    // `Poor` 等价于 `Status::Poor`。</span></span>\\n<span class=\\"line\\"><span>    let status = Poor;</span></span>\\n<span class=\\"line\\"><span>    // `Civilian` 等价于 `Work::Civilian`。</span></span>\\n<span class=\\"line\\"><span>    let work = Civilian;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    match status {</span></span>\\n<span class=\\"line\\"><span>        // 注意这里没有用完整路径，因为上面显式地使用了 `use`。</span></span>\\n<span class=\\"line\\"><span>        Rich =&gt; println!(\\"The rich have lots of money!\\"),</span></span>\\n<span class=\\"line\\"><span>        Poor =&gt; println!(\\"The poor have no money...\\"),</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    match work {</span></span>\\n<span class=\\"line\\"><span>        // 再次注意到没有用完整路径。</span></span>\\n<span class=\\"line\\"><span>        Civilian =&gt; println!(\\"Civilians work!\\"),</span></span>\\n<span class=\\"line\\"><span>        Soldier  =&gt; println!(\\"Soldiers fight!\\"),</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"match","link":"flow_control/match.html"},{"title":"use","link":"mod/use.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"custom_types/enum/enum_use.md","value":{"title":"enum_use","path":"custom_types/enum/enum_use.md","outlink":["flow_control/match.md","mod/use.md"],"backlink":["SUMMARY.md"]}},{"id":"flow_control/match.md","value":{"title":"match","path":"flow_control/match.md","outlink":[],"backlink":[]}},{"id":"mod/use.md","value":{"title":"use","path":"mod/use.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"custom_types/enum/enum_use.md","target":"flow_control/match.md"},{"source":"custom_types/enum/enum_use.md","target":"mod/use.md"},{"source":"SUMMARY.md","target":"custom_types/enum/enum_use.md"}]}}}');export{b as comp,h as data};
