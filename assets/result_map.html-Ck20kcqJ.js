import{_ as n,e,k as a,o as i}from"./app-CY03Lsxp.js";const r={};function t(l,s){return i(),e("div",null,s[0]||(s[0]=[a(`<h1 id="result-的-map" tabindex="-1"><a class="header-anchor" href="#result-的-map"><span><code>Result</code> 的 <code>map</code></span></a></h1><p>上一节的 <code>multiply</code> 函数的 panic 设计不是健壮的（robust）。一般地，我们希望把错误返回给调用者，这样它可以决定回应错误的正确方式。</p><p>首先，我们需要了解需要处理的错误类型是什么。为了确定 <code>Err</code> 的类型，我们可以用 <a href="https://rustwiki.org/zh-CN/std/primitive.str.html#method.parse" target="_blank" rel="noopener noreferrer"><code>parse()</code></a> 来试验。Rust 已经为 <a href="https://rustwiki.org/zh-CN/std/primitive.i32.html" target="_blank" rel="noopener noreferrer"><code>i32</code></a> 类型使用<br><a href="https://rustwiki.org/zh-CN/std/str/trait.FromStr.html" target="_blank" rel="noopener noreferrer"><code>FromStr</code></a> trait 实现了 <code>parse()</code>。结果表明，这里的 <code>Err</code> 类型被指定为<br><a href="https://rustwiki.org/zh-CN/std/num/struct.ParseIntError.html" target="_blank" rel="noopener noreferrer"><code>ParseIntError</code></a>。</p><blockquote><p>译注：原文没有具体讲如何确定 <code>Err</code> 的类型。由于目前用于获取类型的函数仍然是不<br> 稳定的，我们可以用间接的方法。使用下面的代码：</p><div class="language-rust,editable,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore" data-title="rust,editable,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main () {</span></span>
<span class="line"><span>    let i: () = &quot;t&quot;.parse::&lt;i32&gt;();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于不可能把 <code>Result</code> 类型赋给单元类型变量 <code>i</code>，编译器会提示我们：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>note: expected type \`()\`</span></span>
<span class="line"><span>         found type \`std::result::Result&lt;i32, std::num::ParseIntError&gt;\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就知道了 <code>parse&lt;i32&gt;</code> 函数的返回类型详情。</p></blockquote><p>在下面的例子中，使用简单的 <code>match</code> 语句导致了更加繁琐的代码。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::num::ParseIntError;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 修改了上一节中的返回类型，现在使用模式匹配而不是 \`unwrap()\`。</span></span>
<span class="line"><span>fn multiply(first_number_str: &amp;str, second_number_str: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {</span></span>
<span class="line"><span>    match first_number_str.parse::&lt;i32&gt;() {</span></span>
<span class="line"><span>        Ok(first_number)  =&gt; {</span></span>
<span class="line"><span>            match second_number_str.parse::&lt;i32&gt;() {</span></span>
<span class="line"><span>                Ok(second_number)  =&gt; {</span></span>
<span class="line"><span>                    Ok(first_number * second_number)</span></span>
<span class="line"><span>                },</span></span>
<span class="line"><span>                Err(e) =&gt; Err(e),</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        Err(e) =&gt; Err(e),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn print(result: Result&lt;i32, ParseIntError&gt;) {</span></span>
<span class="line"><span>    match result {</span></span>
<span class="line"><span>        Ok(n)  =&gt; println!(&quot;n is {}&quot;, n),</span></span>
<span class="line"><span>        Err(e) =&gt; println!(&quot;Error: {}&quot;, e),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 这种情形下仍然会给出正确的答案。</span></span>
<span class="line"><span>    let twenty = multiply(&quot;10&quot;, &quot;2&quot;);</span></span>
<span class="line"><span>    print(twenty);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 这种情况下就会提供一条更有用的错误信息。</span></span>
<span class="line"><span>    let tt = multiply(&quot;t&quot;, &quot;2&quot;);</span></span>
<span class="line"><span>    print(tt);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>幸运的是，<code>Option</code> 的 <code>map</code>、<code>and_then</code>、以及很多其他组合算子也为 <code>Result</code> 实现了。官方文档的 <a href="https://rustwiki.org/zh-CN/std/result/enum.Result.html" target="_blank" rel="noopener noreferrer"><code>Result</code></a> 一节包含完整的方法列表。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::num::ParseIntError;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 就像 \`Option\` 那样，我们可以使用 \`map()\` 之类的组合算子。</span></span>
<span class="line"><span>// 除去写法外，这个函数与上面那个完全一致，它的作用是：</span></span>
<span class="line"><span>// 如果值是合法的，计算其乘积，否则返回错误。</span></span>
<span class="line"><span>fn multiply(first_number_str: &amp;str, second_number_str: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {</span></span>
<span class="line"><span>    first_number_str.parse::&lt;i32&gt;().and_then(|first_number| {</span></span>
<span class="line"><span>        second_number_str.parse::&lt;i32&gt;().map(|second_number| first_number * second_number)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn print(result: Result&lt;i32, ParseIntError&gt;) {</span></span>
<span class="line"><span>    match result {</span></span>
<span class="line"><span>        Ok(n)  =&gt; println!(&quot;n is {}&quot;, n),</span></span>
<span class="line"><span>        Err(e) =&gt; println!(&quot;Error: {}&quot;, e),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 这种情况下仍然会给出正确的答案。</span></span>
<span class="line"><span>    let twenty = multiply(&quot;10&quot;, &quot;2&quot;);</span></span>
<span class="line"><span>    print(twenty);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 这种情况下就会提供一条更有用的错误信息。</span></span>
<span class="line"><span>    let tt = multiply(&quot;t&quot;, &quot;2&quot;);</span></span>
<span class="line"><span>    print(tt);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)]))}const d=n(r,[["render",t],["__file","result_map.html.vue"]]),c=JSON.parse('{"path":"/error/result/result_map.html","title":"Result 的 map","lang":"zh-CN","frontmatter":{"description":"Result 的 map 上一节的 multiply 函数的 panic 设计不是健壮的（robust）。一般地，我们希望把错误返回给调用者，这样它可以决定回应错误的正确方式。 首先，我们需要了解需要处理的错误类型是什么。为了确定 Err 的类型，我们可以用 parse() 来试验。Rust 已经为 i32 类型使用 FromStr trait 实现了...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/error/result/result_map.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"Result 的 map"}],["meta",{"property":"og:description","content":"Result 的 map 上一节的 multiply 函数的 panic 设计不是健壮的（robust）。一般地，我们希望把错误返回给调用者，这样它可以决定回应错误的正确方式。 首先，我们需要了解需要处理的错误类型是什么。为了确定 Err 的类型，我们可以用 parse() 来试验。Rust 已经为 i32 类型使用 FromStr trait 实现了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Result 的 map\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.07,"words":622},"filePathRelative":"error/result/result_map.md","excerpt":"\\n<p>上一节的 <code>multiply</code> 函数的 panic 设计不是健壮的（robust）。一般地，我们希望把错误返回给调用者，这样它可以决定回应错误的正确方式。</p>\\n<p>首先，我们需要了解需要处理的错误类型是什么。为了确定 <code>Err</code> 的类型，我们可以用 <a href=\\"https://rustwiki.org/zh-CN/std/primitive.str.html#method.parse\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>parse()</code></a> 来试验。Rust 已经为 <a href=\\"https://rustwiki.org/zh-CN/std/primitive.i32.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>i32</code></a> 类型使用<br>\\n<a href=\\"https://rustwiki.org/zh-CN/std/str/trait.FromStr.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>FromStr</code></a> trait 实现了 <code>parse()</code>。结果表明，这里的 <code>Err</code> 类型被指定为<br>\\n<a href=\\"https://rustwiki.org/zh-CN/std/num/struct.ParseIntError.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>ParseIntError</code></a>。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"error/result/result_map.md","value":{"title":"result_map","path":"error/result/result_map.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"error/result/result_map.md"}]}}}');export{d as comp,c as data};
