import{_ as t,e as p,k as d,f as s,g as e,i as l,h as i,r as c,o}from"./app-CY03Lsxp.js";const r={};function m(u,n){const a=c("RouteLink");return o(),p("div",null,[n[5]||(n[5]=d(`<h1 id="绑定" tabindex="-1"><a class="header-anchor" href="#绑定"><span>绑定</span></a></h1><p>在 <code>match</code> 中，若间接地访问一个变量，则不经过重新绑定就无法在分支中再使用它。<code>match</code> 提供了 <code>@</code> 符号来绑定变量到名称：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// \`age\` 函数，返回一个 \`u32\` 值。</span></span>
<span class="line"><span>fn age() -&gt; u32 {</span></span>
<span class="line"><span>    15</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    println!(&quot;Tell me what type of person you are&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    match age() {</span></span>
<span class="line"><span>        0             =&gt; println!(&quot;I haven&#39;t celebrated my first birthday yet&quot;),</span></span>
<span class="line"><span>        // 可以直接匹配（\`match\`） 1 ..= 12，但那样的话孩子会是几岁？</span></span>
<span class="line"><span>        // 相反，在 1 ..= 12 分支中绑定匹配值到 \`n\` 。现在年龄就可以读取了。</span></span>
<span class="line"><span>        n @ 1  ..= 12 =&gt; println!(&quot;I&#39;m a child of age {:?}&quot;, n),</span></span>
<span class="line"><span>        n @ 13 ..= 19 =&gt; println!(&quot;I&#39;m a teen of age {:?}&quot;, n),</span></span>
<span class="line"><span>        // 不符合上面的范围。返回结果。</span></span>
<span class="line"><span>        n             =&gt; println!(&quot;I&#39;m an old person of age {:?}&quot;, n),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用绑定来“解构” <code>enum</code> 变体，例如 <code>Option</code>:</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn some_number() -&gt; Option&lt;u32&gt; {</span></span>
<span class="line"><span>    Some(42)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    match some_number() {</span></span>
<span class="line"><span>        // 得到 \`Some\` 可变类型，如果它的值（绑定到 \`n\` 上）等于 42，则匹配。</span></span>
<span class="line"><span>        Some(n @ 42) =&gt; println!(&quot;The Answer: {}!&quot;, n),</span></span>
<span class="line"><span>        // 匹配任意其他数字。</span></span>
<span class="line"><span>        Some(n)      =&gt; println!(&quot;Not interesting... {}&quot;, n),</span></span>
<span class="line"><span>        // 匹配任意其他值（\`None\` 可变类型）。</span></span>
<span class="line"><span>        _            =&gt; (),</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,6)),s("p",null,[e(a,{to:"/fn.html"},{default:i(()=>n[0]||(n[0]=[s("code",null,"函数",-1)])),_:1}),n[3]||(n[3]=l("，")),e(a,{to:"/custom_types/enum.html"},{default:i(()=>n[1]||(n[1]=[s("code",null,"枚举",-1)])),_:1}),n[4]||(n[4]=l(" 和 ")),e(a,{to:"/std/option.html"},{default:i(()=>n[2]||(n[2]=[s("code",null,"Option",-1)])),_:1})])])}const b=t(r,[["render",m],["__file","binding.html.vue"]]),h=JSON.parse('{"path":"/flow_control/match/binding.html","title":"绑定","lang":"zh-CN","frontmatter":{"description":"绑定 在 match 中，若间接地访问一个变量，则不经过重新绑定就无法在分支中再使用它。match 提供了 @ 符号来绑定变量到名称： 你也可以使用绑定来“解构” enum 变体，例如 Option: 参见： ， 和","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/flow_control/match/binding.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"绑定"}],["meta",{"property":"og:description","content":"绑定 在 match 中，若间接地访问一个变量，则不经过重新绑定就无法在分支中再使用它。match 提供了 @ 符号来绑定变量到名称： 你也可以使用绑定来“解构” enum 变体，例如 Option: 参见： ， 和"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"绑定\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.98,"words":293},"filePathRelative":"flow_control/match/binding.md","excerpt":"\\n<p>在 <code>match</code> 中，若间接地访问一个变量，则不经过重新绑定就无法在分支中再使用它。<code>match</code> 提供了 <code>@</code> 符号来绑定变量到名称：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// `age` 函数，返回一个 `u32` 值。</span></span>\\n<span class=\\"line\\"><span>fn age() -&gt; u32 {</span></span>\\n<span class=\\"line\\"><span>    15</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {</span></span>\\n<span class=\\"line\\"><span>    println!(\\"Tell me what type of person you are\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    match age() {</span></span>\\n<span class=\\"line\\"><span>        0             =&gt; println!(\\"I haven\'t celebrated my first birthday yet\\"),</span></span>\\n<span class=\\"line\\"><span>        // 可以直接匹配（`match`） 1 ..= 12，但那样的话孩子会是几岁？</span></span>\\n<span class=\\"line\\"><span>        // 相反，在 1 ..= 12 分支中绑定匹配值到 `n` 。现在年龄就可以读取了。</span></span>\\n<span class=\\"line\\"><span>        n @ 1  ..= 12 =&gt; println!(\\"I\'m a child of age {:?}\\", n),</span></span>\\n<span class=\\"line\\"><span>        n @ 13 ..= 19 =&gt; println!(\\"I\'m a teen of age {:?}\\", n),</span></span>\\n<span class=\\"line\\"><span>        // 不符合上面的范围。返回结果。</span></span>\\n<span class=\\"line\\"><span>        n             =&gt; println!(\\"I\'m an old person of age {:?}\\", n),</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"fn","link":"fn.html"},{"title":"enum","link":"custom_types/enum.html"},{"title":"option","link":"std/option.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"destructure_slice","link":"flow_control/match/destructuring/destructure_slice.html"}],"localMap":{"nodes":[{"id":"flow_control/match/binding.md","value":{"title":"binding","path":"flow_control/match/binding.md","outlink":["fn.md","custom_types/enum.md","std/option.md"],"backlink":["SUMMARY.md","flow_control/match/destructuring/destructure_slice.md"]}},{"id":"fn.md","value":{"title":"fn","path":"fn.md","outlink":[],"backlink":[]}},{"id":"custom_types/enum.md","value":{"title":"enum","path":"custom_types/enum.md","outlink":[],"backlink":[]}},{"id":"std/option.md","value":{"title":"option","path":"std/option.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"flow_control/match/destructuring/destructure_slice.md","value":{"title":"destructure_slice","path":"flow_control/match/destructuring/destructure_slice.md","outlink":[],"backlink":[]}}],"links":[{"source":"flow_control/match/binding.md","target":"fn.md"},{"source":"flow_control/match/binding.md","target":"custom_types/enum.md"},{"source":"flow_control/match/binding.md","target":"std/option.md"},{"source":"SUMMARY.md","target":"flow_control/match/binding.md"},{"source":"flow_control/match/destructuring/destructure_slice.md","target":"flow_control/match/binding.md"}]}}}');export{b as comp,h as data};
