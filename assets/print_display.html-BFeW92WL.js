import{_ as p,e as d,k as e,f as i,i as n,g as l,h as t,r,o as h}from"./app-CY03Lsxp.js";const k={};function m(o,s){const a=r("RouteLink");return h(),d("div",null,[s[25]||(s[25]=e(`<h1 id="显示-display" tabindex="-1"><a class="header-anchor" href="#显示-display"><span>显示（Display）</span></a></h1><p><code>fmt::Debug</code> 通常看起来不太简洁，因此自定义输出的外观经常是更可取的。这需要通过手动实现 <a href="https://rustwiki.org/zh-CN/std/fmt/" target="_blank" rel="noopener noreferrer"><code>fmt::Display</code></a> 来做到。<code>fmt::Display</code> 采用 <code>{}</code> 标记。实现方式看起来像这样：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// （使用 \`use\`）导入 \`fmt\` 模块使 \`fmt::Display\` 可用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::fmt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义一个结构体，咱们会为它实现 \`fmt::Display\`。以下是个简单的元组结构体</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// \`Structure\`，包含一个 \`i32\` 元素。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Structure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 为了使用 \`{}\` 标记，必须手动为类型实现 \`fmt::Display\` trait。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Display</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Structure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 这个 trait 要求 \`fmt\` 使用与下面的函数完全一致的函数签名</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Formatter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 仅将 self 的第一个元素写入到给定的输出流 \`f\`。返回 \`fmt:Result\`，此</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 结果表明操作成功或失败。注意 \`write!\` 的用法和 \`println!\` 很相似。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        write!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fmt::Display</code> 的效果可能比 <code>fmt::Debug</code> 简洁，但对于 <code>std</code> 库来说，这就有一个问题。模棱两可的类型该如何显示呢？举个例子，假设标准库对所有的 <code>Vec&lt;T&gt;</code> 都实现了同一种输出样式，那么它应该是哪种样式？下面两种中的一种吗？</p><ul><li><code>Vec&lt;path&gt;</code>：<code>/:/etc:/home/username:/bin</code>（使用 <code>:</code> 分割）</li><li><code>Vec&lt;number&gt;</code>：<code>1,2,3</code>（使用 <code>,</code> 分割）</li></ul><p>我们没有这样做，因为没有一种合适的样式适用于所有类型，标准库也并不擅自规定一种样式。对于 <code>Vec&lt;T&gt;</code> 或其他任意泛型容器（generic container），<code>fmt::Display</code> 都没有实现。因此在这些泛型的情况下要用 <code>fmt::Debug</code>。</p><p>这并不是一个问题，因为对于任何<strong>非</strong>泛型的<strong>容器</strong>类型， <code>fmt::Display</code> 都能够实现。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>use std::fmt; // 导入 \`fmt\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 带有两个数字的结构体。推导出 \`Debug\`，以便与 \`Display\` 的输出进行比较。</span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct MinMax(i64, i64);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 实现 \`MinMax\` 的 \`Display\`。</span></span>
<span class="line"><span>impl fmt::Display for MinMax {</span></span>
<span class="line"><span>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {</span></span>
<span class="line"><span>        // 使用 \`self.number\` 来表示各个数据。</span></span>
<span class="line"><span>        write!(f, &quot;({}, {})&quot;, self.0, self.1)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 为了比较，定义一个含有具名字段的结构体。</span></span>
<span class="line"><span>#[derive(Debug)]</span></span>
<span class="line"><span>struct Point2D {</span></span>
<span class="line"><span>    x: f64,</span></span>
<span class="line"><span>    y: f64,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 类似地对 \`Point2D\` 实现 \`Display\`</span></span>
<span class="line"><span>impl fmt::Display for Point2D {</span></span>
<span class="line"><span>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {</span></span>
<span class="line"><span>        // 自定义格式，使得仅显示 \`x\` 和 \`y\` 的值。</span></span>
<span class="line"><span>        write!(f, &quot;x: {}, y: {}&quot;, self.x, self.y)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let minmax = MinMax(0, 14);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;Compare structures:&quot;);</span></span>
<span class="line"><span>    println!(&quot;Display: {}&quot;, minmax);</span></span>
<span class="line"><span>    println!(&quot;Debug: {:?}&quot;, minmax);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let big_range =   MinMax(-300, 300);</span></span>
<span class="line"><span>    let small_range = MinMax(-3, 3);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;The big range is {big} and the small is {small}&quot;,</span></span>
<span class="line"><span>             small = small_range,</span></span>
<span class="line"><span>             big = big_range);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let point = Point2D { x: 3.3, y: 7.2 };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;Compare points:&quot;);</span></span>
<span class="line"><span>    println!(&quot;Display: {}&quot;, point);</span></span>
<span class="line"><span>    println!(&quot;Debug: {:?}&quot;, point);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 报错。\`Debug\` 和 \`Display\` 都被实现了，但 \`{:b}\` 需要 \`fmt::Binary\`</span></span>
<span class="line"><span>    // 得到实现。这语句不能运行。</span></span>
<span class="line"><span>    // println!(&quot;What does Point2D look like in binary: {:b}?&quot;, point);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),i("p",null,[s[1]||(s[1]=i("code",null,"fmt::Display",-1)),s[2]||(s[2]=n(" 被实现了，而 ")),s[3]||(s[3]=i("code",null,"fmt::Binary",-1)),s[4]||(s[4]=n(" 没有，因此 ")),s[5]||(s[5]=i("code",null,"fmt::Binary",-1)),s[6]||(s[6]=n(" 不能使用。")),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("code",null,"std::fmt",-1)),s[9]||(s[9]=n(" 有很多这样的 ")),l(a,{to:"/trait.html"},{default:t(()=>s[0]||(s[0]=[i("code",null,"trait",-1)])),_:1}),s[10]||(s[10]=n("，它们都要求有各自的实现。这些内容将在后面的 ")),s[11]||(s[11]=i("a",{href:"https://rustwiki.org/zh-CN/std/fmt/",target:"_blank",rel:"noopener noreferrer"},[i("code",null,"std::fmt")],-1)),s[12]||(s[12]=n(" 章节中详细介绍。"))]),s[26]||(s[26]=e(`<h3 id="动手试一试" tabindex="-1"><a class="header-anchor" href="#动手试一试"><span>动手试一试</span></a></h3><p>检验上面例子的输出，然后在示例程序中，仿照 <code>Point2D</code> 结构体增加一个名为 <code>Complex</code> 的结构体。<br> 使用一样的方式打印，输出结果要求是这个样子：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Display: 3.3 + 7.2i</span></span>
<span class="line"><span>Debug: Complex { real: 3.3, imag: 7.2 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,4)),i("p",null,[l(a,{to:"/trait/derive.html"},{default:t(()=>s[13]||(s[13]=[i("code",null,"derive",-1)])),_:1}),s[18]||(s[18]=n(", ")),s[19]||(s[19]=i("a",{href:"https://rustwiki.org/zh-CN/std/fmt/",target:"_blank",rel:"noopener noreferrer"},[i("code",null,"std::fmt")],-1)),s[20]||(s[20]=n(", ")),l(a,{to:"/macros.html"},{default:t(()=>s[14]||(s[14]=[n("macros")])),_:1}),s[21]||(s[21]=n(", ")),l(a,{to:"/custom_types/structs.html"},{default:t(()=>s[15]||(s[15]=[i("code",null,"struct",-1)])),_:1}),s[22]||(s[22]=n(",")),s[23]||(s[23]=i("br",null,null,-1)),l(a,{to:"/trait.html"},{default:t(()=>s[16]||(s[16]=[i("code",null,"trait",-1)])),_:1}),s[24]||(s[24]=n(", 和 ")),l(a,{to:"/mod/use.html"},{default:t(()=>s[17]||(s[17]=[n("use")])),_:1})])])}const u=p(k,[["render",m],["__file","print_display.html.vue"]]),v=JSON.parse('{"path":"/hello/print/print_display.html","title":"显示（Display）","lang":"zh-CN","frontmatter":{"description":"显示（Display） fmt::Debug 通常看起来不太简洁，因此自定义输出的外观经常是更可取的。这需要通过手动实现 fmt::Display 来做到。fmt::Display 采用 {} 标记。实现方式看起来像这样： fmt::Display 的效果可能比 fmt::Debug 简洁，但对于 std 库来说，这就有一个问题。模棱两可的类型该如何显...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/hello/print/print_display.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"显示（Display）"}],["meta",{"property":"og:description","content":"显示（Display） fmt::Debug 通常看起来不太简洁，因此自定义输出的外观经常是更可取的。这需要通过手动实现 fmt::Display 来做到。fmt::Display 采用 {} 标记。实现方式看起来像这样： fmt::Display 的效果可能比 fmt::Debug 简洁，但对于 std 库来说，这就有一个问题。模棱两可的类型该如何显..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"显示（Display）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.8,"words":839},"filePathRelative":"hello/print/print_display.md","excerpt":"\\n<p><code>fmt::Debug</code> 通常看起来不太简洁，因此自定义输出的外观经常是更可取的。这需要通过手动实现 <a href=\\"https://rustwiki.org/zh-CN/std/fmt/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>fmt::Display</code></a> 来做到。<code>fmt::Display</code> 采用 <code>{}</code> 标记。实现方式看起来像这样：</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust\\" data-title=\\"rust\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// （使用 `use`）导入 `fmt` 模块使 `fmt::Display` 可用</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">use</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> std</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">::fmt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 定义一个结构体，咱们会为它实现 `fmt::Display`。以下是个简单的元组结构体</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// `Structure`，包含一个 `i32` 元素。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Structure</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">i32</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 为了使用 `{}` 标记，必须手动为类型实现 `fmt::Display` trait。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">impl</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> fmt</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">::</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">Display</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> for</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\"> Structure</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // 这个 trait 要求 `fmt` 使用与下面的函数完全一致的函数签名</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    fn</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> fmt</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(&amp;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">f</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: &amp;</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">mut</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> fmt</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">::</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">Formatter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) -&gt; </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">fmt</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">::</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">Result</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">        // 仅将 self 的第一个元素写入到给定的输出流 `f`。返回 `fmt:Result`，此</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">        // 结果表明操作成功或失败。注意 `write!` 的用法和 `println!` 很相似。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">        write!</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">f</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"{}\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"trait","link":"trait.html"},{"title":"derive","link":"trait/derive.html"},{"title":"macros","link":"macros.html"},{"title":"structs","link":"custom_types/structs.html"},{"title":"use","link":"mod/use.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"tuples","link":"primitives/tuples.html"}],"localMap":{"nodes":[{"id":"hello/print/print_display.md","value":{"title":"print_display","path":"hello/print/print_display.md","outlink":["trait.md","trait/derive.md","macros.md","custom_types/structs.md","mod/use.md"],"backlink":["SUMMARY.md","primitives/tuples.md"]}},{"id":"trait.md","value":{"title":"trait","path":"trait.md","outlink":[],"backlink":[]}},{"id":"trait/derive.md","value":{"title":"derive","path":"trait/derive.md","outlink":[],"backlink":[]}},{"id":"macros.md","value":{"title":"macros","path":"macros.md","outlink":[],"backlink":[]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"mod/use.md","value":{"title":"use","path":"mod/use.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"primitives/tuples.md","value":{"title":"tuples","path":"primitives/tuples.md","outlink":[],"backlink":[]}}],"links":[{"source":"hello/print/print_display.md","target":"trait.md"},{"source":"hello/print/print_display.md","target":"trait/derive.md"},{"source":"hello/print/print_display.md","target":"macros.md"},{"source":"hello/print/print_display.md","target":"custom_types/structs.md"},{"source":"hello/print/print_display.md","target":"mod/use.md"},{"source":"SUMMARY.md","target":"hello/print/print_display.md"},{"source":"primitives/tuples.md","target":"hello/print/print_display.md"}]}}}');export{u as comp,v as data};
