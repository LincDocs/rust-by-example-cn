import{_ as s,e as a,k as i,o as e}from"./app-CVSWwIkE.js";const t={};function l(p,n){return e(),a("div",null,n[0]||(n[0]=[i(`<h1 id="父-trait" tabindex="-1"><a class="header-anchor" href="#父-trait"><span>父 trait</span></a></h1><p>Rust 没有“继承”，但是您可以将一个 trait 定义为另一个 trait 的超集（即父 trait）。例如：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>trait Person {</span></span>
<span class="line"><span>    fn name(&amp;self) -&gt; String;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Person 是 Student 的父 trait。</span></span>
<span class="line"><span>// 实现 Student 需要你也 impl 了 Person。</span></span>
<span class="line"><span>trait Student: Person {</span></span>
<span class="line"><span>    fn university(&amp;self) -&gt; String;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>trait Programmer {</span></span>
<span class="line"><span>    fn fav_language(&amp;self) -&gt; String;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// CompSciStudent (computer science student，计算机科学的学生) 是 Programmer 和 Student 两者的子类。</span></span>
<span class="line"><span>// 实现 CompSciStudent 需要你同时 impl 了两个父 trait。</span></span>
<span class="line"><span>trait CompSciStudent: Programmer + Student {</span></span>
<span class="line"><span>    fn git_username(&amp;self) -&gt; String;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn comp_sci_student_greeting(student: &amp;dyn CompSciStudent) -&gt; String {</span></span>
<span class="line"><span>    format!(</span></span>
<span class="line"><span>        &quot;My name is {} and I attend {}. My favorite language is {}. My Git username is {}&quot;,</span></span>
<span class="line"><span>        student.name(),</span></span>
<span class="line"><span>        student.university(),</span></span>
<span class="line"><span>        student.fav_language(),</span></span>
<span class="line"><span>        student.git_username()</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3><p><a href="https://rustwiki.org/zh-CN/book/ch19-03-advanced-traits.html#%E7%88%B6-trait-%E7%94%A8%E4%BA%8E%E5%9C%A8%E5%8F%A6%E4%B8%80%E4%B8%AA-trait-%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%9F%90-trait-%E7%9A%84%E5%8A%9F%E8%83%BD" target="_blank" rel="noopener noreferrer">《Rust 程序设计语言》的“父级 trait”章节</a></p>`,5)]))}const d=s(t,[["render",l],["__file","supertraits.html.vue"]]),c=JSON.parse('{"path":"/trait/supertraits.html","title":"父 trait","lang":"zh-CN","frontmatter":{"description":"父 trait Rust 没有“继承”，但是您可以将一个 trait 定义为另一个 trait 的超集（即父 trait）。例如： 参见： 《Rust 程序设计语言》的“父级 trait”章节","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/trait/supertraits.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"父 trait"}],["meta",{"property":"og:description","content":"父 trait Rust 没有“继承”，但是您可以将一个 trait 定义为另一个 trait 的超集（即父 trait）。例如： 参见： 《Rust 程序设计语言》的“父级 trait”章节"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"父 trait\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.61,"words":184},"filePathRelative":"trait/supertraits.md","excerpt":"\\n<p>Rust 没有“继承”，但是您可以将一个 trait 定义为另一个 trait 的超集（即父 trait）。例如：</p>\\n<div class=\\"language-rust,editable line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust,editable\\" data-title=\\"rust,editable\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>trait Person {</span></span>\\n<span class=\\"line\\"><span>    fn name(&amp;self) -&gt; String;</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// Person 是 Student 的父 trait。</span></span>\\n<span class=\\"line\\"><span>// 实现 Student 需要你也 impl 了 Person。</span></span>\\n<span class=\\"line\\"><span>trait Student: Person {</span></span>\\n<span class=\\"line\\"><span>    fn university(&amp;self) -&gt; String;</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>trait Programmer {</span></span>\\n<span class=\\"line\\"><span>    fn fav_language(&amp;self) -&gt; String;</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// CompSciStudent (computer science student，计算机科学的学生) 是 Programmer 和 Student 两者的子类。</span></span>\\n<span class=\\"line\\"><span>// 实现 CompSciStudent 需要你同时 impl 了两个父 trait。</span></span>\\n<span class=\\"line\\"><span>trait CompSciStudent: Programmer + Student {</span></span>\\n<span class=\\"line\\"><span>    fn git_username(&amp;self) -&gt; String;</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn comp_sci_student_greeting(student: &amp;dyn CompSciStudent) -&gt; String {</span></span>\\n<span class=\\"line\\"><span>    format!(</span></span>\\n<span class=\\"line\\"><span>        \\"My name is {} and I attend {}. My favorite language is {}. My Git username is {}\\",</span></span>\\n<span class=\\"line\\"><span>        student.name(),</span></span>\\n<span class=\\"line\\"><span>        student.university(),</span></span>\\n<span class=\\"line\\"><span>        student.fav_language(),</span></span>\\n<span class=\\"line\\"><span>        student.git_username()</span></span>\\n<span class=\\"line\\"><span>    )</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>fn main() {}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"trait/supertraits.md","value":{"title":"supertraits","path":"trait/supertraits.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"trait/supertraits.md"}]}}}');export{d as comp,c as data};
