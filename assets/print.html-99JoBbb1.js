import{_ as r,e as d,f as s,k as a,i as t,g as l,h as e,r as p,o}from"./app-CY03Lsxp.js";const u={};function m(c,n){const i=p("RouteLink");return o(),d("div",null,[n[39]||(n[39]=s("h1",{id:"格式化输出",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#格式化输出"},[s("span",null,"格式化输出")])],-1)),s("p",null,[n[1]||(n[1]=t("打印操作由 ")),n[2]||(n[2]=s("a",{href:"https://rustwiki.org/zh-CN/std/fmt/",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"std::fmt")],-1)),n[3]||(n[3]=t(" 里面所定义的一系列")),l(i,{to:"/macros.html"},{default:e(()=>n[0]||(n[0]=[t("宏")])),_:1}),n[4]||(n[4]=t("来处理，包括："))]),s("ul",null,[s("li",null,[n[6]||(n[6]=s("code",null,"format!",-1)),n[7]||(n[7]=t("：将格式化文本写到")),l(i,{to:"/std/str.html"},{default:e(()=>n[5]||(n[5]=[t("字符串")])),_:1}),n[8]||(n[8]=t("。"))]),n[9]||(n[9]=a("<li><code>print!</code>：与 <code>format!</code> 类似，但将文本输出到控制台（io::stdout）。</li><li><code>println!</code>: 与 <code>print!</code> 类似，但输出结果追加一个换行符。</li><li><code>eprint!</code>：与 <code>print!</code> 类似，但将文本输出到标准错误（io::stderr）。</li><li><code>eprintln!</code>：与 <code>eprint!</code> 类似，但输出结果追加一个换行符。</li>",4))]),n[40]||(n[40]=a(`<p>这些宏都以相同的做法解析文本。有个额外优点是格式化的正确性会在编译时检查。</p><div class="language-rust,editable,ignore,mdbook-runnable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore,mdbook-runnable" data-title="rust,editable,ignore,mdbook-runnable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 通常情况下，\`{}\` 会被任意变量内容所替换。</span></span>
<span class="line"><span>    // 变量内容会转化成字符串。</span></span>
<span class="line"><span>    println!(&quot;{} days&quot;, 31);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 可以使用位置参数。</span></span>
<span class="line"><span>    // 在 \`{}\` 中指定一个整数确定将替换哪个附加参数。</span></span>
<span class="line"><span>    // 参数从紧接在格式字符串之后的 0 开始。</span></span>
<span class="line"><span>    println!(&quot;{0}, this is {1}. {1}, this is {0}&quot;, &quot;Alice&quot;, &quot;Bob&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 可以使用命名参数。</span></span>
<span class="line"><span>    println!(&quot;{subject} {verb} {object}&quot;,</span></span>
<span class="line"><span>             object=&quot;the lazy dog&quot;,</span></span>
<span class="line"><span>             subject=&quot;the quick brown fox&quot;,</span></span>
<span class="line"><span>             verb=&quot;jumps over&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 通过在 \`:\` 后面指定格式字符，可以调用不同的格式。</span></span>
<span class="line"><span>    println!(&quot;Base 10:               {}&quot;,   69420); // 69420</span></span>
<span class="line"><span>    println!(&quot;Base 2 (binary):       {:b}&quot;, 69420); // 10000111100101100</span></span>
<span class="line"><span>    println!(&quot;Base 8 (octal):        {:o}&quot;, 69420); // 207454</span></span>
<span class="line"><span>    println!(&quot;Base 16 (hexadecimal): {:x}&quot;, 69420); // 10f2c</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 可以用指定的宽度对文本进行右对齐。</span></span>
<span class="line"><span>    // 这将输出“    1”。(四个空格和一个“1”，总宽度为5)</span></span>
<span class="line"><span>    println!(&quot;{number:&gt;5}&quot;, number=1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 你可以在数字左边补 0，</span></span>
<span class="line"><span>    println!(&quot;{number:0&gt;5}&quot;, number=1); // 00001</span></span>
<span class="line"><span>    // 在数字右边补零，下面语句输出 &quot;000001&quot;。</span></span>
<span class="line"><span>    println!(&quot;{number:0&lt;5}&quot;, number=1); // 10000</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 可以通过添加 \`$\` 在格式说明符中使用命名参数。</span></span>
<span class="line"><span>    println!(&quot;{number:0&gt;width$}&quot;, number=1, width=5);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // println! 会检查使用到的参数数量是否正确。</span></span>
<span class="line"><span>    println!(&quot;My name is {0}, {1} {0}&quot;, &quot;Bond&quot;);</span></span>
<span class="line"><span>    // FIXME ^ 补上漏掉的参数：&quot;James&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 只有实现了fmt::Display的类型才能使用&#39;{}&#39;进行格式化。</span></span>
<span class="line"><span>    // 默认情况下，用户定义的类型不实现fmt::Display。</span></span>
<span class="line"><span>    #[allow(dead_code)]  // 禁用对未使用模块发出警告的&#39; dead_code &#39;</span></span>
<span class="line"><span>    struct Structure(i32);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 这将不会编译，因为 \`Structure\` 没有实现</span></span>
<span class="line"><span>    // 下面语句无法运行。</span></span>
<span class="line"><span>    // println!(&quot;This struct \`{}\` won&#39;t print...&quot;, Structure(3));</span></span>
<span class="line"><span>    // TODO ^ 注释掉此行。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 对于 Rust 1.58 及更高版本，你可以直接从周围变量捕获参数。</span></span>
<span class="line"><span>    // 就像上面一样，这将输出“    1”，4 个空格和 1 个“1”。</span></span>
<span class="line"><span>    let number: f64 = 1.0;</span></span>
<span class="line"><span>    let width: usize = 5;</span></span>
<span class="line"><span>    println!(&quot;{number:&gt;width$}&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[11]||(n[11]=s("a",{href:"https://rustwiki.org/zh-CN/std/fmt/",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"std::fmt")],-1)),n[12]||(n[12]=t(" 包含多种 ")),l(i,{to:"/trait.html"},{default:e(()=>n[10]||(n[10]=[s("code",null,"traits",-1)])),_:1}),n[13]||(n[13]=t("（特质）来控制文字显示，其中重要的两种 trait 的基本形式如下："))]),n[41]||(n[41]=a("<ul><li><code>fmt::Debug</code>：使用 <code>{:?}</code> 标记。格式化文本以供调试使用。</li><li><code>fmt::Display</code>：使用 <code>{}</code> 标记。以更优雅和友好的风格来格式化文本。</li></ul><p>上例使用了 <code>fmt::Display</code>，因为标准库提供了那些类型的实现。若要打印自定义类型的文本，需要更多的步骤。</p>",2)),s("p",null,[n[16]||(n[16]=t("实现 ")),n[17]||(n[17]=s("code",null,"fmt::Display",-1)),n[18]||(n[18]=t(" 特性会自动实现 ")),n[19]||(n[19]=s("a",{href:"https://doc.rust-lang.org/std/string/trait.ToString.html",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"ToString")],-1)),n[20]||(n[20]=t(" 特征，它允许我们将类型 ")),l(i,{to:"/conversion/string.html"},{default:e(()=>n[14]||(n[14]=[t("convert")])),_:1}),n[21]||(n[21]=t(" 为 ")),l(i,{to:"/std/str.html"},{default:e(()=>n[15]||(n[15]=[s("code",null,"String",-1)])),_:1}),n[22]||(n[22]=t("。"))]),s("p",null,[n[24]||(n[24]=t("在")),n[25]||(n[25]=s("em",null,"第 43 行",-1)),n[26]||(n[26]=t("中，")),n[27]||(n[27]=s("code",null,"#[allow(dead_code)]",-1)),n[28]||(n[28]=t(" 是一个 ")),l(i,{to:"/attribute.html"},{default:e(()=>n[23]||(n[23]=[t("attribute")])),_:1}),n[29]||(n[29]=t("，只适用于它后面的模块。"))]),n[42]||(n[42]=a('<h3 id="动手试一试" tabindex="-1"><a class="header-anchor" href="#动手试一试"><span>动手试一试</span></a></h3><ul><li>改正上面代码中的错误（见 FIXME），使它可以没有错误地运行。</li><li>尝试取消注释，输出结构体内容（见 TODO）。</li><li>再用一个 <code>println!</code> 宏，通过控制显示的小数位数来打印：<code>Pi is roughly 3.142</code>（Pi 约等于 3.142）。为了达到练习目的，使用 <code>let pi = 3.141592</code> 作为 Pi 的近似值（提示：设置小数位的显示格式可以参考文档 <a href="https://rustwiki.org/zh-CN/std/fmt/" target="_blank" rel="noopener noreferrer"><code>std::fmt</code></a>）。</li></ul><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>',3)),s("p",null,[n[34]||(n[34]=s("a",{href:"https://rustwiki.org/zh-CN/std/fmt/",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"std::fmt")],-1)),n[35]||(n[35]=t(", ")),l(i,{to:"/macros.html"},{default:e(()=>n[30]||(n[30]=[s("code",null,"macros",-1)])),_:1}),n[36]||(n[36]=t(", ")),l(i,{to:"/custom_types/structs.html"},{default:e(()=>n[31]||(n[31]=[s("code",null,"struct",-1)])),_:1}),n[37]||(n[37]=t(", ")),l(i,{to:"/trait.html"},{default:e(()=>n[32]||(n[32]=[s("code",null,"traits",-1)])),_:1}),n[38]||(n[38]=t(" 和 ")),l(i,{to:"/attribute/unused.html"},{default:e(()=>n[33]||(n[33]=[s("code",null,"dead_code",-1)])),_:1})])])}const v=r(u,[["render",m],["__file","print.html.vue"]]),g=JSON.parse('{"path":"/hello/print.html","title":"格式化输出","lang":"zh-CN","frontmatter":{"description":"格式化输出 打印操作由 std::fmt 里面所定义的一系列来处理，包括： format!：将格式化文本写到。 print!：与 format! 类似，但将文本输出到控制台（io::stdout）。 println!: 与 print! 类似，但输出结果追加一个换行符。 eprint!：与 print! 类似，但将文本输出到标准错误（io::stder...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/hello/print.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"格式化输出"}],["meta",{"property":"og:description","content":"格式化输出 打印操作由 std::fmt 里面所定义的一系列来处理，包括： format!：将格式化文本写到。 print!：与 format! 类似，但将文本输出到控制台（io::stdout）。 println!: 与 print! 类似，但输出结果追加一个换行符。 eprint!：与 print! 类似，但将文本输出到标准错误（io::stder..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"格式化输出\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.09,"words":927},"filePathRelative":"hello/print.md","excerpt":"\\n<p>打印操作由 <a href=\\"https://rustwiki.org/zh-CN/std/fmt/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>std::fmt</code></a> 里面所定义的一系列<a href=\\"/rust-by-example-cn/macros.html\\" target=\\"_blank\\">宏</a>来处理，包括：</p>\\n<ul>\\n<li><code>format!</code>：将格式化文本写到<a href=\\"/rust-by-example-cn/std/str.html\\" target=\\"_blank\\">字符串</a>。</li>\\n<li><code>print!</code>：与 <code>format!</code> 类似，但将文本输出到控制台（io::stdout）。</li>\\n<li><code>println!</code>: 与 <code>print!</code> 类似，但输出结果追加一个换行符。</li>\\n<li><code>eprint!</code>：与 <code>print!</code> 类似，但将文本输出到标准错误（io::stderr）。</li>\\n<li><code>eprintln!</code>：与 <code>eprint!</code> 类似，但输出结果追加一个换行符。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[{"title":"macros","link":"macros.html"},{"title":"str","link":"std/str.html"},{"title":"trait","link":"trait.html"},{"title":"string","link":"conversion/string.html"},{"title":"attribute","link":"attribute.html"},{"title":"structs","link":"custom_types/structs.html"},{"title":"unused","link":"attribute/unused.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"string","link":"conversion/string.html"},{"title":"bounds","link":"generics/bounds.html"},{"title":"multi_bounds","link":"generics/multi_bounds.html"}],"localMap":{"nodes":[{"id":"hello/print.md","value":{"title":"print","path":"hello/print.md","outlink":["macros.md","std/str.md","trait.md","conversion/string.md","attribute.md","custom_types/structs.md","attribute/unused.md"],"backlink":["SUMMARY.md","conversion/string.md","generics/bounds.md","generics/multi_bounds.md"]}},{"id":"macros.md","value":{"title":"macros","path":"macros.md","outlink":[],"backlink":[]}},{"id":"std/str.md","value":{"title":"str","path":"std/str.md","outlink":[],"backlink":[]}},{"id":"trait.md","value":{"title":"trait","path":"trait.md","outlink":[],"backlink":[]}},{"id":"conversion/string.md","value":{"title":"string","path":"conversion/string.md","outlink":[],"backlink":[]}},{"id":"attribute.md","value":{"title":"attribute","path":"attribute.md","outlink":[],"backlink":[]}},{"id":"custom_types/structs.md","value":{"title":"structs","path":"custom_types/structs.md","outlink":[],"backlink":[]}},{"id":"attribute/unused.md","value":{"title":"unused","path":"attribute/unused.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"generics/bounds.md","value":{"title":"bounds","path":"generics/bounds.md","outlink":[],"backlink":[]}},{"id":"generics/multi_bounds.md","value":{"title":"multi_bounds","path":"generics/multi_bounds.md","outlink":[],"backlink":[]}}],"links":[{"source":"hello/print.md","target":"macros.md"},{"source":"hello/print.md","target":"std/str.md"},{"source":"hello/print.md","target":"trait.md"},{"source":"hello/print.md","target":"conversion/string.md"},{"source":"hello/print.md","target":"attribute.md"},{"source":"hello/print.md","target":"custom_types/structs.md"},{"source":"hello/print.md","target":"attribute/unused.md"},{"source":"SUMMARY.md","target":"hello/print.md"},{"source":"conversion/string.md","target":"hello/print.md"},{"source":"generics/bounds.md","target":"hello/print.md"},{"source":"generics/multi_bounds.md","target":"hello/print.md"}]}}}');export{v as comp,g as data};
