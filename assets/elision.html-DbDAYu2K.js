import{_ as e,e as s,k as i,o as a}from"./app-CVSWwIkE.js";const l={};function t(p,n){return a(),s("div",null,n[0]||(n[0]=[i(`<h1 id="省略" tabindex="-1"><a class="header-anchor" href="#省略"><span>省略</span></a></h1><p>有些生命周期的模式太常用了，所以借用检查器将会隐式地添加它们以减少程序输入量和增强可读性。这种隐式添加生命周期的过程称为省略（elision）。在 Rust 使用省略仅仅是因为这些模式太普遍了。</p><p>下面代码展示了一些省略的例子。对于省略的详细描述，可以参考官方文档的<a href="https://rustwiki.org/zh-CN/book/ch10-03-lifetime-syntax.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9C%81%E7%95%A5lifetime-elision" target="_blank" rel="noopener noreferrer">生命周期省略</a>。</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// \`elided_input\` 和 \`annotated_input\` 事实上拥有相同的签名，</span></span>
<span class="line"><span>// \`elided_input\` 的生命周期会被编译器自动添加：</span></span>
<span class="line"><span>fn elided_input(x: &amp;i32) {</span></span>
<span class="line"><span>    println!(&quot;\`elided_input\`: {}&quot;, x)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn annotated_input&lt;&#39;a&gt;(x: &amp;&#39;a i32) {</span></span>
<span class="line"><span>    println!(&quot;\`annotated_input\`: {}&quot;, x)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 类似地，\`elided_pass\` 和 \`annotated_pass\` 也拥有相同的签名，</span></span>
<span class="line"><span>// 生命周期会被隐式地添加进 \`elided_pass\`：</span></span>
<span class="line"><span>fn elided_pass(x: &amp;i32) -&gt; &amp;i32 { x }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn annotated_pass&lt;&#39;a&gt;(x: &amp;&#39;a i32) -&gt; &amp;&#39;a i32 { x }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let x = 3;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    elided_input(&amp;x);</span></span>
<span class="line"><span>    annotated_input(&amp;x);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println!(&quot;\`elided_pass\`: {}&quot;, elided_pass(&amp;x));</span></span>
<span class="line"><span>    println!(&quot;\`annotated_pass\`: {}&quot;, annotated_pass(&amp;x));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3><p><a href="https://rustwiki.org/zh-CN/book/ch10-03-lifetime-syntax.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9C%81%E7%95%A5lifetime-elision" target="_blank" rel="noopener noreferrer">省略</a></p>`,6)]))}const o=e(l,[["render",t],["__file","elision.html.vue"]]),c=JSON.parse('{"path":"/scope/lifetime/elision.html","title":"省略","lang":"zh-CN","frontmatter":{"description":"省略 有些生命周期的模式太常用了，所以借用检查器将会隐式地添加它们以减少程序输入量和增强可读性。这种隐式添加生命周期的过程称为省略（elision）。在 Rust 使用省略仅仅是因为这些模式太普遍了。 下面代码展示了一些省略的例子。对于省略的详细描述，可以参考官方文档的生命周期省略。 参见： 省略","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn-/scope/lifetime/elision.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn-"}],["meta",{"property":"og:title","content":"省略"}],["meta",{"property":"og:description","content":"省略 有些生命周期的模式太常用了，所以借用检查器将会隐式地添加它们以减少程序输入量和增强可读性。这种隐式添加生命周期的过程称为省略（elision）。在 Rust 使用省略仅仅是因为这些模式太普遍了。 下面代码展示了一些省略的例子。对于省略的详细描述，可以参考官方文档的生命周期省略。 参见： 省略"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"省略\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn-/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.83,"words":250},"filePathRelative":"scope/lifetime/elision.md","excerpt":"\\n<p>有些生命周期的模式太常用了，所以借用检查器将会隐式地添加它们以减少程序输入量和增强可读性。这种隐式添加生命周期的过程称为省略（elision）。在 Rust 使用省略仅仅是因为这些模式太普遍了。</p>\\n<p>下面代码展示了一些省略的例子。对于省略的详细描述，可以参考官方文档的<a href=\\"https://rustwiki.org/zh-CN/book/ch10-03-lifetime-syntax.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9C%81%E7%95%A5lifetime-elision\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">生命周期省略</a>。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"explicit","link":"scope/lifetime/explicit.html"},{"title":"fn","link":"scope/lifetime/fn.html"}],"localMap":{"nodes":[{"id":"scope/lifetime/elision.md","value":{"title":"elision","path":"scope/lifetime/elision.md","outlink":[],"backlink":["SUMMARY.md","scope/lifetime/explicit.md","scope/lifetime/fn.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"scope/lifetime/explicit.md","value":{"title":"explicit","path":"scope/lifetime/explicit.md","outlink":[],"backlink":[]}},{"id":"scope/lifetime/fn.md","value":{"title":"fn","path":"scope/lifetime/fn.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"scope/lifetime/elision.md"},{"source":"scope/lifetime/explicit.md","target":"scope/lifetime/elision.md"},{"source":"scope/lifetime/fn.md","target":"scope/lifetime/elision.md"}]}}}');export{o as comp,c as data};
