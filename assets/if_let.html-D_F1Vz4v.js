import{_ as t,e as p,k as d,f as i,g as a,i as l,h as e,r,o as c}from"./app-CY03Lsxp.js";const o={};function h(k,s){const n=r("RouteLink");return c(),p("div",null,[s[5]||(s[5]=d(`<h1 id="if-let" tabindex="-1"><a class="header-anchor" href="#if-let"><span>if let</span></a></h1><p>在一些场合下，用 <code>match</code> 匹配枚举类型并不优雅。比如：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将 \`optional\` 定为 \`Option&lt;i32&gt;\` 类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> optional</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Some</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">match</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Some</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;This is a really long string and \`{:?}\`&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // ^ 行首需要 2 层缩进。这里从 optional 中解构出 \`i\`。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 译注：正确的缩进是好的，但并不是 “不缩进就不能运行” 这个意思。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; {},</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ^ 必须有，因为 \`match\` 需要覆盖全部情况。不觉得这行很多余吗？</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>if let</code> 在这样的场合要简洁得多，并且允许指明数种失败情形下的选项：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 全部都是 \`Option&lt;i32&gt;\` 类型</span></span>
<span class="line"><span>    let number = Some(7);</span></span>
<span class="line"><span>    let letter: Option&lt;i32&gt; = None;</span></span>
<span class="line"><span>    let emoticon: Option&lt;i32&gt; = None;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // \`if let\` 结构读作：若 \`let\` 将 \`number\` 解构成 \`Some(i)\`，则执行</span></span>
<span class="line"><span>    // 语句块（\`{}\`）</span></span>
<span class="line"><span>    if let Some(i) = number {</span></span>
<span class="line"><span>        println!(&quot;Matched {:?}!&quot;, i);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 如果要指明失败情形，就使用 else：</span></span>
<span class="line"><span>    if let Some(i) = letter {</span></span>
<span class="line"><span>        println!(&quot;Matched {:?}!&quot;, i);</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        // 解构失败。切换到失败情形。</span></span>
<span class="line"><span>        println!(&quot;Didn&#39;t match a number. Let&#39;s go with a letter!&quot;);</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 提供另一种失败情况下的条件。</span></span>
<span class="line"><span>    let i_like_letters = false;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if let Some(i) = emoticon {</span></span>
<span class="line"><span>        println!(&quot;Matched {:?}!&quot;, i);</span></span>
<span class="line"><span>    // 解构失败。使用 \`else if\` 来判断是否满足上面提供的条件。</span></span>
<span class="line"><span>    } else if i_like_letters {</span></span>
<span class="line"><span>        println!(&quot;Didn&#39;t match a number. Let&#39;s go with a letter!&quot;);</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        // 条件的值为 false。于是以下是默认的分支：</span></span>
<span class="line"><span>        println!(&quot;I don&#39;t like letters. Let&#39;s go with an emoticon :)!&quot;);</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，可以用 <code>if let</code> 匹配任何枚举值：</p><div class="language-rust,editable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable" data-title="rust,editable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 以这个 enum 类型为例</span></span>
<span class="line"><span>enum Foo {</span></span>
<span class="line"><span>    Bar,</span></span>
<span class="line"><span>    Baz,</span></span>
<span class="line"><span>    Qux(u32)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 创建变量</span></span>
<span class="line"><span>    let a = Foo::Bar;</span></span>
<span class="line"><span>    let b = Foo::Baz;</span></span>
<span class="line"><span>    let c = Foo::Qux(100);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 变量 a 匹配到了 Foo::Bar</span></span>
<span class="line"><span>    if let Foo::Bar = a {</span></span>
<span class="line"><span>        println!(&quot;a is foobar&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 变量 b 没有匹配到 Foo::Bar，因此什么也不会打印。</span></span>
<span class="line"><span>    if let Foo::Bar = b {</span></span>
<span class="line"><span>        println!(&quot;b is foobar&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 变量 c 匹配到了 Foo::Qux，它带有一个值，就和上面例子中的 Some() 类似。</span></span>
<span class="line"><span>    if let Foo::Qux(value) = c {</span></span>
<span class="line"><span>        println!(&quot;c is {}&quot;, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个好处是：<code>if let</code> 允许匹配枚举非参数化的变量，即枚举未注明 <code>#[derive(PartialEq)]</code>，我们也没有为其实现 <code>PartialEq</code>。在这种情况下，通常 <code>if Foo::Bar==a</code> 会出错，因为此类枚举的实例不具有可比性。但是，<code>if let</code> 是可行的。</p><p>你想挑战一下吗？使用 <code>if let</code>修复以下示例：</p><div class="language-rust,editable,ignore,mdbook-runnable line-numbers-mode" data-highlighter="shiki" data-ext="rust,editable,ignore,mdbook-runnable" data-title="rust,editable,ignore,mdbook-runnable" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 该枚举故意未注明 \`#[derive(PartialEq)]\`，</span></span>
<span class="line"><span>// 并且也没为其实现 \`PartialEq\`。这就是为什么下面比较 \`Foo::Bar==a\` 会失败的原因。</span></span>
<span class="line"><span>enum Foo {Bar}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let a = Foo::Bar;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 变量匹配 Foo::Bar</span></span>
<span class="line"><span>    if Foo::Bar == a {</span></span>
<span class="line"><span>    // ^-- 这就是编译时发现的错误。使用 \`if let\` 来替换它。</span></span>
<span class="line"><span>        println!(&quot;a is foobar&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见：</span></a></h3>`,11)),i("p",null,[a(n,{to:"/custom_types/enum.html"},{default:e(()=>s[0]||(s[0]=[i("code",null,"枚举",-1)])),_:1}),s[2]||(s[2]=l("，")),a(n,{to:"/std/option.html"},{default:e(()=>s[1]||(s[1]=[i("code",null,"Option",-1)])),_:1}),s[3]||(s[3]=l("，和相关的 ")),s[4]||(s[4]=i("a",{href:"https://github.com/rust-lang/rfcs/pull/160",target:"_blank",rel:"noopener noreferrer"},"RFC",-1))])])}const v=t(o,[["render",h],["__file","if_let.html.vue"]]),m=JSON.parse('{"path":"/flow_control/if_let.html","title":"if let","lang":"zh-CN","frontmatter":{"description":"if let 在一些场合下，用 match 匹配枚举类型并不优雅。比如： if let 在这样的场合要简洁得多，并且允许指明数种失败情形下的选项： 同样，可以用 if let 匹配任何枚举值： 另一个好处是：if let 允许匹配枚举非参数化的变量，即枚举未注明 #[derive(PartialEq)]，我们也没有为其实现 PartialEq。在这种情...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-by-example-cn/flow_control/if_let.html"}],["meta",{"property":"og:site_name","content":"rust-by-example-cn"}],["meta",{"property":"og:title","content":"if let"}],["meta",{"property":"og:description","content":"if let 在一些场合下，用 match 匹配枚举类型并不优雅。比如： if let 在这样的场合要简洁得多，并且允许指明数种失败情形下的选项： 同样，可以用 if let 匹配任何枚举值： 另一个好处是：if let 允许匹配枚举非参数化的变量，即枚举未注明 #[derive(PartialEq)]，我们也没有为其实现 PartialEq。在这种情..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"if let\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-by-example-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.29,"words":686},"filePathRelative":"flow_control/if_let.md","excerpt":"\\n<p>在一些场合下，用 <code>match</code> 匹配枚举类型并不优雅。比如：</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust\\" data-title=\\"rust\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 将 `optional` 定为 `Option&lt;i32&gt;` 类型</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> optional</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Some</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">7</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">match</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> optional</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    Some</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">i</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) =&gt; {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">        println!</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"This is a really long string and `{:?}`\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">i</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">        // ^ 行首需要 2 层缩进。这里从 optional 中解构出 `i`。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">        // 译注：正确的缩进是好的，但并不是 “不缩进就不能运行” 这个意思。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">    _</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> =&gt; {},</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // ^ 必须有，因为 `match` 需要覆盖全部情况。不觉得这行很多余吗？</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">};</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"enum","link":"custom_types/enum.html"},{"title":"option","link":"std/option.html"}],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"flow_control/if_let.md","value":{"title":"if_let","path":"flow_control/if_let.md","outlink":["custom_types/enum.md","std/option.md"],"backlink":["SUMMARY.md"]}},{"id":"custom_types/enum.md","value":{"title":"enum","path":"custom_types/enum.md","outlink":[],"backlink":[]}},{"id":"std/option.md","value":{"title":"option","path":"std/option.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"flow_control/if_let.md","target":"custom_types/enum.md"},{"source":"flow_control/if_let.md","target":"std/option.md"},{"source":"SUMMARY.md","target":"flow_control/if_let.md"}]}}}');export{v as comp,m as data};
